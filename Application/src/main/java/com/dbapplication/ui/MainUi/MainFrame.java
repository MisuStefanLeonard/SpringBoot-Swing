/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.dbapplication.ui.MainUi;

import com.dbapplication.DTOmodels.DoctoriDTO;
import com.dbapplication.models.CabineteDoctori;
import com.dbapplication.models.Doctori;
import com.dbapplication.models.Medicamente;
import com.dbapplication.models.Pacienti;
import com.dbapplication.models.Retete;
import com.dbapplication.models.ReteteCuMedicamentele;
import com.dbapplication.models.TesteLaborator;
import com.dbapplication.models.TestePacienti;
import com.dbapplication.models.TipDoctori;
import com.dbapplication.models.VIEWModels.CabineteDoctoriVIEW;
import com.dbapplication.models.VIEWModels.ReteteVIEW;
import com.dbapplication.service.CabineteDoctoriServiceImplementation;
import com.dbapplication.service.DoctoriServiceImplementation;
import com.dbapplication.service.MedicamenteServiceImplementation;
import com.dbapplication.service.PacientiServiceImplementation;
import com.dbapplication.service.ReteteCuMedicamenteleImplementation;
import com.dbapplication.service.ReteteServiceImplementation;
import com.dbapplication.service.TesteLaboratorServiceImplementation;
import com.dbapplication.service.TestePacientiServiceImplementation;
import com.dbapplication.service.TipDoctoriServiceImplementation;
import com.dbapplication.service.CabineteDoctoriViewServiceImplementation;
import com.dbapplication.service.ReteteViewServiceImplementation;
import com.formdev.flatlaf.ui.FlatRoundBorder;
import com.formdev.flatlaf.ui.FlatTextBorder;
import java.awt.CardLayout;
import java.awt.Color;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author misustefan
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private TipDoctoriServiceImplementation CRUD_DoctorType;
    private DoctoriServiceImplementation CRUD_Doctor;
    private PacientiServiceImplementation CRUD_Pacienti;
    private TesteLaboratorServiceImplementation CRUD_TesteLaborator;
    private TestePacientiServiceImplementation CRUD_TestePacienti;
    private CabineteDoctoriServiceImplementation CRUD_DoctorCabinets;
    private ReteteServiceImplementation CRUD_Retete;
    private MedicamenteServiceImplementation CRUD_Medicamente;
    private ReteteCuMedicamenteleImplementation CRUD_reteteCuMedicamentele;
    private CabineteDoctoriViewServiceImplementation CRUD_cabineteDoctoriView;
    private ReteteViewServiceImplementation CRUD_Retete_VIEW;
    
    
    public MainFrame(TipDoctoriServiceImplementation tipDoctoriService , DoctoriServiceImplementation doctoriServiceImplementation,
                    PacientiServiceImplementation pacientiService , TesteLaboratorServiceImplementation testeLaboratorService,
                    TestePacientiServiceImplementation testePacientiService , CabineteDoctoriServiceImplementation cabineteDoctoriService,
                    ReteteServiceImplementation reteteService , MedicamenteServiceImplementation medicamenteService , ReteteCuMedicamenteleImplementation reteteCuMedicamenteleImplementation,
                    CabineteDoctoriViewServiceImplementation cabineteDoctoriViewServiceImplementation , ReteteViewServiceImplementation reteteViewServiceImplementation) {
        this.CRUD_DoctorType = tipDoctoriService;
        this.CRUD_Doctor = doctoriServiceImplementation;
        this.CRUD_Pacienti = pacientiService;
        this.CRUD_TesteLaborator = testeLaboratorService;
        this.CRUD_TestePacienti = testePacientiService;
        this.CRUD_DoctorCabinets = cabineteDoctoriService;
        this.CRUD_Retete = reteteService;
        this.CRUD_Medicamente = medicamenteService;
        this.CRUD_reteteCuMedicamentele = reteteCuMedicamenteleImplementation;
        this.CRUD_cabineteDoctoriView = cabineteDoctoriViewServiceImplementation;
        this.CRUD_Retete_VIEW = reteteViewServiceImplementation;
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MenuPanel = new javax.swing.JPanel();
        DoctoriBtn = new javax.swing.JButton();
        PacientiBtn = new javax.swing.JButton();
        ReteteBtn = new javax.swing.JButton();
        MedicamenteBtn = new javax.swing.JButton();
        ReteteCuMedicamenteleBtn = new javax.swing.JButton();
        TipDoctoriBtn = new javax.swing.JButton();
        CabineteDoctoriBtn = new javax.swing.JButton();
        TestePacientiBtn = new javax.swing.JButton();
        TesteLaboratorBtn = new javax.swing.JButton();
        NOT_DMLViewForRetete = new javax.swing.JButton();
        DMLViewForCabineteDoctori = new javax.swing.JButton();
        ParentPanel = new javax.swing.JPanel();
        DoctoriPanel = new javax.swing.JPanel();
        DoctorsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DoctorsTable = new javax.swing.JTable();
        DoctorCRUDOperationsPanel = new javax.swing.JPanel();
        LabelForDoctorCUI = new javax.swing.JLabel();
        TextFieldForDoctorCUI = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        LabelForDoctorName = new javax.swing.JLabel();
        TextFieldForDoctorName = new javax.swing.JTextField();
        LabelForBirthDate = new javax.swing.JLabel();
        ComboBoxForYear = new javax.swing.JComboBox<>();
        ComboBoxForMonth = new javax.swing.JComboBox<>();
        ComboBoxForDay = new javax.swing.JComboBox<>();
        LabelForDoctorType = new javax.swing.JLabel();
        ComboBoxForDoctorType = new javax.swing.JComboBox<>();
        AddBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        UpdateBtn = new javax.swing.JButton();
        ClearBtn = new javax.swing.JButton();
        LabelForPrename = new javax.swing.JLabel();
        TextFieldForDoctorPrename = new javax.swing.JTextField();
        LabelForCUI1 = new javax.swing.JLabel();
        LabelForCUI2 = new javax.swing.JLabel();
        CHECKLabelForDoctorType = new javax.swing.JLabel();
        ComboBoxForDoctorGROUPBY = new javax.swing.JComboBox<>();
        GroupByBtn = new javax.swing.JButton();
        BoxForGroupByOptions = new javax.swing.JComboBox<>();
        PacientiPanel = new javax.swing.JPanel();
        TitleLabelPacienti = new javax.swing.JLabel();
        PacientiCRUDPanel = new javax.swing.JPanel();
        CNP = new javax.swing.JLabel();
        CheckLabelForCNP = new javax.swing.JLabel();
        TextFieldForCNP = new javax.swing.JTextField();
        LabelForPacientiBirthDate = new javax.swing.JLabel();
        ComboBoxForYearPacient = new javax.swing.JComboBox<>();
        ComboBoxForMonthPacient = new javax.swing.JComboBox<>();
        ComboBoxForDayPacient = new javax.swing.JComboBox<>();
        LabelForNumePacient = new javax.swing.JLabel();
        TextFieldForNumePacient = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        TextFieldForPrenumePacient = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ComboBoxForAsigurare = new javax.swing.JComboBox<>();
        AddPacientBtn = new javax.swing.JButton();
        DeleteBtnForPacient = new javax.swing.JButton();
        UpdateBtnForPacient = new javax.swing.JButton();
        ClearBtnForPacient = new javax.swing.JButton();
        LabelForPacientOras = new javax.swing.JLabel();
        TextFieldForPacientOras = new javax.swing.JTextField();
        CheckLabel2ForCNP = new javax.swing.JLabel();
        JoinCommands = new javax.swing.JComboBox<>();
        MedicamentBoxForJoinQUERY = new javax.swing.JComboBox<>();
        SelectButtonForJoin = new javax.swing.JButton();
        TestNameForJoinQUERY = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        PacientsTable = new javax.swing.JTable();
        TesteLaboratorPanel = new javax.swing.JPanel();
        LabelForTitleTL = new javax.swing.JLabel();
        TesteLaboratorCRUDPanel = new javax.swing.JPanel();
        LabelForNumeTL = new javax.swing.JLabel();
        TextFieldForNumeTL = new javax.swing.JTextField();
        LabelForMinVal = new javax.swing.JLabel();
        TextFieldForMinVal = new javax.swing.JTextField();
        LabelForMaxVal = new javax.swing.JLabel();
        TextFieldForMaxVal = new javax.swing.JTextField();
        LabelForAccuaracy = new javax.swing.JLabel();
        ComboBoxForAccuaracyValues = new javax.swing.JComboBox<>();
        AddBtnTL = new javax.swing.JButton();
        UpdateBtnTL = new javax.swing.JButton();
        DeleteBtnTL = new javax.swing.JButton();
        ClearBtnTL = new javax.swing.JButton();
        CheckLabelForMaxValue = new javax.swing.JLabel();
        CheckLabelForMinValue = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TesteLaboratorTable = new javax.swing.JTable();
        TestePacientiPanel = new javax.swing.JPanel();
        TitleLabelForTestePacienti = new javax.swing.JLabel();
        TestePacientiCRUDPanel = new javax.swing.JPanel();
        LabelForCNPPacient = new javax.swing.JLabel();
        TextFieldForCNPTesteLaborator = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TextFieldLabTest = new javax.swing.JTextField();
        CheckLabelForCNPInPacienti = new javax.swing.JLabel();
        CheckLabelForNumeTest = new javax.swing.JLabel();
        LabelForResults = new javax.swing.JLabel();
        ComboBoxForResults = new javax.swing.JComboBox<>();
        LabelForTestValue = new javax.swing.JLabel();
        TextFieldForTestValue = new javax.swing.JTextField();
        LabelForTestEmitionDate = new javax.swing.JLabel();
        ComboBoxYearTestEmition = new javax.swing.JComboBox<>();
        ComboBoxMonthTestEmition = new javax.swing.JComboBox<>();
        ComboBoxDayTestEmition = new javax.swing.JComboBox<>();
        AddBtnTestePacient = new javax.swing.JButton();
        DeleteBtnTestePacient = new javax.swing.JButton();
        UpdateBtnTestePacient = new javax.swing.JButton();
        ClearBtnTestePacient = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TestePacientiTable = new javax.swing.JTable();
        TipDoctoriPanel = new javax.swing.JPanel();
        LabelForTitleDoctorType = new javax.swing.JLabel();
        CRUDDoctorTypePanel = new javax.swing.JPanel();
        LabelForDoctorTypeName = new javax.swing.JLabel();
        TextFieldForDoctorType = new javax.swing.JTextField();
        AddBtnDoctorType = new javax.swing.JButton();
        UpdateBtnDoctorType = new javax.swing.JButton();
        DeleteButtonDoctorType = new javax.swing.JButton();
        ClearBtnDoctorType = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        DoctorTypeTable = new javax.swing.JTable();
        CabineteDoctoriPanel = new javax.swing.JPanel();
        TitleCabinetsLabel = new javax.swing.JLabel();
        CRUDPanelCabinets = new javax.swing.JPanel();
        AddBtnCabinet = new javax.swing.JButton();
        UpdateBtnCabinet = new javax.swing.JButton();
        DeleteBtnCabinet = new javax.swing.JButton();
        ClearBtnCabinet = new javax.swing.JButton();
        LabelCabinetCUI = new javax.swing.JLabel();
        LabelForCabinetName = new javax.swing.JLabel();
        TextFieldCabinetName = new javax.swing.JTextField();
        TextFieldForPrefixName = new javax.swing.JTextField();
        LabelForPostalCode = new javax.swing.JLabel();
        TextFieldForPostalCode = new javax.swing.JTextField();
        LabelForCabinetCity = new javax.swing.JLabel();
        TextFieldForCabinetCity = new javax.swing.JTextField();
        LabelForStreet = new javax.swing.JLabel();
        TextFieldForStreet = new javax.swing.JTextField();
        LabelStreetNumber = new javax.swing.JLabel();
        TextFIeldForStreetNumber = new javax.swing.JTextField();
        LabelPhoneNumber = new javax.swing.JLabel();
        TextFieldForPhoneNumber = new javax.swing.JTextField();
        ComboBoxForPrefix = new javax.swing.JComboBox<>();
        TextFieldForCabinetCUI = new javax.swing.JTextField();
        CheckLabelCUICabinet = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        CabinetsTable = new javax.swing.JTable();
        RetetePanel = new javax.swing.JPanel();
        TtitleLabelForRetetePanel = new javax.swing.JLabel();
        CRUDPanelRetete = new javax.swing.JPanel();
        LabelForRetetaCNP = new javax.swing.JLabel();
        CHECKLabelForRetetaCNP = new javax.swing.JLabel();
        TextFieldForRetetaCNP = new javax.swing.JTextField();
        LabelForRetetaCUI = new javax.swing.JLabel();
        CHECKLabelForReteteCUI = new javax.swing.JLabel();
        TextFieldForRetetaCUI = new javax.swing.JTextField();
        LabelForRetetaEmitionDate = new javax.swing.JLabel();
        ComboBoxForYearEmitionDate = new javax.swing.JComboBox<>();
        ComboBoxForMonthEmitionDate = new javax.swing.JComboBox<>();
        ComboBoxForDayEmitionDate = new javax.swing.JComboBox<>();
        LabelForExpirationDate = new javax.swing.JLabel();
        CHECKLabelReteteExpDate = new javax.swing.JLabel();
        ComboBoxForYearExpirationDate = new javax.swing.JComboBox<>();
        ComboBoxForMonthExpirationDate = new javax.swing.JComboBox<>();
        ComboBoxForDayExpirationDate = new javax.swing.JComboBox<>();
        LabelForPrescriptionType = new javax.swing.JLabel();
        ComboBoxForPrescriptionType = new javax.swing.JComboBox<>();
        AddBtnRetete = new javax.swing.JButton();
        UpdateBtnRetete = new javax.swing.JButton();
        DeleteBtnRetete = new javax.swing.JButton();
        ClearBtnRetete = new javax.swing.JButton();
        CHECKLabelForPrescriptionType = new javax.swing.JLabel();
        CHECKLabelForEmitionDate = new javax.swing.JLabel();
        CHECKLabelForEmitionDate2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        ReteteTable = new javax.swing.JTable();
        MedicamentePanel = new javax.swing.JPanel();
        TitleForMedicamentePanel = new javax.swing.JLabel();
        CRUDPanelMedicaments = new javax.swing.JPanel();
        LabelForMedicamentName = new javax.swing.JLabel();
        TextFieldForMedicamentName = new javax.swing.JTextField();
        LabelForMedicamentWeight = new javax.swing.JLabel();
        ComboBoxForMedicamentWeight = new javax.swing.JComboBox<>();
        LabelForMedicamentType = new javax.swing.JLabel();
        ComboBoxForMedicamentType = new javax.swing.JComboBox<>();
        AddBtnMedicament = new javax.swing.JButton();
        DeleteBtnMedicament = new javax.swing.JButton();
        UpdatBtnMedicament = new javax.swing.JButton();
        ClearBtnMedicament = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        MedicamentsTable = new javax.swing.JTable();
        ReteteCuMedicamentelePanel = new javax.swing.JPanel();
        TitleLabelForReteteCuMedicamentele = new javax.swing.JLabel();
        CRUDPanelForReteteCuMedicamentele = new javax.swing.JPanel();
        LabelForPrescriptionID = new javax.swing.JLabel();
        CHECKLabelForRetetaID = new javax.swing.JLabel();
        CHECKPrescriptionFound = new javax.swing.JLabel();
        CheckPrescriptionNotFound = new javax.swing.JLabel();
        TextFieldForPrescriptionID = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        ListForPacientRetete = new javax.swing.JList<>();
        ComboBoxForMedicamentSelection = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        LabelForCantitate = new javax.swing.JLabel();
        ComboBoxForQuantity = new javax.swing.JComboBox<>();
        AddBtnReteteCuMedicamentele = new javax.swing.JButton();
        DeleteBtnReteteCuMedicamentele = new javax.swing.JButton();
        UpdateBtnReteteCuMedicamentele = new javax.swing.JButton();
        ClearBtnReteteCuMedicamentele = new javax.swing.JButton();
        CheckSelectFromList = new javax.swing.JLabel();
        CHECKPrescriptionListEmpty = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        ReteteCuMedicamenteleTable = new javax.swing.JTable();
        DMLView_PANEL_CabineteDoctori = new javax.swing.JPanel();
        VIEWLabelTitleForCabineteDoctori = new javax.swing.JLabel();
        VIEWPanelForCabineteDoctori = new javax.swing.JPanel();
        VIEWLabelForDoctorCUI = new javax.swing.JLabel();
        VIEWTF_FOR_CUI = new javax.swing.JTextField();
        VIEWCheckCUI = new javax.swing.JLabel();
        VIEWLabelForNumeCabinet = new javax.swing.JLabel();
        VIEWTF_FOR_CabinetNume = new javax.swing.JTextField();
        VIEWLabelForCodPostal = new javax.swing.JLabel();
        VIEWTF_FOR_CabineteCodPostal = new javax.swing.JTextField();
        VIEWLabelForOras = new javax.swing.JLabel();
        VIEWTF_FOR_CabinetOras = new javax.swing.JTextField();
        VIEWLabelForCabinetNrStrada = new javax.swing.JLabel();
        VIEWTF_FOR_CabinetNrStada = new javax.swing.JTextField();
        VIEWAddBtnCabineteDoctori = new javax.swing.JButton();
        VIEWDeleteBtnForCabineteDoctori = new javax.swing.JButton();
        VIEWUpdateBtnForCabineteDoctori = new javax.swing.JButton();
        VIEWClearBtnForCabineteDoctori = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        VIEWTabel_FOR_CabineteDoctori = new javax.swing.JTable();
        VIEWPanelRetete = new javax.swing.JPanel();
        VIEWSearchLabel = new javax.swing.JLabel();
        VIEWSearchFieldForRetete = new javax.swing.JTextField();
        jScrollPane12 = new javax.swing.JScrollPane();
        VIEWTable_RETETE = new javax.swing.JTable();
        VIEWPanelForRetete_NOT_DML = new javax.swing.JPanel();
        VIEWLabelForCNP = new javax.swing.JLabel();
        VIEWTF_FOR_CNP = new javax.swing.JTextField();
        VIEWLabelForNrRetete = new javax.swing.JLabel();
        VIEWTF_FOR_NR_RETETE = new javax.swing.JTextField();
        VIEWAddBtnForRetete = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        VIEWLABEL_RETETE_CHECK_CNP = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));
        setMaximumSize(new java.awt.Dimension(1200, 1000));
        setMinimumSize(new java.awt.Dimension(1200, 1000));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        DoctoriBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        DoctoriBtn.setForeground(new java.awt.Color(255, 255, 255));
        DoctoriBtn.setText("Doctori");
        DoctoriBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DoctoriBtnMouseClicked(evt);
            }
        });

        PacientiBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        PacientiBtn.setForeground(new java.awt.Color(255, 255, 255));
        PacientiBtn.setText("Pacienti");
        PacientiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PacientiBtnMouseClicked(evt);
            }
        });

        ReteteBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ReteteBtn.setForeground(new java.awt.Color(255, 255, 255));
        ReteteBtn.setText("Retete");
        ReteteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReteteBtnMouseClicked(evt);
            }
        });

        MedicamenteBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        MedicamenteBtn.setForeground(new java.awt.Color(255, 255, 255));
        MedicamenteBtn.setText("Medicamente");
        MedicamenteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MedicamenteBtnMouseClicked(evt);
            }
        });

        ReteteCuMedicamenteleBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ReteteCuMedicamenteleBtn.setForeground(new java.awt.Color(255, 255, 255));
        ReteteCuMedicamenteleBtn.setText("Retete+Medicamente");
        ReteteCuMedicamenteleBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReteteCuMedicamenteleBtnMouseClicked(evt);
            }
        });

        TipDoctoriBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TipDoctoriBtn.setForeground(new java.awt.Color(255, 255, 255));
        TipDoctoriBtn.setText("Tip Doctori");
        TipDoctoriBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TipDoctoriBtnMouseClicked(evt);
            }
        });

        CabineteDoctoriBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CabineteDoctoriBtn.setForeground(new java.awt.Color(255, 255, 255));
        CabineteDoctoriBtn.setText("Cabinete Doctori");
        CabineteDoctoriBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CabineteDoctoriBtnMouseClicked(evt);
            }
        });

        TestePacientiBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TestePacientiBtn.setForeground(new java.awt.Color(255, 255, 255));
        TestePacientiBtn.setText("Teste Pacienti");
        TestePacientiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TestePacientiBtnMouseClicked(evt);
            }
        });

        TesteLaboratorBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TesteLaboratorBtn.setForeground(new java.awt.Color(255, 255, 255));
        TesteLaboratorBtn.setText("Teste Laborator");
        TesteLaboratorBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TesteLaboratorBtnMouseClicked(evt);
            }
        });

        NOT_DMLViewForRetete.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        NOT_DMLViewForRetete.setForeground(new java.awt.Color(255, 255, 255));
        NOT_DMLViewForRetete.setText("Retete view");
        NOT_DMLViewForRetete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NOT_DMLViewForReteteActionPerformed(evt);
            }
        });

        DMLViewForCabineteDoctori.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        DMLViewForCabineteDoctori.setForeground(new java.awt.Color(255, 255, 255));
        DMLViewForCabineteDoctori.setText("CabineteDoctori view");
        DMLViewForCabineteDoctori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DMLViewForCabineteDoctoriActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuPanelLayout = new javax.swing.GroupLayout(MenuPanel);
        MenuPanel.setLayout(MenuPanelLayout);
        MenuPanelLayout.setHorizontalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MenuPanelLayout.createSequentialGroup()
                        .addComponent(TipDoctoriBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CabineteDoctoriBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TesteLaboratorBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TestePacientiBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DMLViewForCabineteDoctori, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MenuPanelLayout.createSequentialGroup()
                        .addComponent(DoctoriBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PacientiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReteteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MedicamenteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReteteCuMedicamenteleBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                        .addComponent(NOT_DMLViewForRetete, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        MenuPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CabineteDoctoriBtn, DoctoriBtn, MedicamenteBtn, PacientiBtn, ReteteBtn, ReteteCuMedicamenteleBtn, TesteLaboratorBtn, TestePacientiBtn, TipDoctoriBtn});

        MenuPanelLayout.setVerticalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PacientiBtn)
                    .addComponent(ReteteBtn)
                    .addComponent(MedicamenteBtn)
                    .addComponent(ReteteCuMedicamenteleBtn)
                    .addComponent(DoctoriBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NOT_DMLViewForRetete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TipDoctoriBtn)
                    .addComponent(CabineteDoctoriBtn)
                    .addComponent(TesteLaboratorBtn)
                    .addComponent(TestePacientiBtn)
                    .addComponent(DMLViewForCabineteDoctori))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MenuPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CabineteDoctoriBtn, DoctoriBtn, MedicamenteBtn, PacientiBtn, ReteteBtn, ReteteCuMedicamenteleBtn, TesteLaboratorBtn, TestePacientiBtn, TipDoctoriBtn});

        getContentPane().add(MenuPanel);
        MenuPanel.setBounds(0, 0, 1180, 70);

        ParentPanel.setLayout(new java.awt.CardLayout());

        DoctoriPanel.setMaximumSize(new java.awt.Dimension(1200, 1200));
        DoctoriPanel.setMinimumSize(new java.awt.Dimension(1200, 1200));

        DoctorsLabel.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        DoctorsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DoctorsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/medical-team.png"))); // NOI18N
        DoctorsLabel.setText("Lista doctorilor");
        DoctorsLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        DoctorsTable.setAutoCreateRowSorter(true);
        DoctorsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        DoctorsTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        DoctorsTable.setForeground(new java.awt.Color(255, 255, 255));
        DoctorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CUI", "Type", "Name", "Prename", "Birth date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DoctorsTable.setName(""); // NOI18N
        DoctorsTable.setShowGrid(true);
        DoctorsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DoctorsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DoctorsTable);

        DoctorCRUDOperationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Doctor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        DoctorCRUDOperationsPanel.setForeground(new java.awt.Color(255, 51, 51));

        LabelForDoctorCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForDoctorCUI.setForeground(new java.awt.Color(255, 255, 255));
        LabelForDoctorCUI.setText("* Doctor CUI:");

        TextFieldForDoctorCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForDoctorCUI.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForDoctorCUI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForDoctorCUIMouseClicked(evt);
            }
        });
        TextFieldForDoctorCUI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForDoctorCUIKeyReleased(evt);
            }
        });

        LabelForDoctorName.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForDoctorName.setForeground(new java.awt.Color(255, 255, 255));
        LabelForDoctorName.setText("* Doctor Name:");

        TextFieldForDoctorName.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForDoctorName.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForDoctorName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForDoctorNameKeyReleased(evt);
            }
        });

        LabelForBirthDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForBirthDate.setForeground(new java.awt.Color(255, 255, 255));
        LabelForBirthDate.setText("Doctor birth date:");

        ComboBoxForYear.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForYear.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForYear.setMaximumRowCount(200);
        ComboBoxForYear.setToolTipText("");
        ComboBoxForYear.setAutoscrolls(true);
        ComboBoxForYear.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComboBoxForYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForYearItemStateChanged(evt);
            }
        });

        ComboBoxForMonth.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForMonth.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForMonth.setMaximumRowCount(13);
        ComboBoxForMonth.setToolTipText("");
        ComboBoxForMonth.setAutoscrolls(true);
        ComboBoxForMonth.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComboBoxForMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForMonthItemStateChanged(evt);
            }
        });

        ComboBoxForDay.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForDay.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForDay.setMaximumRowCount(32);
        ComboBoxForDay.setToolTipText("");
        ComboBoxForDay.setAutoscrolls(true);
        ComboBoxForDay.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComboBoxForDay.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForDayItemStateChanged(evt);
            }
        });

        LabelForDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForDoctorType.setForeground(new java.awt.Color(255, 255, 255));
        LabelForDoctorType.setText("* Doctor type:");

        ComboBoxForDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForDoctorType.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForDoctorType.setMaximumRowCount(100);
        ComboBoxForDoctorType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForDoctorTypeItemStateChanged(evt);
            }
        });

        AddBtn.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        AddBtn.setForeground(new java.awt.Color(255, 255, 255));
        AddBtn.setText("Add");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        DeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        UpdateBtn.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        UpdateBtn.setForeground(new java.awt.Color(255, 255, 255));
        UpdateBtn.setText("Update");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        ClearBtn.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        ClearBtn.setForeground(new java.awt.Color(255, 255, 255));
        ClearBtn.setText("Clear");
        ClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnActionPerformed(evt);
            }
        });

        LabelForPrename.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForPrename.setForeground(new java.awt.Color(255, 255, 255));
        LabelForPrename.setText("* Doctor prename:");

        TextFieldForDoctorPrename.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForDoctorPrename.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForDoctorPrename.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForDoctorPrenameKeyReleased(evt);
            }
        });

        LabelForCUI1.setFont(new java.awt.Font("Baloo 2", 1, 10)); // NOI18N
        LabelForCUI1.setForeground(new java.awt.Color(255, 51, 51));
        LabelForCUI1.setText("* CUI must contain 8 digits only");

        LabelForCUI2.setFont(new java.awt.Font("Baloo 2", 1, 10)); // NOI18N
        LabelForCUI2.setForeground(new java.awt.Color(255, 51, 51));
        LabelForCUI2.setText("* CUI must be in the range of [10000000,99999999]");

        CHECKLabelForDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 10)); // NOI18N
        CHECKLabelForDoctorType.setForeground(new java.awt.Color(255, 0, 51));
        CHECKLabelForDoctorType.setText("* You must select a doctor type !");

        ComboBoxForDoctorGROUPBY.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForDoctorGROUPBY.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForDoctorGROUPBY.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForDoctorGROUPBYItemStateChanged(evt);
            }
        });

        GroupByBtn.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        GroupByBtn.setForeground(new java.awt.Color(255, 255, 255));
        GroupByBtn.setText("Select");
        GroupByBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupByBtnActionPerformed(evt);
            }
        });

        BoxForGroupByOptions.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        BoxForGroupByOptions.setForeground(new java.awt.Color(255, 255, 255));
        BoxForGroupByOptions.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BoxForGroupByOptionsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout DoctorCRUDOperationsPanelLayout = new javax.swing.GroupLayout(DoctorCRUDOperationsPanel);
        DoctorCRUDOperationsPanel.setLayout(DoctorCRUDOperationsPanelLayout);
        DoctorCRUDOperationsPanelLayout.setHorizontalGroup(
            DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextFieldForDoctorCUI)
                    .addComponent(LabelForDoctorCUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelForDoctorName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextFieldForDoctorName)
                    .addComponent(LabelForBirthDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelForDoctorType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextFieldForDoctorPrename)
                    .addComponent(LabelForCUI2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelForCUI1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                        .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                                .addComponent(ComboBoxForYear, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ComboBoxForMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ComboBoxForDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(LabelForPrename)
                            .addComponent(ComboBoxForDoctorType, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CHECKLabelForDoctorType)
                            .addComponent(GroupByBtn)
                            .addGroup(DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                                .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ComboBoxForDoctorGROUPBY, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                                        .addComponent(AddBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BoxForGroupByOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 74, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ClearBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        DoctorCRUDOperationsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ComboBoxForDay, ComboBoxForMonth, ComboBoxForYear});

        DoctorCRUDOperationsPanelLayout.setVerticalGroup(
            DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                .addComponent(LabelForDoctorCUI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForDoctorCUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jLabel2))
                    .addGroup(DoctorCRUDOperationsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelForCUI1)
                        .addGap(4, 4, 4)
                        .addComponent(LabelForCUI2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelForDoctorName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldForDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelForPrename)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldForDoctorPrename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelForBirthDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComboBoxForYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBoxForMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBoxForDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelForDoctorType)))
                .addGap(4, 4, 4)
                .addComponent(CHECKLabelForDoctorType)
                .addGap(2, 2, 2)
                .addComponent(ComboBoxForDoctorType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxForDoctorGROUPBY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BoxForGroupByOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GroupByBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                .addGroup(DoctorCRUDOperationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClearBtn)
                    .addComponent(UpdateBtn)
                    .addComponent(DeleteBtn)
                    .addComponent(AddBtn)))
        );

        DoctorCRUDOperationsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ComboBoxForDay, ComboBoxForDoctorType, ComboBoxForMonth, ComboBoxForYear});

        DoctorCRUDOperationsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddBtn, DeleteBtn, UpdateBtn});

        javax.swing.GroupLayout DoctoriPanelLayout = new javax.swing.GroupLayout(DoctoriPanel);
        DoctoriPanel.setLayout(DoctoriPanelLayout);
        DoctoriPanelLayout.setHorizontalGroup(
            DoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DoctoriPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DoctorsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(DoctoriPanelLayout.createSequentialGroup()
                        .addComponent(DoctorCRUDOperationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        DoctoriPanelLayout.setVerticalGroup(
            DoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DoctoriPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DoctorsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DoctorCRUDOperationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(477, Short.MAX_VALUE))
        );

        ParentPanel.add(DoctoriPanel, "card2");

        TitleLabelPacienti.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        TitleLabelPacienti.setForeground(new java.awt.Color(255, 255, 255));
        TitleLabelPacienti.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabelPacienti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sneeze.png"))); // NOI18N
        TitleLabelPacienti.setText("Lista pacienti");
        TitleLabelPacienti.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        TitleLabelPacienti.setIconTextGap(8);
        TitleLabelPacienti.setIgnoreRepaint(true);

        PacientiCRUDPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pacienti", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        CNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CNP.setText("* CNP:");

        CheckLabelForCNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CheckLabelForCNP.setForeground(new java.awt.Color(255, 51, 51));
        CheckLabelForCNP.setText("* Invalid CNP");

        TextFieldForCNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForCNP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForCNPMouseClicked(evt);
            }
        });
        TextFieldForCNP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForCNPKeyReleased(evt);
            }
        });

        LabelForPacientiBirthDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForPacientiBirthDate.setText("* Birth date:");

        ComboBoxForYearPacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForYearPacient.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForYearPacient.setMaximumRowCount(200);
        ComboBoxForYearPacient.setToolTipText("");
        ComboBoxForYearPacient.setAutoscrolls(true);
        ComboBoxForYearPacient.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComboBoxForYearPacient.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForYearPacientItemStateChanged(evt);
            }
        });

        ComboBoxForMonthPacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForMonthPacient.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForMonthPacient.setMaximumRowCount(13);
        ComboBoxForMonthPacient.setToolTipText("");
        ComboBoxForMonthPacient.setAutoscrolls(true);
        ComboBoxForMonthPacient.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComboBoxForMonthPacient.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForMonthPacientItemStateChanged(evt);
            }
        });

        ComboBoxForDayPacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForDayPacient.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForDayPacient.setMaximumRowCount(32);
        ComboBoxForDayPacient.setToolTipText("");
        ComboBoxForDayPacient.setAutoscrolls(true);
        ComboBoxForDayPacient.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComboBoxForDayPacient.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForDayPacientItemStateChanged(evt);
            }
        });

        LabelForNumePacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForNumePacient.setText("* Nume:");

        TextFieldForNumePacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForNumePacient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForNumePacientKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        jLabel1.setText("* Prenume:");

        TextFieldForPrenumePacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForPrenumePacient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForPrenumePacientKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        jLabel3.setText("Asigurat:");

        ComboBoxForAsigurare.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForAsigurare.setMaximumRowCount(3);

        AddPacientBtn.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        AddPacientBtn.setText("Add");
        AddPacientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPacientBtnActionPerformed(evt);
            }
        });

        DeleteBtnForPacient.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        DeleteBtnForPacient.setText("Delete");
        DeleteBtnForPacient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnForPacientActionPerformed(evt);
            }
        });

        UpdateBtnForPacient.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        UpdateBtnForPacient.setText("Update");
        UpdateBtnForPacient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnForPacientActionPerformed(evt);
            }
        });

        ClearBtnForPacient.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        ClearBtnForPacient.setText("Clear");
        ClearBtnForPacient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnForPacientActionPerformed(evt);
            }
        });

        LabelForPacientOras.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForPacientOras.setForeground(new java.awt.Color(255, 255, 255));
        LabelForPacientOras.setText("* Oras:");

        TextFieldForPacientOras.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForPacientOras.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForPacientOras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForPacientOrasKeyReleased(evt);
            }
        });

        CheckLabel2ForCNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CheckLabel2ForCNP.setForeground(new java.awt.Color(255, 51, 51));
        CheckLabel2ForCNP.setText("*CNP already exists");

        JoinCommands.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        JoinCommands.setForeground(new java.awt.Color(255, 255, 255));
        JoinCommands.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                JoinCommandsItemStateChanged(evt);
            }
        });

        MedicamentBoxForJoinQUERY.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        MedicamentBoxForJoinQUERY.setForeground(new java.awt.Color(255, 255, 255));
        MedicamentBoxForJoinQUERY.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MedicamentBoxForJoinQUERYItemStateChanged(evt);
            }
        });

        SelectButtonForJoin.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        SelectButtonForJoin.setForeground(new java.awt.Color(255, 255, 255));
        SelectButtonForJoin.setText("SELECT");
        SelectButtonForJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectButtonForJoinActionPerformed(evt);
            }
        });

        TestNameForJoinQUERY.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TestNameForJoinQUERY.setForeground(new java.awt.Color(255, 255, 255));
        TestNameForJoinQUERY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestNameForJoinQUERYActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PacientiCRUDPanelLayout = new javax.swing.GroupLayout(PacientiCRUDPanel);
        PacientiCRUDPanel.setLayout(PacientiCRUDPanelLayout);
        PacientiCRUDPanelLayout.setHorizontalGroup(
            PacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PacientiCRUDPanelLayout.createSequentialGroup()
                .addGroup(PacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PacientiCRUDPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelForNumePacient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TextFieldForCNP)
                            .addComponent(CheckLabelForCNP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LabelForPacientiBirthDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CNP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TextFieldForNumePacient)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TextFieldForPrenumePacient)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(PacientiCRUDPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(AddPacientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteBtnForPacient, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UpdateBtnForPacient, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ClearBtnForPacient)
                                .addGap(6, 6, 6))
                            .addComponent(LabelForPacientOras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TextFieldForPacientOras)
                            .addGroup(PacientiCRUDPanelLayout.createSequentialGroup()
                                .addGroup(PacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PacientiCRUDPanelLayout.createSequentialGroup()
                                        .addComponent(ComboBoxForYearPacient, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ComboBoxForMonthPacient, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ComboBoxForDayPacient, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ComboBoxForAsigurare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(CheckLabel2ForCNP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(JoinCommands, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SelectButtonForJoin)
                    .addGroup(PacientiCRUDPanelLayout.createSequentialGroup()
                        .addComponent(MedicamentBoxForJoinQUERY, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TestNameForJoinQUERY, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        PacientiCRUDPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ComboBoxForDayPacient, ComboBoxForMonthPacient, ComboBoxForYearPacient});

        PacientiCRUDPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddPacientBtn, ClearBtnForPacient, DeleteBtnForPacient, UpdateBtnForPacient});

        PacientiCRUDPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {MedicamentBoxForJoinQUERY, TestNameForJoinQUERY});

        PacientiCRUDPanelLayout.setVerticalGroup(
            PacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PacientiCRUDPanelLayout.createSequentialGroup()
                .addComponent(CNP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckLabelForCNP)
                .addGap(3, 3, 3)
                .addComponent(CheckLabel2ForCNP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForCNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForPacientiBirthDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxForYearPacient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxForMonthPacient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxForDayPacient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForNumePacient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForNumePacient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForPrenumePacient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxForAsigurare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForPacientOras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForPacientOras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(JoinCommands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MedicamentBoxForJoinQUERY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TestNameForJoinQUERY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SelectButtonForJoin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(PacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddPacientBtn)
                    .addComponent(DeleteBtnForPacient)
                    .addComponent(UpdateBtnForPacient)
                    .addComponent(ClearBtnForPacient)))
        );

        PacientsTable.setAutoCreateRowSorter(true);
        PacientsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        PacientsTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        PacientsTable.setForeground(new java.awt.Color(255, 255, 255));
        PacientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CNP", "Birth date", "City", "Name", "Prename", "Medical policy"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        PacientsTable.setGridColor(new java.awt.Color(102, 102, 102));
        PacientsTable.setShowGrid(true);
        PacientsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PacientsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(PacientsTable);

        javax.swing.GroupLayout PacientiPanelLayout = new javax.swing.GroupLayout(PacientiPanel);
        PacientiPanel.setLayout(PacientiPanelLayout);
        PacientiPanelLayout.setHorizontalGroup(
            PacientiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PacientiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PacientiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TitleLabelPacienti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PacientiPanelLayout.createSequentialGroup()
                        .addComponent(PacientiCRUDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE))))
        );
        PacientiPanelLayout.setVerticalGroup(
            PacientiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PacientiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleLabelPacienti)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PacientiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PacientiCRUDPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );

        ParentPanel.add(PacientiPanel, "card3");

        LabelForTitleTL.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        LabelForTitleTL.setForeground(new java.awt.Color(255, 255, 255));
        LabelForTitleTL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelForTitleTL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/microscope.png"))); // NOI18N
        LabelForTitleTL.setText("Teste laborator");
        LabelForTitleTL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        TesteLaboratorCRUDPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Teste laborator", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        LabelForNumeTL.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForNumeTL.setForeground(new java.awt.Color(255, 255, 255));
        LabelForNumeTL.setText("* Test name:");

        TextFieldForNumeTL.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForNumeTL.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForNumeTL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForNumeTLMouseClicked(evt);
            }
        });
        TextFieldForNumeTL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForNumeTLKeyReleased(evt);
            }
        });

        LabelForMinVal.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForMinVal.setForeground(new java.awt.Color(255, 255, 255));
        LabelForMinVal.setText("Min. value:");

        TextFieldForMinVal.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForMinVal.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForMinVal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForMinValKeyReleased(evt);
            }
        });

        LabelForMaxVal.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForMaxVal.setForeground(new java.awt.Color(255, 255, 255));
        LabelForMaxVal.setText("Max. value:");

        TextFieldForMaxVal.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForMaxVal.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForMaxVal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForMaxValKeyReleased(evt);
            }
        });

        LabelForAccuaracy.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForAccuaracy.setForeground(new java.awt.Color(255, 255, 255));
        LabelForAccuaracy.setText("* Accuaracy (%) :");

        ComboBoxForAccuaracyValues.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForAccuaracyValues.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForAccuaracyValues.setMaximumRowCount(100);
        ComboBoxForAccuaracyValues.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForAccuaracyValuesItemStateChanged(evt);
            }
        });

        AddBtnTL.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        AddBtnTL.setForeground(new java.awt.Color(255, 255, 255));
        AddBtnTL.setText("Add");
        AddBtnTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnTLActionPerformed(evt);
            }
        });

        UpdateBtnTL.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        UpdateBtnTL.setForeground(new java.awt.Color(255, 255, 255));
        UpdateBtnTL.setText("Update");
        UpdateBtnTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnTLActionPerformed(evt);
            }
        });

        DeleteBtnTL.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        DeleteBtnTL.setForeground(new java.awt.Color(255, 255, 255));
        DeleteBtnTL.setText("Delete");
        DeleteBtnTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnTLActionPerformed(evt);
            }
        });

        ClearBtnTL.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ClearBtnTL.setForeground(new java.awt.Color(255, 255, 255));
        ClearBtnTL.setText("Clear");
        ClearBtnTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnTLActionPerformed(evt);
            }
        });

        CheckLabelForMaxValue.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CheckLabelForMaxValue.setForeground(new java.awt.Color(255, 0, 51));
        CheckLabelForMaxValue.setText("* Max value must be bigger than min value");

        CheckLabelForMinValue.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CheckLabelForMinValue.setForeground(new java.awt.Color(255, 0, 0));
        CheckLabelForMinValue.setText("* Min value must be less than max value");

        javax.swing.GroupLayout TesteLaboratorCRUDPanelLayout = new javax.swing.GroupLayout(TesteLaboratorCRUDPanel);
        TesteLaboratorCRUDPanel.setLayout(TesteLaboratorCRUDPanelLayout);
        TesteLaboratorCRUDPanelLayout.setHorizontalGroup(
            TesteLaboratorCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelForNumeTL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(LabelForMinVal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(LabelForMaxVal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TextFieldForMinVal)
            .addComponent(TextFieldForNumeTL)
            .addComponent(TextFieldForMaxVal)
            .addGroup(TesteLaboratorCRUDPanelLayout.createSequentialGroup()
                .addGroup(TesteLaboratorCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TesteLaboratorCRUDPanelLayout.createSequentialGroup()
                        .addComponent(AddBtnTL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateBtnTL, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtnTL, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearBtnTL)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(LabelForAccuaracy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CheckLabelForMaxValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(TesteLaboratorCRUDPanelLayout.createSequentialGroup()
                .addComponent(ComboBoxForAccuaracyValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(CheckLabelForMinValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        TesteLaboratorCRUDPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddBtnTL, ClearBtnTL, DeleteBtnTL, UpdateBtnTL});

        TesteLaboratorCRUDPanelLayout.setVerticalGroup(
            TesteLaboratorCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TesteLaboratorCRUDPanelLayout.createSequentialGroup()
                .addComponent(LabelForNumeTL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForNumeTL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForMinVal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckLabelForMinValue)
                .addGap(8, 8, 8)
                .addComponent(TextFieldForMinVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForMaxVal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckLabelForMaxValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForMaxVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForAccuaracy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxForAccuaracyValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(TesteLaboratorCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtnTL)
                    .addComponent(UpdateBtnTL)
                    .addComponent(DeleteBtnTL)
                    .addComponent(ClearBtnTL))
                .addContainerGap())
        );

        TesteLaboratorTable.setAutoCreateRowSorter(true);
        TesteLaboratorTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        TesteLaboratorTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TesteLaboratorTable.setForeground(new java.awt.Color(255, 255, 255));
        TesteLaboratorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Test name", "Min value", "Max value", "Accuaracy"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TesteLaboratorTable.setGridColor(new java.awt.Color(102, 102, 102));
        TesteLaboratorTable.setShowGrid(true);
        TesteLaboratorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TesteLaboratorTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TesteLaboratorTable);

        javax.swing.GroupLayout TesteLaboratorPanelLayout = new javax.swing.GroupLayout(TesteLaboratorPanel);
        TesteLaboratorPanel.setLayout(TesteLaboratorPanelLayout);
        TesteLaboratorPanelLayout.setHorizontalGroup(
            TesteLaboratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TesteLaboratorPanelLayout.createSequentialGroup()
                .addComponent(TesteLaboratorCRUDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 856, Short.MAX_VALUE))
            .addGroup(TesteLaboratorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelForTitleTL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TesteLaboratorPanelLayout.setVerticalGroup(
            TesteLaboratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TesteLaboratorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelForTitleTL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TesteLaboratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TesteLaboratorCRUDPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1157, Short.MAX_VALUE))
                .addContainerGap())
        );

        ParentPanel.add(TesteLaboratorPanel, "card4");

        TitleLabelForTestePacienti.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        TitleLabelForTestePacienti.setForeground(new java.awt.Color(255, 255, 255));
        TitleLabelForTestePacienti.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabelForTestePacienti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lab-technician.png"))); // NOI18N
        TitleLabelForTestePacienti.setText("Teste pacienti");
        TitleLabelForTestePacienti.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        TestePacientiCRUDPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Teste pacienti", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        LabelForCNPPacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForCNPPacient.setForeground(new java.awt.Color(255, 255, 255));
        LabelForCNPPacient.setText("* CNP pacient:");

        TextFieldForCNPTesteLaborator.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForCNPTesteLaborator.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForCNPTesteLaborator.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForCNPTesteLaboratorMouseClicked(evt);
            }
        });
        TextFieldForCNPTesteLaborator.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForCNPTesteLaboratorKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("* Laboratory  test:");

        TextFieldLabTest.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldLabTest.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldLabTest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldLabTestKeyReleased(evt);
            }
        });

        CheckLabelForCNPInPacienti.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CheckLabelForCNPInPacienti.setForeground(new java.awt.Color(255, 51, 51));
        CheckLabelForCNPInPacienti.setText("* CNP must belong to a pacient first! Please add the pacient before .");

        CheckLabelForNumeTest.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CheckLabelForNumeTest.setForeground(new java.awt.Color(255, 0, 0));
        CheckLabelForNumeTest.setText("* Laboratory  test must be present first! Please add the test before.");

        LabelForResults.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForResults.setForeground(new java.awt.Color(255, 255, 255));
        LabelForResults.setText("* Results:");

        ComboBoxForResults.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForResults.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForResults.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForResultsItemStateChanged(evt);
            }
        });

        LabelForTestValue.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForTestValue.setForeground(new java.awt.Color(255, 255, 255));
        LabelForTestValue.setText("Test value:");

        TextFieldForTestValue.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForTestValue.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForTestValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForTestValueKeyReleased(evt);
            }
        });

        LabelForTestEmitionDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForTestEmitionDate.setForeground(new java.awt.Color(255, 255, 255));
        LabelForTestEmitionDate.setText("Emition date:");

        ComboBoxYearTestEmition.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxYearTestEmition.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxYearTestEmition.setMaximumRowCount(200);
        ComboBoxYearTestEmition.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxYearTestEmitionItemStateChanged(evt);
            }
        });

        ComboBoxMonthTestEmition.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxMonthTestEmition.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxMonthTestEmition.setMaximumRowCount(200);
        ComboBoxMonthTestEmition.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxMonthTestEmitionItemStateChanged(evt);
            }
        });

        ComboBoxDayTestEmition.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxDayTestEmition.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxDayTestEmition.setMaximumRowCount(200);
        ComboBoxDayTestEmition.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxDayTestEmitionItemStateChanged(evt);
            }
        });

        AddBtnTestePacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        AddBtnTestePacient.setForeground(new java.awt.Color(255, 255, 255));
        AddBtnTestePacient.setText("Add");
        AddBtnTestePacient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnTestePacientActionPerformed(evt);
            }
        });

        DeleteBtnTestePacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        DeleteBtnTestePacient.setForeground(new java.awt.Color(255, 255, 255));
        DeleteBtnTestePacient.setText("Delete");
        DeleteBtnTestePacient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnTestePacientActionPerformed(evt);
            }
        });

        UpdateBtnTestePacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        UpdateBtnTestePacient.setForeground(new java.awt.Color(255, 255, 255));
        UpdateBtnTestePacient.setText("Update");
        UpdateBtnTestePacient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnTestePacientActionPerformed(evt);
            }
        });

        ClearBtnTestePacient.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ClearBtnTestePacient.setForeground(new java.awt.Color(255, 255, 255));
        ClearBtnTestePacient.setText("Clear");
        ClearBtnTestePacient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnTestePacientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TestePacientiCRUDPanelLayout = new javax.swing.GroupLayout(TestePacientiCRUDPanel);
        TestePacientiCRUDPanel.setLayout(TestePacientiCRUDPanelLayout);
        TestePacientiCRUDPanelLayout.setHorizontalGroup(
            TestePacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelForCNPPacient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TextFieldForCNPTesteLaborator)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TextFieldLabTest)
            .addComponent(CheckLabelForNumeTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(LabelForResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(LabelForTestValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TestePacientiCRUDPanelLayout.createSequentialGroup()
                .addGroup(TestePacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelForTestEmitionDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CheckLabelForCNPInPacienti, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(TextFieldForTestValue)
            .addGroup(TestePacientiCRUDPanelLayout.createSequentialGroup()
                .addGroup(TestePacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TestePacientiCRUDPanelLayout.createSequentialGroup()
                        .addComponent(AddBtnTestePacient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtnTestePacient, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateBtnTestePacient, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearBtnTestePacient, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(TestePacientiCRUDPanelLayout.createSequentialGroup()
                        .addComponent(ComboBoxYearTestEmition, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBoxMonthTestEmition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBoxDayTestEmition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ComboBoxForResults, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        TestePacientiCRUDPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ComboBoxDayTestEmition, ComboBoxMonthTestEmition, ComboBoxYearTestEmition});

        TestePacientiCRUDPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddBtnTestePacient, ClearBtnTestePacient, DeleteBtnTestePacient, UpdateBtnTestePacient});

        TestePacientiCRUDPanelLayout.setVerticalGroup(
            TestePacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TestePacientiCRUDPanelLayout.createSequentialGroup()
                .addComponent(LabelForCNPPacient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForCNPTesteLaborator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(CheckLabelForCNPInPacienti)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CheckLabelForNumeTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelForResults)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxForResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelForTestValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForTestValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelForTestEmitionDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TestePacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxYearTestEmition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxMonthTestEmition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxDayTestEmition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 700, Short.MAX_VALUE)
                .addGroup(TestePacientiCRUDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtnTestePacient)
                    .addComponent(DeleteBtnTestePacient)
                    .addComponent(UpdateBtnTestePacient)
                    .addComponent(ClearBtnTestePacient)))
        );

        TestePacientiTable.setAutoCreateRowSorter(true);
        TestePacientiTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        TestePacientiTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TestePacientiTable.setForeground(new java.awt.Color(255, 255, 255));
        TestePacientiTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Test", "CNP", "Test name", "Result", "Test value", "Emition date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TestePacientiTable.setGridColor(new java.awt.Color(102, 102, 102));
        TestePacientiTable.setShowGrid(true);
        TestePacientiTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TestePacientiTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TestePacientiTable);

        javax.swing.GroupLayout TestePacientiPanelLayout = new javax.swing.GroupLayout(TestePacientiPanel);
        TestePacientiPanel.setLayout(TestePacientiPanelLayout);
        TestePacientiPanelLayout.setHorizontalGroup(
            TestePacientiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TitleLabelForTestePacienti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TestePacientiPanelLayout.createSequentialGroup()
                .addComponent(TestePacientiCRUDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
                .addContainerGap())
        );
        TestePacientiPanelLayout.setVerticalGroup(
            TestePacientiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TestePacientiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleLabelForTestePacienti, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TestePacientiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TestePacientiCRUDPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );

        ParentPanel.add(TestePacientiPanel, "card5");

        LabelForTitleDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        LabelForTitleDoctorType.setForeground(new java.awt.Color(255, 255, 255));
        LabelForTitleDoctorType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelForTitleDoctorType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/medical-team (2).png"))); // NOI18N
        LabelForTitleDoctorType.setText("Doctor type");

        CRUDDoctorTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Doctor type", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        LabelForDoctorTypeName.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForDoctorTypeName.setForeground(new java.awt.Color(255, 255, 255));
        LabelForDoctorTypeName.setText("Doctor type name:");

        TextFieldForDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForDoctorType.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForDoctorType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForDoctorTypeMouseClicked(evt);
            }
        });
        TextFieldForDoctorType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForDoctorTypeKeyReleased(evt);
            }
        });

        AddBtnDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        AddBtnDoctorType.setForeground(new java.awt.Color(255, 255, 255));
        AddBtnDoctorType.setText("Add");
        AddBtnDoctorType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnDoctorTypeActionPerformed(evt);
            }
        });

        UpdateBtnDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        UpdateBtnDoctorType.setForeground(new java.awt.Color(255, 255, 255));
        UpdateBtnDoctorType.setText("Update");
        UpdateBtnDoctorType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnDoctorTypeActionPerformed(evt);
            }
        });

        DeleteButtonDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        DeleteButtonDoctorType.setForeground(new java.awt.Color(255, 255, 255));
        DeleteButtonDoctorType.setText("Delete");
        DeleteButtonDoctorType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonDoctorTypeActionPerformed(evt);
            }
        });

        ClearBtnDoctorType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ClearBtnDoctorType.setForeground(new java.awt.Color(255, 255, 255));
        ClearBtnDoctorType.setText("Clear");
        ClearBtnDoctorType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnDoctorTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CRUDDoctorTypePanelLayout = new javax.swing.GroupLayout(CRUDDoctorTypePanel);
        CRUDDoctorTypePanel.setLayout(CRUDDoctorTypePanelLayout);
        CRUDDoctorTypePanelLayout.setHorizontalGroup(
            CRUDDoctorTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelForDoctorTypeName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TextFieldForDoctorType)
            .addGroup(CRUDDoctorTypePanelLayout.createSequentialGroup()
                .addComponent(AddBtnDoctorType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UpdateBtnDoctorType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteButtonDoctorType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClearBtnDoctorType))
        );
        CRUDDoctorTypePanelLayout.setVerticalGroup(
            CRUDDoctorTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRUDDoctorTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelForDoctorTypeName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForDoctorType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(CRUDDoctorTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtnDoctorType)
                    .addComponent(UpdateBtnDoctorType)
                    .addComponent(DeleteButtonDoctorType)
                    .addComponent(ClearBtnDoctorType)))
        );

        DoctorTypeTable.setAutoCreateRowSorter(true);
        DoctorTypeTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DoctorTypeTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        DoctorTypeTable.setForeground(new java.awt.Color(255, 255, 255));
        DoctorTypeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type ID", "Type name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        DoctorTypeTable.setGridColor(new java.awt.Color(102, 102, 102));
        DoctorTypeTable.setShowGrid(true);
        DoctorTypeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DoctorTypeTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(DoctorTypeTable);

        javax.swing.GroupLayout TipDoctoriPanelLayout = new javax.swing.GroupLayout(TipDoctoriPanel);
        TipDoctoriPanel.setLayout(TipDoctoriPanelLayout);
        TipDoctoriPanelLayout.setHorizontalGroup(
            TipDoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelForTitleDoctorType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TipDoctoriPanelLayout.createSequentialGroup()
                .addComponent(CRUDDoctorTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE))
        );
        TipDoctoriPanelLayout.setVerticalGroup(
            TipDoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TipDoctoriPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelForTitleDoctorType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TipDoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CRUDDoctorTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE))
                .addContainerGap())
        );

        ParentPanel.add(TipDoctoriPanel, "card6");

        TitleCabinetsLabel.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        TitleCabinetsLabel.setForeground(new java.awt.Color(255, 255, 255));
        TitleCabinetsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleCabinetsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/first-aid-kit.png"))); // NOI18N
        TitleCabinetsLabel.setText("Doctor cabinets");
        TitleCabinetsLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        CRUDPanelCabinets.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Doctor cabinet", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        AddBtnCabinet.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        AddBtnCabinet.setForeground(new java.awt.Color(255, 255, 255));
        AddBtnCabinet.setText("Add");
        AddBtnCabinet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnCabinetActionPerformed(evt);
            }
        });

        UpdateBtnCabinet.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        UpdateBtnCabinet.setForeground(new java.awt.Color(255, 255, 255));
        UpdateBtnCabinet.setText("Update");
        UpdateBtnCabinet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnCabinetActionPerformed(evt);
            }
        });

        DeleteBtnCabinet.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        DeleteBtnCabinet.setForeground(new java.awt.Color(255, 255, 255));
        DeleteBtnCabinet.setText("Delete");
        DeleteBtnCabinet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnCabinetActionPerformed(evt);
            }
        });

        ClearBtnCabinet.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        ClearBtnCabinet.setForeground(new java.awt.Color(255, 255, 255));
        ClearBtnCabinet.setText("Clear");
        ClearBtnCabinet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnCabinetActionPerformed(evt);
            }
        });

        LabelCabinetCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelCabinetCUI.setForeground(new java.awt.Color(255, 255, 255));
        LabelCabinetCUI.setText("* Doctor CUI:");

        LabelForCabinetName.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForCabinetName.setForeground(new java.awt.Color(255, 255, 255));
        LabelForCabinetName.setText("* Cabinet name");

        TextFieldCabinetName.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldCabinetName.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldCabinetName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldCabinetNameKeyReleased(evt);
            }
        });

        TextFieldForPrefixName.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForPrefixName.setForeground(new java.awt.Color(255, 255, 255));

        LabelForPostalCode.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForPostalCode.setForeground(new java.awt.Color(255, 255, 255));
        LabelForPostalCode.setText("* Postal code:");

        TextFieldForPostalCode.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForPostalCode.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForPostalCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForPostalCodeKeyReleased(evt);
            }
        });

        LabelForCabinetCity.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForCabinetCity.setForeground(new java.awt.Color(255, 255, 255));
        LabelForCabinetCity.setText("* City:");

        TextFieldForCabinetCity.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForCabinetCity.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForCabinetCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForCabinetCityKeyReleased(evt);
            }
        });

        LabelForStreet.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForStreet.setForeground(new java.awt.Color(255, 255, 255));
        LabelForStreet.setText("Street address:");

        TextFieldForStreet.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForStreet.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForStreet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForStreetKeyReleased(evt);
            }
        });

        LabelStreetNumber.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelStreetNumber.setForeground(new java.awt.Color(255, 255, 255));
        LabelStreetNumber.setText(" * Street number:");

        TextFIeldForStreetNumber.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFIeldForStreetNumber.setForeground(new java.awt.Color(255, 255, 255));
        TextFIeldForStreetNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFIeldForStreetNumberKeyReleased(evt);
            }
        });

        LabelPhoneNumber.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelPhoneNumber.setForeground(new java.awt.Color(255, 255, 255));
        LabelPhoneNumber.setText("Phone number:");

        TextFieldForPhoneNumber.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForPhoneNumber.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForPhoneNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForPhoneNumberKeyReleased(evt);
            }
        });

        ComboBoxForPrefix.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForPrefix.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForPrefix.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForPrefixItemStateChanged(evt);
            }
        });

        TextFieldForCabinetCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForCabinetCUI.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForCabinetCUI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForCabinetCUIMouseClicked(evt);
            }
        });
        TextFieldForCabinetCUI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForCabinetCUIKeyReleased(evt);
            }
        });

        CheckLabelCUICabinet.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CheckLabelCUICabinet.setForeground(new java.awt.Color(255, 0, 0));
        CheckLabelCUICabinet.setText("* CUI must exist first! Please add a new doctor or check again!");

        javax.swing.GroupLayout CRUDPanelCabinetsLayout = new javax.swing.GroupLayout(CRUDPanelCabinets);
        CRUDPanelCabinets.setLayout(CRUDPanelCabinetsLayout);
        CRUDPanelCabinetsLayout.setHorizontalGroup(
            CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRUDPanelCabinetsLayout.createSequentialGroup()
                .addGroup(CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddBtnCabinet)
                    .addGroup(CRUDPanelCabinetsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TextFieldForPrefixName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CRUDPanelCabinetsLayout.createSequentialGroup()
                        .addComponent(UpdateBtnCabinet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtnCabinet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearBtnCabinet)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(TextFieldCabinetName)))
            .addGroup(CRUDPanelCabinetsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelForCabinetCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelCabinetCUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextFieldForCabinetCity)
                    .addGroup(CRUDPanelCabinetsLayout.createSequentialGroup()
                        .addComponent(LabelForCabinetName)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(CheckLabelCUICabinet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextFieldForCabinetCUI)
                    .addGroup(CRUDPanelCabinetsLayout.createSequentialGroup()
                        .addGroup(CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TextFIeldForStreetNumber)
                            .addComponent(TextFieldForStreet)
                            .addComponent(LabelForStreet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LabelStreetNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CRUDPanelCabinetsLayout.createSequentialGroup()
                                .addComponent(ComboBoxForPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TextFieldForPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(TextFieldForPostalCode)
                            .addComponent(LabelForPostalCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        CRUDPanelCabinetsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddBtnCabinet, ClearBtnCabinet, DeleteBtnCabinet, UpdateBtnCabinet});

        CRUDPanelCabinetsLayout.setVerticalGroup(
            CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CRUDPanelCabinetsLayout.createSequentialGroup()
                .addComponent(LabelCabinetCUI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckLabelCUICabinet)
                .addGap(9, 9, 9)
                .addComponent(TextFieldForCabinetCUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForCabinetName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldForPrefixName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldCabinetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForPostalCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TextFieldForPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForCabinetCity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForCabinetCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForStreet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelStreetNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFIeldForStreetNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelPhoneNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextFieldForPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxForPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 636, Short.MAX_VALUE)
                .addGroup(CRUDPanelCabinetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtnCabinet)
                    .addComponent(UpdateBtnCabinet)
                    .addComponent(DeleteBtnCabinet)
                    .addComponent(ClearBtnCabinet)))
        );

        CabinetsTable.setAutoCreateRowSorter(true);
        CabinetsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        CabinetsTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CabinetsTable.setForeground(new java.awt.Color(255, 255, 255));
        CabinetsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cabinet ID", "Doctor CUI", "Cabinet name", "Postal code", "City", "Address", "Address number", "Phone number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CabinetsTable.setGridColor(new java.awt.Color(102, 102, 102));
        CabinetsTable.setShowGrid(true);
        CabinetsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CabinetsTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(CabinetsTable);

        javax.swing.GroupLayout CabineteDoctoriPanelLayout = new javax.swing.GroupLayout(CabineteDoctoriPanel);
        CabineteDoctoriPanel.setLayout(CabineteDoctoriPanelLayout);
        CabineteDoctoriPanelLayout.setHorizontalGroup(
            CabineteDoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TitleCabinetsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(CabineteDoctoriPanelLayout.createSequentialGroup()
                .addComponent(CRUDPanelCabinets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 848, Short.MAX_VALUE))
        );
        CabineteDoctoriPanelLayout.setVerticalGroup(
            CabineteDoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CabineteDoctoriPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleCabinetsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CabineteDoctoriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CRUDPanelCabinets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane6)))
        );

        ParentPanel.add(CabineteDoctoriPanel, "card7");

        TtitleLabelForRetetePanel.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        TtitleLabelForRetetePanel.setForeground(new java.awt.Color(255, 255, 255));
        TtitleLabelForRetetePanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TtitleLabelForRetetePanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prescription.png"))); // NOI18N
        TtitleLabelForRetetePanel.setText("Retete");
        TtitleLabelForRetetePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        CRUDPanelRetete.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Retete", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        LabelForRetetaCNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForRetetaCNP.setForeground(new java.awt.Color(255, 255, 255));
        LabelForRetetaCNP.setText("* Pacient CNP:  ");

        CHECKLabelForRetetaCNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CHECKLabelForRetetaCNP.setForeground(new java.awt.Color(255, 0, 51));
        CHECKLabelForRetetaCNP.setText("* Pacient CNP must exist ! Please add the pacient before.");

        TextFieldForRetetaCNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForRetetaCNP.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForRetetaCNP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForRetetaCNPMouseClicked(evt);
            }
        });
        TextFieldForRetetaCNP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForRetetaCNPKeyReleased(evt);
            }
        });

        LabelForRetetaCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForRetetaCUI.setForeground(new java.awt.Color(255, 255, 255));
        LabelForRetetaCUI.setText("*Doctor CUI:");

        CHECKLabelForReteteCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CHECKLabelForReteteCUI.setForeground(new java.awt.Color(255, 0, 51));
        CHECKLabelForReteteCUI.setText("* Doctor CUI must exist ! Pleasee add the CUI before.");

        TextFieldForRetetaCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForRetetaCUI.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForRetetaCUI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForRetetaCUIKeyReleased(evt);
            }
        });

        LabelForRetetaEmitionDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForRetetaEmitionDate.setForeground(new java.awt.Color(255, 255, 255));
        LabelForRetetaEmitionDate.setText("* Emition date:");

        ComboBoxForYearEmitionDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForYearEmitionDate.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForYearEmitionDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForYearEmitionDateItemStateChanged(evt);
            }
        });

        ComboBoxForMonthEmitionDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForMonthEmitionDate.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForMonthEmitionDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForMonthEmitionDateItemStateChanged(evt);
            }
        });

        ComboBoxForDayEmitionDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForDayEmitionDate.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForDayEmitionDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForDayEmitionDateItemStateChanged(evt);
            }
        });

        LabelForExpirationDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForExpirationDate.setForeground(new java.awt.Color(255, 255, 255));
        LabelForExpirationDate.setText("Expiration date:");

        CHECKLabelReteteExpDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CHECKLabelReteteExpDate.setForeground(new java.awt.Color(255, 0, 51));
        CHECKLabelReteteExpDate.setText("* If prescription type is \"permanent\" you cannot select this date");

        ComboBoxForYearExpirationDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForYearExpirationDate.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForYearExpirationDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForYearExpirationDateItemStateChanged(evt);
            }
        });

        ComboBoxForMonthExpirationDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForMonthExpirationDate.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForMonthExpirationDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForMonthExpirationDateItemStateChanged(evt);
            }
        });

        ComboBoxForDayExpirationDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForDayExpirationDate.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForDayExpirationDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForDayExpirationDateItemStateChanged(evt);
            }
        });

        LabelForPrescriptionType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForPrescriptionType.setForeground(new java.awt.Color(255, 255, 255));
        LabelForPrescriptionType.setText("Prescription type:");

        ComboBoxForPrescriptionType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForPrescriptionType.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForPrescriptionType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForPrescriptionTypeItemStateChanged(evt);
            }
        });

        AddBtnRetete.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        AddBtnRetete.setForeground(new java.awt.Color(255, 255, 255));
        AddBtnRetete.setText("Add");
        AddBtnRetete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnReteteActionPerformed(evt);
            }
        });

        UpdateBtnRetete.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        UpdateBtnRetete.setForeground(new java.awt.Color(255, 255, 255));
        UpdateBtnRetete.setText("Update");
        UpdateBtnRetete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnReteteActionPerformed(evt);
            }
        });

        DeleteBtnRetete.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        DeleteBtnRetete.setForeground(new java.awt.Color(255, 255, 255));
        DeleteBtnRetete.setText("Delete");
        DeleteBtnRetete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnReteteActionPerformed(evt);
            }
        });

        ClearBtnRetete.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        ClearBtnRetete.setForeground(new java.awt.Color(255, 255, 255));
        ClearBtnRetete.setText("Clear");
        ClearBtnRetete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnReteteActionPerformed(evt);
            }
        });

        CHECKLabelForPrescriptionType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CHECKLabelForPrescriptionType.setForeground(new java.awt.Color(255, 0, 0));
        CHECKLabelForPrescriptionType.setText("* If you selected an expiration date, you cannot select \"permanent\".");

        CHECKLabelForEmitionDate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CHECKLabelForEmitionDate.setForeground(new java.awt.Color(255, 51, 51));
        CHECKLabelForEmitionDate.setText("* Emition date must be less than expiration date (if type is \"Not permanent\")");

        CHECKLabelForEmitionDate2.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CHECKLabelForEmitionDate2.setForeground(new java.awt.Color(255, 51, 51));
        CHECKLabelForEmitionDate2.setText("*Expiration date must be bigger than emition date(if type is \"Not permanent\")");

        javax.swing.GroupLayout CRUDPanelReteteLayout = new javax.swing.GroupLayout(CRUDPanelRetete);
        CRUDPanelRetete.setLayout(CRUDPanelReteteLayout);
        CRUDPanelReteteLayout.setHorizontalGroup(
            CRUDPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelForRetetaCNP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(CHECKLabelForRetetaCNP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TextFieldForRetetaCNP)
            .addComponent(LabelForRetetaCUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(CHECKLabelForReteteCUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TextFieldForRetetaCUI)
            .addComponent(LabelForRetetaEmitionDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(LabelForExpirationDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(CHECKLabelReteteExpDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(CRUDPanelReteteLayout.createSequentialGroup()
                .addGroup(CRUDPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelForPrescriptionType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CHECKLabelForPrescriptionType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ComboBoxForPrescriptionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CRUDPanelReteteLayout.createSequentialGroup()
                        .addComponent(ComboBoxForYearExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBoxForMonthExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBoxForDayExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CRUDPanelReteteLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(AddBtnRetete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateBtnRetete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtnRetete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ClearBtnRetete, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(CRUDPanelReteteLayout.createSequentialGroup()
                .addComponent(ComboBoxForYearEmitionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxForMonthEmitionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxForDayEmitionDate, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(CHECKLabelForEmitionDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(CHECKLabelForEmitionDate2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CRUDPanelReteteLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddBtnRetete, ClearBtnRetete, DeleteBtnRetete, UpdateBtnRetete});

        CRUDPanelReteteLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ComboBoxForDayEmitionDate, ComboBoxForDayExpirationDate, ComboBoxForMonthEmitionDate, ComboBoxForMonthExpirationDate, ComboBoxForPrescriptionType, ComboBoxForYearEmitionDate, ComboBoxForYearExpirationDate});

        CRUDPanelReteteLayout.setVerticalGroup(
            CRUDPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRUDPanelReteteLayout.createSequentialGroup()
                .addComponent(LabelForRetetaCNP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHECKLabelForRetetaCNP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForRetetaCNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForRetetaCUI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHECKLabelForReteteCUI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForRetetaCUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForRetetaEmitionDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CRUDPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxForYearEmitionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxForMonthEmitionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxForDayEmitionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHECKLabelForEmitionDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHECKLabelForEmitionDate2)
                .addGap(11, 11, 11)
                .addComponent(LabelForExpirationDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHECKLabelReteteExpDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CRUDPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxForYearExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxForMonthExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxForDayExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForPrescriptionType, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHECKLabelForPrescriptionType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxForPrescriptionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 626, Short.MAX_VALUE)
                .addGroup(CRUDPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtnRetete)
                    .addComponent(UpdateBtnRetete)
                    .addComponent(DeleteBtnRetete)
                    .addComponent(ClearBtnRetete)))
        );

        ReteteTable.setAutoCreateRowSorter(true);
        ReteteTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        ReteteTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ReteteTable.setForeground(new java.awt.Color(255, 255, 255));
        ReteteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prescription ID", "Pacient CNP", "Doctor CUI", "Emition date", "Expiration date", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ReteteTable.setGridColor(new java.awt.Color(102, 102, 102));
        ReteteTable.setShowGrid(true);
        ReteteTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReteteTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(ReteteTable);

        javax.swing.GroupLayout RetetePanelLayout = new javax.swing.GroupLayout(RetetePanel);
        RetetePanel.setLayout(RetetePanelLayout);
        RetetePanelLayout.setHorizontalGroup(
            RetetePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TtitleLabelForRetetePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(RetetePanelLayout.createSequentialGroup()
                .addComponent(CRUDPanelRetete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE))
        );
        RetetePanelLayout.setVerticalGroup(
            RetetePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RetetePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TtitleLabelForRetetePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RetetePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CRUDPanelRetete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane7))
                .addContainerGap())
        );

        ParentPanel.add(RetetePanel, "card8");

        TitleForMedicamentePanel.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        TitleForMedicamentePanel.setForeground(new java.awt.Color(255, 255, 255));
        TitleForMedicamentePanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleForMedicamentePanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/medicine.png"))); // NOI18N
        TitleForMedicamentePanel.setText("Medicaments");
        TitleForMedicamentePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        CRUDPanelMedicaments.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Medicaments", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        LabelForMedicamentName.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForMedicamentName.setForeground(new java.awt.Color(255, 255, 255));
        LabelForMedicamentName.setText("* Medicament name:");

        TextFieldForMedicamentName.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForMedicamentName.setForeground(new java.awt.Color(255, 255, 255));
        TextFieldForMedicamentName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForMedicamentNameMouseClicked(evt);
            }
        });
        TextFieldForMedicamentName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForMedicamentNameKeyReleased(evt);
            }
        });

        LabelForMedicamentWeight.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForMedicamentWeight.setForeground(new java.awt.Color(255, 255, 255));
        LabelForMedicamentWeight.setText("Medicament weight (Mg/pill): ");

        ComboBoxForMedicamentWeight.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForMedicamentWeight.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForMedicamentWeight.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForMedicamentWeightItemStateChanged(evt);
            }
        });

        LabelForMedicamentType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForMedicamentType.setForeground(new java.awt.Color(255, 255, 255));
        LabelForMedicamentType.setText("* Medicament type:");

        ComboBoxForMedicamentType.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForMedicamentType.setForeground(new java.awt.Color(255, 255, 255));
        ComboBoxForMedicamentType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForMedicamentTypeItemStateChanged(evt);
            }
        });

        AddBtnMedicament.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        AddBtnMedicament.setForeground(new java.awt.Color(255, 255, 255));
        AddBtnMedicament.setText("Add");
        AddBtnMedicament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnMedicamentActionPerformed(evt);
            }
        });

        DeleteBtnMedicament.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        DeleteBtnMedicament.setForeground(new java.awt.Color(255, 255, 255));
        DeleteBtnMedicament.setText("Delete");
        DeleteBtnMedicament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnMedicamentActionPerformed(evt);
            }
        });

        UpdatBtnMedicament.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        UpdatBtnMedicament.setForeground(new java.awt.Color(255, 255, 255));
        UpdatBtnMedicament.setText("Update");
        UpdatBtnMedicament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatBtnMedicamentActionPerformed(evt);
            }
        });

        ClearBtnMedicament.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        ClearBtnMedicament.setForeground(new java.awt.Color(255, 255, 255));
        ClearBtnMedicament.setText("Clear");
        ClearBtnMedicament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnMedicamentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CRUDPanelMedicamentsLayout = new javax.swing.GroupLayout(CRUDPanelMedicaments);
        CRUDPanelMedicaments.setLayout(CRUDPanelMedicamentsLayout);
        CRUDPanelMedicamentsLayout.setHorizontalGroup(
            CRUDPanelMedicamentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelForMedicamentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TextFieldForMedicamentName)
            .addGroup(CRUDPanelMedicamentsLayout.createSequentialGroup()
                .addGroup(CRUDPanelMedicamentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelForMedicamentWeight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelForMedicamentType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ComboBoxForMedicamentType, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxForMedicamentWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CRUDPanelMedicamentsLayout.createSequentialGroup()
                        .addComponent(AddBtnMedicament)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtnMedicament)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdatBtnMedicament)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearBtnMedicament)))
                .addContainerGap())
        );

        CRUDPanelMedicamentsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ComboBoxForMedicamentType, ComboBoxForMedicamentWeight});

        CRUDPanelMedicamentsLayout.setVerticalGroup(
            CRUDPanelMedicamentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRUDPanelMedicamentsLayout.createSequentialGroup()
                .addComponent(LabelForMedicamentName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForMedicamentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForMedicamentWeight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ComboBoxForMedicamentWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(LabelForMedicamentType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ComboBoxForMedicamentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(CRUDPanelMedicamentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtnMedicament)
                    .addComponent(DeleteBtnMedicament)
                    .addComponent(UpdatBtnMedicament)
                    .addComponent(ClearBtnMedicament)))
        );

        MedicamentsTable.setAutoCreateRowSorter(true);
        MedicamentsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        MedicamentsTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        MedicamentsTable.setForeground(new java.awt.Color(255, 255, 255));
        MedicamentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicament ID", "Medicament name", "Medicament pill weight (mg)", "Medicament type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MedicamentsTable.setGridColor(new java.awt.Color(102, 102, 102));
        MedicamentsTable.setShowGrid(true);
        MedicamentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MedicamentsTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(MedicamentsTable);

        javax.swing.GroupLayout MedicamentePanelLayout = new javax.swing.GroupLayout(MedicamentePanel);
        MedicamentePanel.setLayout(MedicamentePanelLayout);
        MedicamentePanelLayout.setHorizontalGroup(
            MedicamentePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TitleForMedicamentePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MedicamentePanelLayout.createSequentialGroup()
                .addComponent(CRUDPanelMedicaments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        MedicamentePanelLayout.setVerticalGroup(
            MedicamentePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MedicamentePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleForMedicamentePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MedicamentePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CRUDPanelMedicaments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MedicamentePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 538, Short.MAX_VALUE)))
                .addContainerGap())
        );

        ParentPanel.add(MedicamentePanel, "card9");

        TitleLabelForReteteCuMedicamentele.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        TitleLabelForReteteCuMedicamentele.setForeground(new java.awt.Color(255, 255, 255));
        TitleLabelForReteteCuMedicamentele.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabelForReteteCuMedicamentele.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prescription (1).png"))); // NOI18N
        TitleLabelForReteteCuMedicamentele.setText("Retete + Medicamentele");
        TitleLabelForReteteCuMedicamentele.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        CRUDPanelForReteteCuMedicamentele.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Prescription + Medicine", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        LabelForPrescriptionID.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForPrescriptionID.setText("* Prescription ID:");

        CHECKLabelForRetetaID.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CHECKLabelForRetetaID.setForeground(new java.awt.Color(0, 255, 0));
        CHECKLabelForRetetaID.setText("* Search the prescription ID by pacient CNP");

        CHECKPrescriptionFound.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CHECKPrescriptionFound.setForeground(new java.awt.Color(0, 255, 0));
        CHECKPrescriptionFound.setText("* Prescription found ! ");

        CheckPrescriptionNotFound.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        CheckPrescriptionNotFound.setForeground(new java.awt.Color(255, 0, 0));
        CheckPrescriptionNotFound.setText("* Prescription not found ! Check the CNP again .");

        TextFieldForPrescriptionID.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        TextFieldForPrescriptionID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldForPrescriptionIDMouseClicked(evt);
            }
        });
        TextFieldForPrescriptionID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextFieldForPrescriptionIDKeyReleased(evt);
            }
        });

        ListForPacientRetete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        ListForPacientRetete.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ListForPacientRetete.setForeground(java.awt.Color.white);
        ListForPacientRetete.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListForPacientRetete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ListForPacientRetete.setSelectionForeground(new java.awt.Color(51, 153, 255));
        jScrollPane9.setViewportView(ListForPacientRetete);

        ComboBoxForMedicamentSelection.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForMedicamentSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForMedicamentSelectionItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        jLabel5.setText("* Medicament :");

        LabelForCantitate.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        LabelForCantitate.setText("Quantity:");

        ComboBoxForQuantity.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ComboBoxForQuantity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxForQuantityItemStateChanged(evt);
            }
        });

        AddBtnReteteCuMedicamentele.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        AddBtnReteteCuMedicamentele.setText("Add");
        AddBtnReteteCuMedicamentele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnReteteCuMedicamenteleActionPerformed(evt);
            }
        });

        DeleteBtnReteteCuMedicamentele.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        DeleteBtnReteteCuMedicamentele.setText("Delete");
        DeleteBtnReteteCuMedicamentele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnReteteCuMedicamenteleActionPerformed(evt);
            }
        });

        UpdateBtnReteteCuMedicamentele.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        UpdateBtnReteteCuMedicamentele.setText("Update");
        UpdateBtnReteteCuMedicamentele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnReteteCuMedicamenteleActionPerformed(evt);
            }
        });

        ClearBtnReteteCuMedicamentele.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        ClearBtnReteteCuMedicamentele.setText("Clear");
        ClearBtnReteteCuMedicamentele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnReteteCuMedicamenteleActionPerformed(evt);
            }
        });

        CheckSelectFromList.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        CheckSelectFromList.setForeground(new java.awt.Color(255, 255, 255));
        CheckSelectFromList.setText("Select from the list below prescription ID:");

        CHECKPrescriptionListEmpty.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        CHECKPrescriptionListEmpty.setForeground(new java.awt.Color(255, 0, 0));
        CHECKPrescriptionListEmpty.setText("* This pacient has no prescriptions !");

        javax.swing.GroupLayout CRUDPanelForReteteCuMedicamenteleLayout = new javax.swing.GroupLayout(CRUDPanelForReteteCuMedicamentele);
        CRUDPanelForReteteCuMedicamentele.setLayout(CRUDPanelForReteteCuMedicamenteleLayout);
        CRUDPanelForReteteCuMedicamenteleLayout.setHorizontalGroup(
            CRUDPanelForReteteCuMedicamenteleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelForPrescriptionID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(CHECKLabelForRetetaID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(CHECKPrescriptionFound, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TextFieldForPrescriptionID)
            .addComponent(jScrollPane9)
            .addGroup(CRUDPanelForReteteCuMedicamenteleLayout.createSequentialGroup()
                .addGroup(CRUDPanelForReteteCuMedicamenteleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckPrescriptionNotFound, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelForCantitate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CheckSelectFromList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(CRUDPanelForReteteCuMedicamenteleLayout.createSequentialGroup()
                        .addGroup(CRUDPanelForReteteCuMedicamenteleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ComboBoxForQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(CRUDPanelForReteteCuMedicamenteleLayout.createSequentialGroup()
                                .addComponent(AddBtnReteteCuMedicamentele)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteBtnReteteCuMedicamentele)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UpdateBtnReteteCuMedicamentele)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ClearBtnReteteCuMedicamentele))
                            .addComponent(ComboBoxForMedicamentSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(CHECKPrescriptionListEmpty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        CRUDPanelForReteteCuMedicamenteleLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddBtnReteteCuMedicamentele, ClearBtnReteteCuMedicamentele, DeleteBtnReteteCuMedicamentele, UpdateBtnReteteCuMedicamentele});

        CRUDPanelForReteteCuMedicamenteleLayout.setVerticalGroup(
            CRUDPanelForReteteCuMedicamenteleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRUDPanelForReteteCuMedicamenteleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelForPrescriptionID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHECKLabelForRetetaID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHECKPrescriptionFound)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckPrescriptionNotFound)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldForPrescriptionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CheckSelectFromList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CHECKPrescriptionListEmpty)
                .addGap(25, 25, 25)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxForMedicamentSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelForCantitate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxForQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 589, Short.MAX_VALUE)
                .addGroup(CRUDPanelForReteteCuMedicamenteleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CRUDPanelForReteteCuMedicamenteleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AddBtnReteteCuMedicamentele)
                        .addComponent(UpdateBtnReteteCuMedicamentele)
                        .addComponent(ClearBtnReteteCuMedicamentele))
                    .addComponent(DeleteBtnReteteCuMedicamentele, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        ReteteCuMedicamenteleTable.setAutoCreateRowSorter(true);
        ReteteCuMedicamenteleTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        ReteteCuMedicamenteleTable.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        ReteteCuMedicamenteleTable.setForeground(new java.awt.Color(255, 255, 255));
        ReteteCuMedicamenteleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Prescription ID", "Medicament name", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ReteteCuMedicamenteleTable.setGridColor(new java.awt.Color(102, 102, 102));
        ReteteCuMedicamenteleTable.setShowGrid(true);
        ReteteCuMedicamenteleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReteteCuMedicamenteleTableMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(ReteteCuMedicamenteleTable);

        javax.swing.GroupLayout ReteteCuMedicamentelePanelLayout = new javax.swing.GroupLayout(ReteteCuMedicamentelePanel);
        ReteteCuMedicamentelePanel.setLayout(ReteteCuMedicamentelePanelLayout);
        ReteteCuMedicamentelePanelLayout.setHorizontalGroup(
            ReteteCuMedicamentelePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TitleLabelForReteteCuMedicamentele, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(ReteteCuMedicamentelePanelLayout.createSequentialGroup()
                .addComponent(CRUDPanelForReteteCuMedicamentele, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE))
        );
        ReteteCuMedicamentelePanelLayout.setVerticalGroup(
            ReteteCuMedicamentelePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReteteCuMedicamentelePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleLabelForReteteCuMedicamentele, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReteteCuMedicamentelePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CRUDPanelForReteteCuMedicamentele, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane10))
                .addContainerGap())
        );

        ParentPanel.add(ReteteCuMedicamentelePanel, "card10");

        VIEWLabelTitleForCabineteDoctori.setFont(new java.awt.Font("Baloo 2", 1, 14)); // NOI18N
        VIEWLabelTitleForCabineteDoctori.setForeground(new java.awt.Color(255, 255, 255));
        VIEWLabelTitleForCabineteDoctori.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        VIEWLabelTitleForCabineteDoctori.setText("Cabinete doctori");
        VIEWLabelTitleForCabineteDoctori.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        VIEWPanelForCabineteDoctori.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cabinete doctori", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        VIEWLabelForDoctorCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWLabelForDoctorCUI.setForeground(new java.awt.Color(255, 255, 255));
        VIEWLabelForDoctorCUI.setText("* doctor CUI:");

        VIEWTF_FOR_CUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWTF_FOR_CUI.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTF_FOR_CUI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                VIEWTF_FOR_CUIKeyReleased(evt);
            }
        });

        VIEWCheckCUI.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWCheckCUI.setForeground(new java.awt.Color(255, 0, 0));
        VIEWCheckCUI.setText("* doctor CUI does not exist! Make sure the doctor exists.");

        VIEWLabelForNumeCabinet.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWLabelForNumeCabinet.setForeground(new java.awt.Color(255, 255, 255));
        VIEWLabelForNumeCabinet.setText("* Nume cabinet:");

        VIEWTF_FOR_CabinetNume.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWTF_FOR_CabinetNume.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTF_FOR_CabinetNume.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                VIEWTF_FOR_CabinetNumeKeyReleased(evt);
            }
        });

        VIEWLabelForCodPostal.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWLabelForCodPostal.setForeground(new java.awt.Color(255, 255, 255));
        VIEWLabelForCodPostal.setText("* Cod postal:");

        VIEWTF_FOR_CabineteCodPostal.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWTF_FOR_CabineteCodPostal.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTF_FOR_CabineteCodPostal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                VIEWTF_FOR_CabineteCodPostalKeyReleased(evt);
            }
        });

        VIEWLabelForOras.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWLabelForOras.setForeground(new java.awt.Color(255, 255, 255));
        VIEWLabelForOras.setText("* Oras:");

        VIEWTF_FOR_CabinetOras.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWTF_FOR_CabinetOras.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTF_FOR_CabinetOras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                VIEWTF_FOR_CabinetOrasKeyReleased(evt);
            }
        });

        VIEWLabelForCabinetNrStrada.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWLabelForCabinetNrStrada.setForeground(new java.awt.Color(255, 255, 255));
        VIEWLabelForCabinetNrStrada.setText("* Nr. strada:");

        VIEWTF_FOR_CabinetNrStada.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWTF_FOR_CabinetNrStada.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTF_FOR_CabinetNrStada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                VIEWTF_FOR_CabinetNrStadaKeyReleased(evt);
            }
        });

        VIEWAddBtnCabineteDoctori.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWAddBtnCabineteDoctori.setForeground(new java.awt.Color(255, 255, 255));
        VIEWAddBtnCabineteDoctori.setText("Add");
        VIEWAddBtnCabineteDoctori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIEWAddBtnCabineteDoctoriActionPerformed(evt);
            }
        });

        VIEWDeleteBtnForCabineteDoctori.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWDeleteBtnForCabineteDoctori.setForeground(new java.awt.Color(255, 255, 255));
        VIEWDeleteBtnForCabineteDoctori.setText("Delete");
        VIEWDeleteBtnForCabineteDoctori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIEWDeleteBtnForCabineteDoctoriActionPerformed(evt);
            }
        });

        VIEWUpdateBtnForCabineteDoctori.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWUpdateBtnForCabineteDoctori.setForeground(new java.awt.Color(255, 255, 255));
        VIEWUpdateBtnForCabineteDoctori.setText("Update");
        VIEWUpdateBtnForCabineteDoctori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIEWUpdateBtnForCabineteDoctoriActionPerformed(evt);
            }
        });

        VIEWClearBtnForCabineteDoctori.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWClearBtnForCabineteDoctori.setForeground(new java.awt.Color(255, 255, 255));
        VIEWClearBtnForCabineteDoctori.setText("Clear");
        VIEWClearBtnForCabineteDoctori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIEWClearBtnForCabineteDoctoriActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout VIEWPanelForCabineteDoctoriLayout = new javax.swing.GroupLayout(VIEWPanelForCabineteDoctori);
        VIEWPanelForCabineteDoctori.setLayout(VIEWPanelForCabineteDoctoriLayout);
        VIEWPanelForCabineteDoctoriLayout.setHorizontalGroup(
            VIEWPanelForCabineteDoctoriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(VIEWLabelForDoctorCUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(VIEWTF_FOR_CUI)
            .addComponent(VIEWLabelForNumeCabinet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(VIEWPanelForCabineteDoctoriLayout.createSequentialGroup()
                .addComponent(VIEWAddBtnCabineteDoctori)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWDeleteBtnForCabineteDoctori)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWUpdateBtnForCabineteDoctori)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWClearBtnForCabineteDoctori)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(VIEWPanelForCabineteDoctoriLayout.createSequentialGroup()
                .addGroup(VIEWPanelForCabineteDoctoriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VIEWCheckCUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VIEWTF_FOR_CabinetNume, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(VIEWTF_FOR_CabineteCodPostal, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(VIEWLabelForCodPostal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VIEWTF_FOR_CabinetOras, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(VIEWLabelForOras, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VIEWTF_FOR_CabinetNrStada, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(VIEWLabelForCabinetNrStrada, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        VIEWPanelForCabineteDoctoriLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {VIEWAddBtnCabineteDoctori, VIEWClearBtnForCabineteDoctori, VIEWDeleteBtnForCabineteDoctori, VIEWUpdateBtnForCabineteDoctori});

        VIEWPanelForCabineteDoctoriLayout.setVerticalGroup(
            VIEWPanelForCabineteDoctoriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VIEWPanelForCabineteDoctoriLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VIEWLabelForDoctorCUI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWTF_FOR_CUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWCheckCUI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWLabelForNumeCabinet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWTF_FOR_CabinetNume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWLabelForCodPostal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWTF_FOR_CabineteCodPostal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWLabelForOras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWTF_FOR_CabinetOras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(VIEWLabelForCabinetNrStrada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWTF_FOR_CabinetNrStada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 264, Short.MAX_VALUE)
                .addGroup(VIEWPanelForCabineteDoctoriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VIEWAddBtnCabineteDoctori)
                    .addComponent(VIEWDeleteBtnForCabineteDoctori)
                    .addComponent(VIEWUpdateBtnForCabineteDoctori)
                    .addComponent(VIEWClearBtnForCabineteDoctori)))
        );

        VIEWTabel_FOR_CabineteDoctori.setAutoCreateRowSorter(true);
        VIEWTabel_FOR_CabineteDoctori.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        VIEWTabel_FOR_CabineteDoctori.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWTabel_FOR_CabineteDoctori.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTabel_FOR_CabineteDoctori.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "doctor CUI", "Nume", "Cod postal", "Oras", "Nr. strada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        VIEWTabel_FOR_CabineteDoctori.setShowGrid(true);
        VIEWTabel_FOR_CabineteDoctori.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VIEWTabel_FOR_CabineteDoctoriMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(VIEWTabel_FOR_CabineteDoctori);

        javax.swing.GroupLayout DMLView_PANEL_CabineteDoctoriLayout = new javax.swing.GroupLayout(DMLView_PANEL_CabineteDoctori);
        DMLView_PANEL_CabineteDoctori.setLayout(DMLView_PANEL_CabineteDoctoriLayout);
        DMLView_PANEL_CabineteDoctoriLayout.setHorizontalGroup(
            DMLView_PANEL_CabineteDoctoriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(VIEWLabelTitleForCabineteDoctori, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(DMLView_PANEL_CabineteDoctoriLayout.createSequentialGroup()
                .addComponent(VIEWPanelForCabineteDoctori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE))
        );
        DMLView_PANEL_CabineteDoctoriLayout.setVerticalGroup(
            DMLView_PANEL_CabineteDoctoriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DMLView_PANEL_CabineteDoctoriLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VIEWLabelTitleForCabineteDoctori, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DMLView_PANEL_CabineteDoctoriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VIEWPanelForCabineteDoctori, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE))
                .addContainerGap())
        );

        ParentPanel.add(DMLView_PANEL_CabineteDoctori, "card11");

        VIEWSearchLabel.setFont(new java.awt.Font("Baloo 2", 1, 16)); // NOI18N
        VIEWSearchLabel.setForeground(new java.awt.Color(255, 255, 255));
        VIEWSearchLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        VIEWSearchLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recruitment.png"))); // NOI18N
        VIEWSearchLabel.setText(" Search:");
        VIEWSearchLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        VIEWSearchLabel.setIconTextGap(6);

        VIEWSearchFieldForRetete.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWSearchFieldForRetete.setForeground(new java.awt.Color(255, 255, 255));
        VIEWSearchFieldForRetete.setText("ex. 5031230340925");
        VIEWSearchFieldForRetete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VIEWSearchFieldForReteteMouseClicked(evt);
            }
        });
        VIEWSearchFieldForRetete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                VIEWSearchFieldForReteteKeyReleased(evt);
            }
        });

        VIEWTable_RETETE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        VIEWTable_RETETE.setFont(new java.awt.Font("Baloo Bhai 2", 1, 12)); // NOI18N
        VIEWTable_RETETE.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTable_RETETE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "pacient CNP", "Nr. retete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane12.setViewportView(VIEWTable_RETETE);

        VIEWPanelForRetete_NOT_DML.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ReteteView", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Baloo 2", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        VIEWLabelForCNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWLabelForCNP.setForeground(new java.awt.Color(255, 255, 255));
        VIEWLabelForCNP.setText("CNP:");

        VIEWTF_FOR_CNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWTF_FOR_CNP.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTF_FOR_CNP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                VIEWTF_FOR_CNPKeyReleased(evt);
            }
        });

        VIEWLabelForNrRetete.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWLabelForNrRetete.setForeground(new java.awt.Color(255, 255, 255));
        VIEWLabelForNrRetete.setText("Nr. retete:");

        VIEWTF_FOR_NR_RETETE.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWTF_FOR_NR_RETETE.setForeground(new java.awt.Color(255, 255, 255));
        VIEWTF_FOR_NR_RETETE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                VIEWTF_FOR_NR_RETETEKeyReleased(evt);
            }
        });

        VIEWAddBtnForRetete.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWAddBtnForRetete.setForeground(new java.awt.Color(255, 255, 255));
        VIEWAddBtnForRetete.setText("Add");
        VIEWAddBtnForRetete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIEWAddBtnForReteteActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("!!! ON THIS TABLE ADD/DELETE/UPDATE ARE NOT POSSIBLE");

        jLabel7.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N

        VIEWLABEL_RETETE_CHECK_CNP.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        VIEWLABEL_RETETE_CHECK_CNP.setForeground(new java.awt.Color(255, 0, 0));
        VIEWLABEL_RETETE_CHECK_CNP.setText("* CNP must be in our database!");

        javax.swing.GroupLayout VIEWPanelForRetete_NOT_DMLLayout = new javax.swing.GroupLayout(VIEWPanelForRetete_NOT_DML);
        VIEWPanelForRetete_NOT_DML.setLayout(VIEWPanelForRetete_NOT_DMLLayout);
        VIEWPanelForRetete_NOT_DMLLayout.setHorizontalGroup(
            VIEWPanelForRetete_NOT_DMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(VIEWLabelForCNP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(VIEWTF_FOR_CNP)
            .addComponent(VIEWLabelForNrRetete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(VIEWTF_FOR_NR_RETETE)
            .addGroup(VIEWPanelForRetete_NOT_DMLLayout.createSequentialGroup()
                .addGroup(VIEWPanelForRetete_NOT_DMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VIEWAddBtnForRetete)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(VIEWPanelForRetete_NOT_DMLLayout.createSequentialGroup()
                .addComponent(VIEWLABEL_RETETE_CHECK_CNP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        VIEWPanelForRetete_NOT_DMLLayout.setVerticalGroup(
            VIEWPanelForRetete_NOT_DMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VIEWPanelForRetete_NOT_DMLLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VIEWLabelForCNP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWTF_FOR_CNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(VIEWLABEL_RETETE_CHECK_CNP)
                .addGap(28, 28, 28)
                .addComponent(VIEWLabelForNrRetete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VIEWTF_FOR_NR_RETETE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(VIEWAddBtnForRetete))
        );

        jLabel8.setFont(new java.awt.Font("Baloo 2", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Retete/Pacient");
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        javax.swing.GroupLayout VIEWPanelReteteLayout = new javax.swing.GroupLayout(VIEWPanelRetete);
        VIEWPanelRetete.setLayout(VIEWPanelReteteLayout);
        VIEWPanelReteteLayout.setHorizontalGroup(
            VIEWPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VIEWPanelReteteLayout.createSequentialGroup()
                .addComponent(VIEWPanelForRetete_NOT_DML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 863, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(VIEWPanelReteteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(VIEWPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(VIEWPanelReteteLayout.createSequentialGroup()
                        .addComponent(VIEWSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VIEWSearchFieldForRetete, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        VIEWPanelReteteLayout.setVerticalGroup(
            VIEWPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VIEWPanelReteteLayout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(VIEWPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VIEWSearchLabel)
                    .addComponent(VIEWSearchFieldForRetete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(VIEWPanelReteteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addGroup(VIEWPanelReteteLayout.createSequentialGroup()
                        .addComponent(VIEWPanelForRetete_NOT_DML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        ParentPanel.add(VIEWPanelRetete, "card12");

        getContentPane().add(ParentPanel);
        ParentPanel.setBounds(0, 70, 1190, 720);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // global variables 
    // borders
    Border redLine = BorderFactory.createLineBorder(Color.red);
    Border greenLine = BorderFactory.createLineBorder(Color.green);
    Border classicBorder = new FlatTextBorder();
    Border classicComboBorder = new FlatRoundBorder();
    //Colors
    Color green = Color.green;
    Color red = Color.red;
    private DefaultTableModel oldModel = new DefaultTableModel();
    // helper variables
    private static int numberOfComboBoxes = 22; // au fost 22
    private static int numberOfTextFields = 25; // au fost 24
    private static int numberOfTables = 9;
    private HashMap<Integer , String> DoctorsTypeMap = new HashMap<>();
    private HashMap<Integer, String> MedicamentsTypeMap = new HashMap<>();
    
    
    // textfield and combos
    
    List<JTextField> TextFields = new ArrayList<>(numberOfTextFields);
    List<JComboBox<String>> dateComboBoxes = new ArrayList<>(numberOfComboBoxes);
    List<JTable> TableList = new ArrayList<>(numberOfTables);
    
    private boolean CheckForOnlyLetterAndNumbers(JTextField textField){
        String text = textField.getText();
        if(text.matches("^[a-zA-Z0-9-]+$")){
            return true;
        }else{
            return false;
        }
    }
    
    private boolean CheckForOnlyLetter(JTextField textField){
        String text = textField.getText();
        if(text.matches("^[a-zA-Z]+$")){
            return true;
        }else{
            return false;
        }
    }
    
    private boolean CheckCnpPacient(JTextField textField){
        String text = textField.getText();
        if(text.matches("^[1256]\\d{12}$")){
            return true;
        }
        return false;
    }
    
    private boolean CheckOnlyForNumber(JTextField textField){
        String minValueString = textField.getText();
        if(minValueString.matches("^[-0-9]+$")){
            return true;
        }
        return false;
    }
    
    private boolean CheckCurrentTextFields(Integer index){
        boolean mainFlag = false;
        switch (index) {
           case 0 -> {
                boolean CUI_REGEX_FLAG = false;
                boolean CUI_INTEGER_FLAG = false;
                boolean CUI_UNIQUE_CHECKING = false;
                LabelForCUI1.setForeground(red);
                LabelForCUI2.setForeground(red);
                String CUIFromTextField = TextFieldForDoctorCUI.getText();          
                TextFieldForDoctorCUI.setBorder(redLine);
                if(CUIFromTextField.matches("[1-9]\\d{7}")){
                    CUI_REGEX_FLAG = true;
                    LabelForCUI1.setForeground(green);
                    Integer CUI_Integer = Integer.parseInt(CUIFromTextField);
                    if(CUI_Integer >= 10000000 && CUI_Integer <= 99999999){
                        
                        LabelForCUI2.setForeground(green);
                        CUI_INTEGER_FLAG = true;
                        Doctori checkDoctorInDB = CRUD_Doctor.findById(CUI_Integer);
                        if(checkDoctorInDB == null){
                            CUI_UNIQUE_CHECKING = true;
                            
                        }
                    }
                }
                if(CUI_REGEX_FLAG && CUI_INTEGER_FLAG && CUI_UNIQUE_CHECKING){
                   
                    LabelForCUI1.setVisible(false);
                    LabelForCUI2.setVisible(false);
                    mainFlag = true;
                    TextFieldForDoctorCUI.setBorder(greenLine);
                    TextFieldForDoctorName.setEnabled(true);
                }
                break;
            }
           case 1 -> {
                boolean CUI_CHECK_NAME = false;
                if(CheckForOnlyLetter(TextFieldForDoctorName)){
                    CUI_CHECK_NAME = true;
                }
                if(CUI_CHECK_NAME == true){
                    TextFieldForDoctorPrename.setEnabled(true);
                    mainFlag = true;
                }
                break;
            }
           case 2 -> {
                boolean CUI_CHECK_PRENAME = false;
                if(CheckForOnlyLetter(TextFieldForDoctorPrename)){
                    CUI_CHECK_PRENAME = true;
                }
                if(CUI_CHECK_PRENAME == true){
                    mainFlag = true;
                    ComboBoxForYear.setEnabled(true);
                }
                break;
            }
           case 3 -> {
               boolean CNP_PACIENT_CHECK = false;
               boolean CNP_UNIQUE_CHECK = false;
               CheckLabelForCNP.setForeground(red);
               CheckLabel2ForCNP.setForeground(red);
               TextFieldForCNP.setBorder(redLine);
               if(CheckCnpPacient(TextFieldForCNP)){
                   CNP_PACIENT_CHECK = true;
                   Pacienti toBeFound = CRUD_Pacienti.findById(TextFieldForCNP.getText());
                   if(toBeFound == null){
                       CNP_UNIQUE_CHECK = true;
                   }
               }
               if(CNP_PACIENT_CHECK == true && CNP_UNIQUE_CHECK == true){
                   mainFlag = true;
                   TextFieldForNumePacient.setEnabled(true);
                   ComboBoxForYearPacient.setEnabled(true);
                   CheckLabelForCNP.setVisible(false);
                   CheckLabel2ForCNP.setVisible(false);
                   TextFieldForCNP.setBorder(greenLine);
               }
               break;
           }
           case 4 -> {
               boolean NUME_PACIENT_CHECK = false;
               TextFieldForNumePacient.setBorder(redLine);
               if(CheckForOnlyLetter(TextFieldForNumePacient)){
                   NUME_PACIENT_CHECK = true;
               }
               if(NUME_PACIENT_CHECK == true){
                   mainFlag = true;
                   TextFieldForPrenumePacient.setEnabled(true);
                   TextFieldForNumePacient.setBorder(greenLine);
               }
               break;
           }
           case 5 -> {
               boolean PRENUME_PACIENT_CHECK = false;
               TextFieldForPrenumePacient.setBorder(redLine);
               if(CheckForOnlyLetter(TextFieldForPrenumePacient)){
                   PRENUME_PACIENT_CHECK = true;
               }
               if(PRENUME_PACIENT_CHECK == true){
                   mainFlag = true;
                   ComboBoxForAsigurare.setEnabled(true);
                   TextFieldForPrenumePacient.setBorder(greenLine);
               }
               break;
           }
           case 6 -> {
               boolean ORAS_PACIENT_CHECK = false;
               TextFieldForPacientOras.setBorder(redLine);
               if(CheckForOnlyLetter(TextFieldForPacientOras)){
                   ORAS_PACIENT_CHECK = true;
               }
               if(ORAS_PACIENT_CHECK == true){
                   mainFlag = true;
                   AddPacientBtn.setEnabled(true);
                   TextFieldForPacientOras.setBorder(greenLine);
               }
               break;
           }
           case 7 -> {
               boolean CHECK_MINVALUE = false;
               TextFieldForMinVal.setBorder(redLine);
               if(CheckOnlyForNumber(TextFieldForMinVal)){
                   CHECK_MINVALUE = true;
               }
               if(CHECK_MINVALUE == true){
                   mainFlag = true;
                   TextFieldForMaxVal.setEnabled(true);
                   TextFieldForMinVal.setBorder(greenLine);
               }
               break;
           }
           case 8 -> {
               boolean CHECK_MAXVALUE = false;
               if(CheckOnlyForNumber(TextFieldForMaxVal)){
                   CHECK_MAXVALUE = true;
               }
               if(CHECK_MAXVALUE == true){
                   Integer minValue = Integer.parseInt(TextFieldForMinVal.getText());
                   Integer maxValue = Integer.parseInt(TextFieldForMaxVal.getText());
                   Integer compValue = Integer.compare(maxValue, minValue);
                   if(compValue == 0 && minValue == 0 && maxValue == 0){
                       CheckLabelForMaxValue.setVisible(false);
                       CheckLabelForMinValue.setVisible(false);
                       ComboBoxForAccuaracyValues.setEnabled(true);
                       TextFieldForMinVal.setBorder(greenLine);
                       TextFieldForMaxVal.setBorder(greenLine);
                       mainFlag = true;
                   }else if(compValue > 0){
                       mainFlag = true;
                       ComboBoxForAccuaracyValues.setEnabled(true);
                       TextFieldForMaxVal.setBorder(greenLine);
                       TextFieldForMinVal.setBorder(greenLine);
                       CheckLabelForMaxValue.setVisible(false);
                       CheckLabelForMinValue.setVisible(false);
                   }else if(compValue < 0){
                       CheckLabelForMaxValue.setVisible(true);
                       ComboBoxForAccuaracyValues.setEnabled(false);
                       TextFieldForMinVal.setBorder(redLine);
                   }else if(compValue == 0){
                       CheckLabelForMaxValue.setVisible(true);
                       CheckLabelForMinValue.setVisible(true);
                       ComboBoxForAccuaracyValues.setEnabled(false);
                       TextFieldForMinVal.setBorder(redLine);
                       TextFieldForMaxVal.setBorder(redLine);
                   }
               }
               break;
           }
           case 9 -> {
               boolean CHECK_NAME_TL = false;
               String getNume = TextFieldForNumeTL.getText();
               TextFieldForNumeTL.setBorder(redLine);
               if(getNume.matches("^[a-zA-z0-9]+$")){
                   CHECK_NAME_TL = true;
               }
               if(CHECK_NAME_TL == true){
                   mainFlag = true;
                   TextFieldForMinVal.setEnabled(true);
                   TextFieldForNumeTL.setBorder(greenLine);
               }
               break;
           }
           case 10 -> {
               boolean CHECK_CNP_IN_PACIENTS_TABLE = false;
               boolean CHECK_CNP = false;
               CheckLabelForCNPInPacienti.setVisible(true);
               if(CheckCnpPacient(TextFieldForCNPTesteLaborator)){
                   CHECK_CNP = true;
                   Pacienti alreadyIntoDataBase = CRUD_Pacienti.findById(TextFieldForCNPTesteLaborator.getText());
                   if(alreadyIntoDataBase != null){
                       CHECK_CNP_IN_PACIENTS_TABLE = true;
                   }
               }
               if(CHECK_CNP_IN_PACIENTS_TABLE && CHECK_CNP){
                   CheckLabelForCNPInPacienti.setVisible(false);
                   mainFlag = true;
                   TextFieldLabTest.setEnabled(true);
               }
               break;
           }
           case 11 -> {
               boolean CHECK_TESTNAME_IN_TESTE_LABORATOR_TABLE = false;
               boolean CHECK_TESTNAME = false;
               CheckLabelForNumeTest.setVisible(true);
               if(CheckForOnlyLetterAndNumbers(TextFieldLabTest)){
                   CHECK_TESTNAME = true;
                   TesteLaborator alreadyIntoDataBaseTestLaborator = CRUD_TesteLaborator.findByNumeTest(TextFieldLabTest.getText());
                   if(alreadyIntoDataBaseTestLaborator != null){
                       CHECK_TESTNAME_IN_TESTE_LABORATOR_TABLE = true;
                   }
               }
               if(CHECK_TESTNAME && CHECK_TESTNAME_IN_TESTE_LABORATOR_TABLE){
                   CheckLabelForNumeTest.setVisible(false);
                   mainFlag = true;
                   ComboBoxForResults.setEnabled(true);
               }
               break;
           }
           case 12 -> {
               boolean CHECK_VALUE_FOR_TEST = false;
               String value = TextFieldForTestValue.getText();
               if("-".equals(value) || CheckOnlyForNumber(TextFieldForTestValue)){
                   CHECK_VALUE_FOR_TEST = true;
               }
               if(CHECK_VALUE_FOR_TEST){
                   mainFlag = true;
                   ComboBoxYearTestEmition.setEnabled(true);
               }
               break;
           }
           case 13 -> {
               boolean CHECK_TYPE_NAME = false;
               if(CheckForOnlyLetter(TextFieldForDoctorType)){
                   CHECK_TYPE_NAME = true;
               }
               if(CHECK_TYPE_NAME){
                   mainFlag = true;
                   AddBtnDoctorType.setEnabled(true);
               }
               break;
           }
           case 14 -> {
               boolean CHECK_CABINET_NAME = false;
               if(TextFieldCabinetName.getText().matches("^[a-zA-Z-\\s]+$")){
                   CHECK_CABINET_NAME = true;
               }
               if(CHECK_CABINET_NAME){
                   mainFlag = true;
                   TextFieldForPostalCode.setEnabled(true);
               }
               break;
           }
           case 15 -> {
               boolean CHECK_CABINET_POSTAL_CODE = false;
               if(TextFieldForPostalCode.getText().matches("^\\d{6}$")){
                   CHECK_CABINET_POSTAL_CODE = true;
               }
               if(CHECK_CABINET_POSTAL_CODE){
                   mainFlag = true;
                   TextFieldForCabinetCity.setEnabled(true);
               }
               break;
           }
           case 16 -> {
               boolean CHECK_CABINET_CITY = false;
               String input = TextFieldForCabinetCity.getText();
               if(input.matches("^[a-zA-Z-\\s]+$")){
                   CHECK_CABINET_CITY = true;
               }
               if(CHECK_CABINET_CITY){
                   mainFlag = true;
                   TextFieldForStreet.setEnabled(true);
               }
               break;
           }
           
           case 17 -> {
               boolean CHECK_CABINET_STREET = false;
               String input = TextFieldForStreet.getText();
               if((!input.trim().isEmpty() && input.matches("^[a-zA-Z-\\s]+$")) || "-".equals(input)){
                   CHECK_CABINET_STREET = true;
               }
               if(CHECK_CABINET_STREET){
                   mainFlag = true;
                   TextFIeldForStreetNumber.setEnabled(true);
               }
               break;
           }
           case 18 -> {
               boolean CHECK_CABINET_STREET_NUMBER = false;
               if(CheckOnlyForNumber(TextFIeldForStreetNumber)){
                   CHECK_CABINET_STREET_NUMBER = true;
               }
               if(CHECK_CABINET_STREET_NUMBER){
                   mainFlag = true;
                   ComboBoxForPrefix.setEnabled(true);
                   TextFieldForPhoneNumber.setEnabled(true);
               }
               break;
           }
           case 19 -> {
               boolean CHECK_CABINET_PHONE_NUMBER = false;
               boolean CHECK_IN_DB_NOT_UNIQUE = false;
               String phoneNumberToCheckInDB = null;
               String phoneNumber = TextFieldForPhoneNumber.getText();
               if( "-".equals(phoneNumber) || phoneNumber.matches("^(7|2)\\d{2}\\d{3}\\d{3}$")){
                   CHECK_CABINET_PHONE_NUMBER = true;
                   String phoneNumberPrefix = ComboBoxForPrefix.getSelectedItem().toString();
                   phoneNumberToCheckInDB = phoneNumberPrefix + TextFieldForPhoneNumber.getText();
                   CabineteDoctori phoneNumberInDBforCabinet = CRUD_DoctorCabinets.findByPhoneNumber(phoneNumberToCheckInDB);
                   if(phoneNumberInDBforCabinet != null){
                       CHECK_IN_DB_NOT_UNIQUE = true;
                   }
               }
               if(CHECK_CABINET_PHONE_NUMBER && !CHECK_IN_DB_NOT_UNIQUE){
                   mainFlag = true;
                   AddBtnCabinet.setEnabled(true);
               }
               break;
           }
           case 20 -> {
               boolean CHECK_CABINET_CUI = false;
               boolean CHECK_CUI = false;
               if(TextFieldForCabinetCUI.getText().matches("[1-9]\\d{7}")){
                   CHECK_CUI = true;
                   Integer CUI_Integer = Integer.parseInt(TextFieldForCabinetCUI.getText());
                   if(CUI_Integer >= 10000000 && CUI_Integer <= 99999999){
                        Doctori checkDoctorInDB = CRUD_Doctor.findById(CUI_Integer);
                        if(checkDoctorInDB != null){
                            CHECK_CABINET_CUI = true;
                        }
                    }
               }
               if(CHECK_CABINET_CUI && CHECK_CUI){
                   mainFlag = true;
                   TextFieldCabinetName.setEnabled(true);
               }
               break;
           }
           case 21 -> {
               boolean CHECK_RETETE_CNP = false;
               boolean CHECK_CNP = false;
               if(CheckCnpPacient(TextFieldForRetetaCNP)){
                   CHECK_CNP = true;
                   Pacienti pacientInDB = CRUD_Pacienti.findById(TextFieldForRetetaCNP.getText());
                   if(pacientInDB != null){
                       CHECK_RETETE_CNP = true;
                   }
               }
               if(CHECK_RETETE_CNP && CHECK_CNP){
                   mainFlag = true;
                   TextFieldForRetetaCUI.setEnabled(true);
               }
               break;
           }
           case 22 -> {
               boolean CHECK_RETETE_CUI = false;
               boolean CHECK_CUI = false;
               if(TextFieldForRetetaCUI.getText().matches("[1-9]\\d{7}")){
                   CHECK_CUI = true;
                   Integer CUI_Integer = Integer.parseInt(TextFieldForRetetaCUI.getText());
                   if(CUI_Integer >= 10000000 && CUI_Integer <= 99999999){
                        Doctori checkDoctorInDB = CRUD_Doctor.findById(CUI_Integer);
                        if(checkDoctorInDB != null){
                            CHECK_RETETE_CUI = true;
                        }
                    }
               }
               if(CHECK_RETETE_CUI && CHECK_CUI){
                   mainFlag = true;
                   ComboBoxForYearEmitionDate.setEnabled(true);
               }
               break;
           }
           case 23 -> {
               boolean CHECK_MEDICAMENT_NAME = false;
               if(CheckForOnlyLetterAndNumbers(TextFieldForMedicamentName)){
                   CHECK_MEDICAMENT_NAME = true;
               }
               if(CHECK_MEDICAMENT_NAME){
                   mainFlag = true;
                   ComboBoxForMedicamentWeight.setEnabled(true);
               }
               break;
           }
           case 24 -> {
               boolean CHECK_PRESCRIPTION_ID = false;
               boolean CHECK_PACIENT_IN_DB = false;
               boolean CHECK_CNP = false;
               if(CheckCnpPacient(TextFieldForPrescriptionID)){
                   CHECK_CNP = true;
                   Pacienti pacientFound = CRUD_Pacienti.findById(TextFieldForPrescriptionID.getText());
                   if(pacientFound != null){
                       CHECK_PACIENT_IN_DB = true;
                       List<Retete> allReteteFor_pacientFound = CRUD_Retete.findByPacient(pacientFound);
                       DefaultListModel reteteListModel =  new DefaultListModel();
                       for(Retete reteteIT : allReteteFor_pacientFound){
                           reteteListModel.addElement(reteteIT.getRetetaId());
                       }
                       ListForPacientRetete.setModel(reteteListModel);
                       CHECK_PRESCRIPTION_ID = true;
                   }
               }
               if(CHECK_PRESCRIPTION_ID && CHECK_PACIENT_IN_DB && CHECK_CNP){
                   mainFlag = true;
                   ComboBoxForMedicamentSelection.setEnabled(true);
               }
           }
           default -> throw new AssertionError();
        }
        if(mainFlag == false)
            return false;
        return true;
    }
    
    private boolean ComboBoxChecking(JComboBox<String> currentComboBox){
        if(currentComboBox.getSelectedItem() != "-"){
            return true;
        }else{
            return false;
        }
    }
    
    private boolean CheckCurrentComboBox(Integer index){
        boolean mainFlag = false;
        switch (index) {
            case 0 -> {
                if(ComboBoxChecking(ComboBoxForYear) || ComboBoxForYear.getSelectedItem().toString() == "-"){
                    mainFlag = true;
                    ComboBoxForMonth.setEnabled(true);
                }
                break;
            }
            case 1 -> {
                if(ComboBoxChecking(ComboBoxForMonth) || ComboBoxForMonth.getSelectedItem().toString() == "-"){
                    mainFlag = true;
                    ComboBoxForDay.setEnabled(true);
                }
                break;
            }
            case 2 -> {
                if(ComboBoxChecking(ComboBoxForDay) || ComboBoxForDay.getSelectedItem().toString() == "-"){
                    mainFlag = true;
                    ComboBoxForDoctorType.setEnabled(true);
                }
                break;
            }
            case 3 -> {
                if(ComboBoxChecking(ComboBoxForDoctorType)){
                     mainFlag = true;
                     AddBtn.setEnabled(true);
                }
                break;
            }
            case 4 -> {
                if(ComboBoxChecking(ComboBoxForYearPacient)){
                    mainFlag = true;
                    ComboBoxForMonthPacient.setEnabled(true);
                }
                break;
            }
            case 5 -> {
                if(ComboBoxChecking(ComboBoxForMonthPacient)){
                    mainFlag = true;
                    ComboBoxForDayPacient.setEnabled(true);
                }
                break;
            }
            case 6 -> {
                if(ComboBoxChecking(ComboBoxForDayPacient)){
                    mainFlag = true;
                    TextFieldForPacientOras.setEnabled(true);
                }
                break;
            }
            case 7 -> {
                if(ComboBoxChecking(ComboBoxForAccuaracyValues)){
                    mainFlag = true;
                    AddBtnTL.setEnabled(true);
                }
                break;
            }
            case 8 -> {
                if(ComboBoxChecking(ComboBoxForResults)){
                    mainFlag = true;
                    TextFieldForTestValue.setEnabled(true);
                }
                break;
            }
            case 9 -> {
                if(ComboBoxChecking(ComboBoxYearTestEmition) || ComboBoxYearTestEmition.getSelectedItem().toString() == "-"){
                    mainFlag = true;
                    ComboBoxMonthTestEmition.setEnabled(true);
                }
                break;
            }
            case 10 -> {
                if(ComboBoxChecking(ComboBoxMonthTestEmition) || ComboBoxYearTestEmition.getSelectedItem().toString() == "-"){
                    mainFlag = true;
                    ComboBoxDayTestEmition.setEnabled(true);
                }
                break;
            }
            case 11 -> {
                if(ComboBoxChecking(ComboBoxDayTestEmition) || ComboBoxYearTestEmition.getSelectedItem().toString() == "-"){
                    mainFlag = true;
                    AddBtnTestePacient.setEnabled(true);
                }
                break;
            }
            case 12 -> {
                if(ComboBoxChecking(ComboBoxForPrefix)){
                    mainFlag = true;
                    TextFieldForPhoneNumber.setEnabled(true);
                }
                break;
            }
            // year emition date
            case 13 -> {
                if(ComboBoxChecking(ComboBoxForYearEmitionDate)){
                    mainFlag = true;
                    ComboBoxForMonthEmitionDate.setEnabled(true);
                }
                break;
            }
            case 14 -> {
                if(ComboBoxChecking(ComboBoxForMonthEmitionDate)){
                    mainFlag = true;
                    ComboBoxForDayEmitionDate.setEnabled(true);
                }
                break;
            }
            case 15 -> {
                if(ComboBoxChecking(ComboBoxForDayEmitionDate)){
                    mainFlag = true;
                    ComboBoxForYearExpirationDate.setEnabled(true);
                }
                break;
            }
            case 16 -> {
                if(ComboBoxChecking(ComboBoxForYearExpirationDate)){
                    mainFlag = true;
                    ComboBoxForMonthExpirationDate.setEnabled(true);
                }
                break;
            }
            case 17 -> {
                if(ComboBoxChecking(ComboBoxForMonthExpirationDate)){
                    mainFlag = true;
                    ComboBoxForDayExpirationDate.setEnabled(true);
                }
                break;
            }
            case 18 -> {
                if(ComboBoxChecking(ComboBoxForDayExpirationDate)){
                    mainFlag = true;
                    ComboBoxForPrescriptionType.setEnabled(false);
                }
                break;
            }
            case 19 -> {
                if(ComboBoxChecking(ComboBoxForMedicamentType)){
                    mainFlag = true;
                    AddBtnMedicament.setEnabled(true);
                }
                break;
            }
            case 20 -> {
                if(ComboBoxChecking(ComboBoxForMedicamentSelection)){
                    mainFlag = true;
                    ComboBoxForQuantity.setEnabled(true);
                }
            }
            default -> throw  new Error("Out of index acces/ ERROR");
        }
        if(mainFlag == false)
            return false;
        return true;
    }
    
        private void LoadIntoArrays(List<JTextField> textFields , List<JComboBox<String>> dateComboBoxes ,List<JTable> TableList){
            // doctor
            textFields.add(TextFieldForDoctorCUI); //0
            textFields.add(TextFieldForDoctorName);//1
            textFields.add(TextFieldForDoctorPrename);//2
            // pacient
            textFields.add(TextFieldForCNP);//3
            textFields.add(TextFieldForNumePacient);//4
            textFields.add(TextFieldForPrenumePacient); // 5
            textFields.add(TextFieldForPacientOras);//6
            // teste laborator
            textFields.add(TextFieldForMinVal);//7
            textFields.add(TextFieldForMaxVal);//8
            textFields.add(TextFieldForNumeTL);//9
            // teste pacienti
            textFields.add(TextFieldForCNPTesteLaborator); // 10
            textFields.add(TextFieldLabTest);//11
            textFields.add(TextFieldForTestValue);//12
            // doctor type
            textFields.add(TextFieldForDoctorType); // 13
            // cabinets
            textFields.add(TextFieldCabinetName); // 14
            textFields.add(TextFieldForPostalCode); // 15
            textFields.add(TextFieldForCabinetCity); // 16
            textFields.add(TextFieldForStreet); // 17
            textFields.add(TextFIeldForStreetNumber); // 18
            textFields.add(TextFieldForPhoneNumber); //19
            textFields.add(TextFieldForCabinetCUI);//20
            // retete
            textFields.add(TextFieldForRetetaCNP);//21
            textFields.add(TextFieldForRetetaCUI);//22
            // medicaments
            textFields.add(TextFieldForMedicamentName);
            // retete cu medicamentele
            textFields.add(TextFieldForPrescriptionID);
            // doctor
            dateComboBoxes.add(ComboBoxForYear);//0
            dateComboBoxes.add(ComboBoxForMonth);//1
            dateComboBoxes.add(ComboBoxForDay);//2
            dateComboBoxes.add(ComboBoxForDoctorType);//3
            // pacient
            dateComboBoxes.add(ComboBoxForYearPacient);//4
            dateComboBoxes.add(ComboBoxForMonthPacient);//5
            dateComboBoxes.add(ComboBoxForDayPacient);//6
            // teste laborator
            dateComboBoxes.add(ComboBoxForAccuaracyValues);//7
            // teste pacient
            dateComboBoxes.add(ComboBoxForResults);//8
            dateComboBoxes.add(ComboBoxYearTestEmition);//9
            dateComboBoxes.add(ComboBoxMonthTestEmition);//10
            dateComboBoxes.add(ComboBoxDayTestEmition);//11
            // cabinete doctori
            dateComboBoxes.add(ComboBoxForPrefix);//12
            // retete
            dateComboBoxes.add(ComboBoxForYearEmitionDate);//13
            dateComboBoxes.add(ComboBoxForMonthEmitionDate);//14
            dateComboBoxes.add(ComboBoxForDayEmitionDate);//15
            dateComboBoxes.add(ComboBoxForYearExpirationDate);//16
            dateComboBoxes.add(ComboBoxForMonthExpirationDate);//17
            dateComboBoxes.add(ComboBoxForDayExpirationDate);//18
            // medicaments
            dateComboBoxes.add(ComboBoxForMedicamentType);//19
            // retete cu medicamentele
            dateComboBoxes.add(ComboBoxForMedicamentSelection);//20
            //
            TableList.add(DoctorsTable);
            TableList.add(PacientsTable);
            TableList.add(TesteLaboratorTable);
            TableList.add(TestePacientiTable);
            TableList.add(DoctorTypeTable);
            TableList.add(CabinetsTable);
            TableList.add(ReteteTable);
            TableList.add(MedicamentsTable);
            TableList.add(ReteteCuMedicamenteleTable);
            TableList.add(VIEWTabel_FOR_CabineteDoctori);
            TableList.add(VIEWTable_RETETE);
        }
    
    private void LoadIntoMap(HashMap<Integer, String> DoctorsTypeMap ){
        List<TipDoctori> allDoctorTypes = CRUD_DoctorType.findAll();
        for(TipDoctori tipDoctoriIT : allDoctorTypes){
            DoctorsTypeMap.put(tipDoctoriIT.getTipDoctorId(), tipDoctoriIT.getNumeSpecializare());
        }
    }
    
    private void LoadIntoMedicamentsMao(HashMap<Integer ,String> MedicamentsMap){
        List<Medicamente> allMedicamenteList = CRUD_Medicamente.findAll();
        for(Medicamente medicamentIT : allMedicamenteList){
            MedicamentsMap.put(medicamentIT.getMedicamentId(), medicamentIT.getMedicamentNume());
        }
    }
    
    private void LoadIntoComboBoxes(/*for doctor panel*/JComboBox<String> ComboBoxForYear , JComboBox<String> ComboBoxForMonth,JComboBox<String> ComboBoxForDay , JComboBox<String> ComboBoxForDoctorTypes
                                    /*for pacient panel*/,JComboBox<String> ComboBoxForYearPacient,JComboBox<String> ComboBoxForMonthPacient,JComboBox<String> ComboBoxForDayPacient , JComboBox<String> ComboBoxForAssurance,
                                    /*for teste laborator panel*/JComboBox<String> ComboBoxForAccuaracy,
                                    /*for teste pacienti panel */JComboBox<String> ComboBoxForResults,JComboBox<String> ComboBoxForYearEmitionTest, JComboBox<String> ComboBoxForMonthEmitionTest,
                                    JComboBox<String> ComboBoxForDayEmitionTest,
                                    /*for cabinete doctori panel */ JComboBox<String> ComboBoxForPrefix,
                                    /*for retete panel*/ JComboBox<String> ComboBoxYearEmitionDate, JComboBox<String> ComboBoxMonthEmitionDate , JComboBox<String> ComboBoxDayEmitionDate,
                                    JComboBox<String> ComboBoxYearExpirationDate,JComboBox<String> ComboBoxMonthExpirationDate,JComboBox<String> ComboBoxDayExpirationDate,
                                    JComboBox<String> ComboBoxForPrescriptionType,
                                    /*for medicaments panel*/JComboBox<String> ComboBoxForMedicamentWeight , JComboBox<String> ComboBoxForMedicamentType,
                                    /*for retete cu medicamentele panel*/ JComboBox<String> ComboBoxForMedicamentName , JComboBox<Integer> ComboBoxForMedicamentQuantity,
                                    /* for join commands  on pacients panel */ JComboBox<String> JoinCommands , JComboBox<String> MedicamentBoxForJoinQUERY , JComboBox<String> TestNameBoxForJoinQUERY,
                                    /* for group by commands on doctor panel*/ JComboBox<String> GroupByCommandBox , JComboBox<String> GroupByCriteriaBox){
        LocalDate currentDate = LocalDate.now();
        Integer currentYear = currentDate.getYear();
        Integer currentDay = currentDate.getDayOfMonth();
        Integer currentMonth = currentDate.getMonthValue();
        // for doctor
        ComboBoxForYear.addItem("-");
        ComboBoxForMonth.addItem("-");
        ComboBoxForDay.addItem("-");
        ComboBoxForDoctorTypes.addItem("-");
        // for pacient
        ComboBoxForYearPacient.addItem("-");
        ComboBoxForMonthPacient.addItem("-");
        ComboBoxForDayPacient.addItem("-");
        ComboBoxForAssurance.addItem("-");
        ComboBoxForAssurance.addItem("Da");
        ComboBoxForAssurance.addItem("Nu");
        //for teste pacient
        ComboBoxForYearEmitionTest.addItem("-");
        ComboBoxForMonthEmitionTest.addItem("-");
        ComboBoxForDayEmitionTest.addItem("-");
        // for retete
        ComboBoxYearEmitionDate.addItem("-");
        ComboBoxYearExpirationDate.addItem("-");
        ComboBoxMonthEmitionDate.addItem("-");
        ComboBoxMonthExpirationDate.addItem("-");
        ComboBoxDayEmitionDate.addItem("-");
        ComboBoxDayExpirationDate.addItem("-");
        for(Integer i = 1900 ; i <= currentYear ; i++){
            ComboBoxForYear.addItem(i.toString());
            ComboBoxForYearPacient.addItem(i.toString());
            ComboBoxForYearEmitionTest.addItem(i.toString());
            ComboBoxYearEmitionDate.addItem(i.toString());
            ComboBoxYearExpirationDate.addItem(i.toString());
        }
        for(Integer i = 1 ; i <= 12 ; i++){
            ComboBoxForMonth.addItem(i.toString());
            ComboBoxForMonthPacient.addItem(i.toString());
            ComboBoxForMonthEmitionTest.addItem(i.toString());
            ComboBoxMonthEmitionDate.addItem(i.toString());
            ComboBoxMonthExpirationDate.addItem(i.toString());
        } 
        for(Integer i = 1 ; i <= 31 ; i ++){
            ComboBoxForDay.addItem(i.toString());
            ComboBoxForDayPacient.addItem(i.toString());
            ComboBoxForDayEmitionTest.addItem(i.toString());
            ComboBoxDayEmitionDate.addItem(i.toString());
            ComboBoxDayExpirationDate.addItem(i.toString());
        }
        
        for(Map.Entry<Integer , String> iterator : DoctorsTypeMap.entrySet()){
            ComboBoxForDoctorTypes.addItem(iterator.getValue());
        }
        // for doctor
        ComboBoxForDay.setSelectedItem("-");
        ComboBoxForMonth.setSelectedItem("-");
        ComboBoxForYear.setSelectedItem("-");
        ComboBoxForDoctorTypes.setSelectedItem("-");
        // for pacient
        ComboBoxForDayPacient.setSelectedItem("-");
        ComboBoxForMonthPacient.setSelectedItem("-");
        ComboBoxForYearPacient.setSelectedItem("-");
        ComboBoxForAssurance.setSelectedItem("-");
        // for teste laborator
        ComboBoxForAccuaracy.addItem("-");
        ComboBoxForAccuaracy.setSelectedItem("-");
        for(Integer i = 1 ; i <= 100 ; i++){
            ComboBoxForAccuaracy.addItem(i.toString());
        }
        // for teste pacienti
        ComboBoxForYearEmitionTest.setSelectedItem("-");
        ComboBoxForMonthEmitionTest.setSelectedItem("-");
        ComboBoxForDayEmitionTest.setSelectedItem("-"); 
        ComboBoxForResults.addItem("-");
        ComboBoxForResults.addItem("bune");
        ComboBoxForResults.addItem("proaste");
        ComboBoxForResults.addItem("refacere");
        ComboBoxForResults.addItem("pozitiv");
        ComboBoxForResults.addItem("negativ");
        // for cabinete doctori
        ComboBoxForPrefix.addItem("+40");
        // for retete
        ComboBoxForPrescriptionType.addItem("permanent");
        ComboBoxForPrescriptionType.addItem("Not permanent");
        ComboBoxYearEmitionDate.setSelectedItem("1900");
        ComboBoxYearExpirationDate.setSelectedItem("1900");
        ComboBoxMonthEmitionDate.setSelectedItem("1");
        ComboBoxMonthExpirationDate.setSelectedItem("1");
        ComboBoxDayEmitionDate.setSelectedItem("1");
        ComboBoxDayExpirationDate.setSelectedItem("1");
        // for medicaments
        ComboBoxForMedicamentWeight.addItem("-");
        for(Integer i = 75 ; i <= 9000 ; i += 75){
            ComboBoxForMedicamentWeight.addItem(i.toString());
        }
        ComboBoxForMedicamentType.addItem("comprimat");
        ComboBoxForMedicamentType.addItem("capsula");
        ComboBoxForMedicamentType.addItem("drajeu");
        ComboBoxForMedicamentType.addItem("dizolvabil");
        ComboBoxForMedicamentType.addItem("sirop");
        ComboBoxForMedicamentType.addItem("picaturi");
        // for retete cu medicamentele
        ComboBoxForMedicamentName.addItem("-");
        // ----- for join query
        MedicamentBoxForJoinQUERY.addItem("-");
        MedicamentBoxForJoinQUERY.setSelectedItem("-");
        // ----
        for(Map.Entry<Integer , String> entry : MedicamentsTypeMap.entrySet()){
            ComboBoxForMedicamentName.addItem(entry.getValue());
            // for join commands
            MedicamentBoxForJoinQUERY.addItem(entry.getValue());
        }
        ComboBoxForMedicamentQuantity.addItem(0);
        for(Integer i = 1 ; i <= 100 ; i++){
            ComboBoxForMedicamentQuantity.addItem(i);
        }
        
        // for join commands
        JoinCommands.addItem("-");
        JoinCommands.setSelectedItem("-");
        JoinCommands.addItem("Pacientii care au pe reteta medicamentul (1) si testul de laborator (2) facut");
        TestNameBoxForJoinQUERY.addItem("-");
        List<TesteLaborator> allTesteList = CRUD_TesteLaborator.findAll();
        for(TesteLaborator IT : allTesteList){
            TestNameBoxForJoinQUERY.addItem(IT.getNumeTest());
        }
        // for group by commands
        GroupByCommandBox.addItem("-");
        GroupByCommandBox.setSelectedItem("-");
        GroupByCommandBox.addItem("Doctorii care au mai multe retete decat (1)");
        GroupByCriteriaBox.addItem("-");
        GroupByCriteriaBox.setSelectedItem("-");
        for(Integer i = 1 ; i <= 50 ; i++){
            GroupByCriteriaBox.addItem(i.toString());
        }

    } 
    private void LoadDataIntoTables(Integer tableIndex){
        switch (tableIndex) {
            case 0:
                DefaultTableModel doctorsTableModel = (DefaultTableModel) this.DoctorsTable.getModel();
                List<Doctori> allDoctorsList = CRUD_Doctor.findAll();
                for(Doctori docIt : allDoctorsList){
                    doctorsTableModel.addRow(
                      new Object[]{docIt.getDoctorCUI() , DoctorsTypeMap.get(docIt.getTipDoctor().getTipDoctorId()) 
                                 , docIt.getDoctorNume() , docIt.getDoctorPrenume() , docIt.getDoctorDataNastere()}
                    );
                }
                break;
            case 1:
                DefaultTableModel pacientsTableModel = (DefaultTableModel) this.PacientsTable.getModel();
                List<Pacienti> allPacientsList = CRUD_Pacienti.findAll();
                for(Pacienti pacientiIT : allPacientsList){
                    pacientsTableModel.addRow(
                       new Object[]{pacientiIT.getPacientCnp() , pacientiIT.getPacientDataNastere() , pacientiIT.getPacientOrasNastere(),
                                    pacientiIT.getPacientNume() , pacientiIT.getPacientPrenume() , pacientiIT.getPacientPolitaMedicala()}
                    );
                }
                break;
            case 2:
                DefaultTableModel testeLaboratorTableModel = (DefaultTableModel) this.TesteLaboratorTable.getModel();
                List<TesteLaborator> allTesteLaboratorList = CRUD_TesteLaborator.findAll();
                for(TesteLaborator testeIT : allTesteLaboratorList){
                    testeLaboratorTableModel.addRow(
                       new Object[]{testeIT.getIdTest() , testeIT.getNumeTest() , testeIT.getValoareMinima() , 
                                    testeIT.getValoareMaxima() , testeIT.getAcuaratete()}
                    );
                }
                break;
            case 3:
                DefaultTableModel testePacientiTableModel = (DefaultTableModel) this.TestePacientiTable.getModel();
                List<TestePacienti> allTestePacientiList = CRUD_TestePacienti.findAll();
                for(TestePacienti testeIT : allTestePacientiList){
                    testePacientiTableModel.addRow(
                       new Object[]{testeIT.getPacientiTestId() , testeIT.getPacienti().getPacientCnp() , testeIT.getTesteLaborator().getNumeTest(),
                                    testeIT.getRezultate() , testeIT.getValoareTest() , testeIT.getDataEmitere()
                       }
                    );
                }
                break;
            case 4:
                DefaultTableModel doctorTypeModel = (DefaultTableModel) this.DoctorTypeTable.getModel();
                List<TipDoctori> allDoctorTypes = CRUD_DoctorType.findAll();
                for(TipDoctori tipIT : allDoctorTypes){
                    doctorTypeModel.addRow(
                        new Object[]{tipIT.getTipDoctorId() , tipIT.getNumeSpecializare()}
                    );
                }
                break;
            case 5:
                DefaultTableModel doctorCabinetTypeModel = (DefaultTableModel) this.CabinetsTable.getModel();
                List<CabineteDoctori> allDoctorCabinets = CRUD_DoctorCabinets.findAll();
                for(CabineteDoctori cabineteIT : allDoctorCabinets){
                    doctorCabinetTypeModel.addRow(
                        new Object[]{cabineteIT.getCabinetId() , cabineteIT.getDoctori().getDoctorCUI() ,
                                    cabineteIT.getCabinetNume() , cabineteIT.getCabinetCodPostal() , 
                                    cabineteIT.getCabinetOras() , cabineteIT.getCabinetStrada(),
                                    cabineteIT.getCabinetNumarStrada() , cabineteIT.getCabinetNrTelefon()}
                    );
                }
                break;
            case 6:
                DefaultTableModel reteteModel = (DefaultTableModel) this.ReteteTable.getModel();
                List<Retete> allReteteList = CRUD_Retete.findAll();
                for(Retete reteteIT : allReteteList){
                    reteteModel.addRow(
                        new Object[]{reteteIT.getRetetaId(),reteteIT.getPacientRetete().getPacientCnp() , reteteIT.getDoctorRetete().getDoctorCUI(),
                                     reteteIT.getRetetaDataEmitere() , reteteIT.getRetetaDataExpirare() , reteteIT.getTipReteta()}
                    );
                }
                break;
            case 7:
                DefaultTableModel medicamentsModel = (DefaultTableModel) this.MedicamentsTable.getModel();
                List<Medicamente> allMedicamenteList = CRUD_Medicamente.findAll();
                for(Medicamente medicamentIT : allMedicamenteList){
                    medicamentsModel.addRow(
                        new Object[]{medicamentIT.getMedicamentId() , medicamentIT.getMedicamentNume() 
                                    , medicamentIT.getMedicamentGramajMg() , medicamentIT.getTipMedicament()}
                    );
                }
                break;
            case 8: 
                DefaultTableModel reteteCuMedicamenteleTableModel = (DefaultTableModel) this.ReteteCuMedicamenteleTable.getModel();
                List<ReteteCuMedicamentele> allReteteCuMedicamenteleList = CRUD_reteteCuMedicamentele.findAll();
                for(ReteteCuMedicamentele IT : allReteteCuMedicamenteleList){
                    reteteCuMedicamenteleTableModel.addRow(
                        new Object[] {IT.getRetetaCuMedicamenteleId() , IT.getReteta().getRetetaId() , 
                            MedicamentsTypeMap.get(IT.getMedicament().getMedicamentId()) , IT.getCantitate()}
                    );
                }
                break;
            case 9:
                DefaultTableModel VIEWdoctorCabinetTypeModel = (DefaultTableModel) this.VIEWTabel_FOR_CabineteDoctori.getModel();
                List<CabineteDoctoriVIEW> VIEW_allDoctorCabinets = CRUD_cabineteDoctoriView.findAll();
                for(CabineteDoctoriVIEW cabineteIT : VIEW_allDoctorCabinets){
                    VIEWdoctorCabinetTypeModel.addRow(
                        new Object[]{cabineteIT.getCabinetID() , cabineteIT.getDoctorCUI() ,
                                    cabineteIT.getCabinetNume() , cabineteIT.getCodPostal() , 
                                    cabineteIT.getCabinetOras() , cabineteIT.getCabinetNrStrada()
                                    }
                    );
                }
                break;
            case 10:
                DefaultTableModel VIEWReteteModel = (DefaultTableModel) this.VIEWTable_RETETE.getModel();
                List<ReteteVIEW> allReteteVIEW = CRUD_Retete_VIEW.findAll();
                for(ReteteVIEW IT : allReteteVIEW){
                    VIEWReteteModel.addRow(new Object[]{IT.getPacientCnp() , IT.getNrRetete()});
                }
                break;
            default:
                throw new Error("WRONG INDEX ON TABLES !!!!!");
        }
    }
    
    private void disablingDoctorPanelElements(){
        TextFieldForDoctorCUI.setEnabled(false);
        TextFieldForDoctorName.setEnabled(false);
        TextFieldForDoctorPrename.setEnabled(false);
        ComboBoxForDay.setEnabled(false);
        ComboBoxForMonth.setEnabled(false);
        ComboBoxForYear.setEnabled(false);
        ComboBoxForDoctorType.setEnabled(false);
        LabelForCUI1.setVisible(false);
        LabelForCUI2.setVisible(false);
        CHECKLabelForDoctorType.setVisible(false);
        AddBtn.setEnabled(false);
        UpdateBtn.setEnabled(false);
        DeleteBtn.setEnabled(false);
    }
    private void enablingDoctorPanelElements(){
        TextFieldForDoctorCUI.setEnabled(true);
        TextFieldForDoctorName.setEnabled(true);
        TextFieldForDoctorPrename.setEnabled(true);
        ComboBoxForDay.setEnabled(true);
        ComboBoxForMonth.setEnabled(true);
        ComboBoxForYear.setEnabled(true);
        ComboBoxForDoctorType.setEnabled(true);
        LabelForCUI1.setVisible(false);
        LabelForCUI2.setVisible(false);
        CHECKLabelForDoctorType.setVisible(false);
        UpdateBtn.setEnabled(true);
        DeleteBtn.setEnabled(true);
        AddBtn.setEnabled(false);
    }
    
    private void NoBordersForDoctorsPanel(){
        TextFieldForDoctorCUI.setBorder(classicBorder);
        TextFieldForDoctorName.setBorder(classicBorder);
        TextFieldForDoctorPrename.setBorder(classicBorder);
        ComboBoxForDay.setBorder(classicComboBorder);
        ComboBoxForDoctorType.setBorder(classicComboBorder);
        ComboBoxForMonth.setBorder(classicComboBorder);
        ComboBoxForYear.setBorder(classicComboBorder);
        
    }
    
    private void clearingDoctorsElements(){
        TextFieldForDoctorCUI.setText("");
        TextFieldForDoctorName.setText("");
        TextFieldForDoctorPrename.setText("");
        ComboBoxForDay.setSelectedItem("-");
        ComboBoxForDoctorType.setSelectedItem("-");
        ComboBoxForMonth.setSelectedItem("-");
        ComboBoxForYear.setSelectedItem("-");
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        LoadIntoMap(DoctorsTypeMap);
        LoadIntoMedicamentsMao(MedicamentsTypeMap);
        disablingDoctorPanelElements();
        disablingPacientsPanelElements();
        disablingTesteLaboratorCRUDPanelElements();
        disablingTestePacientPanelElement();
        disableElementsForTypePanel();
        disablingCabinetPanelElements();    
        disableRetetePanelElements();
        disablingMedicamentsPanelElements();
        disablinReteteCuMedicamentelePanelElements();
        TextFieldForPrefixName.setEnabled(false);
        TextFieldForPrefixName.setText("C.M.I.");
        LoadIntoArrays(TextFields, dateComboBoxes, TableList);
        LoadIntoComboBoxes(ComboBoxForYear, ComboBoxForMonth, ComboBoxForDay , ComboBoxForDoctorType 
                         , ComboBoxForYearPacient , ComboBoxForMonthPacient , ComboBoxForDayPacient , ComboBoxForAsigurare,
                           ComboBoxForAccuaracyValues , ComboBoxForResults , ComboBoxYearTestEmition , ComboBoxMonthTestEmition , ComboBoxDayTestEmition , ComboBoxForPrefix,
                           ComboBoxForYearEmitionDate , ComboBoxForMonthEmitionDate , ComboBoxForDayEmitionDate , ComboBoxForYearExpirationDate , ComboBoxForMonthExpirationDate , ComboBoxForDayExpirationDate
                           ,ComboBoxForPrescriptionType , ComboBoxForMedicamentWeight , ComboBoxForMedicamentType , ComboBoxForMedicamentSelection , ComboBoxForQuantity,
                           JoinCommands , MedicamentBoxForJoinQUERY, TestNameForJoinQUERY , ComboBoxForDoctorGROUPBY , BoxForGroupByOptions);
        for(int i = 0 ; i < TableList.size() ; i++){
            LoadDataIntoTables(i);
        }
    }//GEN-LAST:event_formWindowOpened
    
    
    private void DoctorsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DoctorsTableMouseClicked
        // TODO add your handling code here:
        int row = DoctorsTable.getSelectedRow();
        if(row != -1){
            DefaultTableModel docModel = (DefaultTableModel) DoctorsTable.getModel();
            TextFieldForDoctorCUI.setText(docModel.getValueAt(row, 0).toString());
            ComboBoxForDoctorType.setSelectedItem(docModel.getValueAt(row, 1).toString());
            TextFieldForDoctorName.setText(docModel.getValueAt(row, 2).toString());
            TextFieldForDoctorPrename.setText(docModel.getValueAt(row, 3).toString());
            Object birthDate = docModel.getValueAt(row, 4);
            if(birthDate != null){
                String strBirthDate = birthDate.toString();
                String month = strBirthDate.substring(5, 7);
                String day = strBirthDate.substring(8, 10);
                if(month.startsWith("0") && day.startsWith("0")){
                     month = month.substring(1);
                     day = day.substring(1);
                }else if(!month.startsWith("0") && day.startsWith("0")){
                     day = day.substring(1);
                }else if(month.startsWith("0") && !day.startsWith("0")){
                    month = month.substring(1);
                }
                ComboBoxForYear.setSelectedItem(strBirthDate.substring(0, 4));
                ComboBoxForMonth.setSelectedItem(month);
                ComboBoxForDay.setSelectedItem(day);
            }else{
                ComboBoxForYear.setSelectedItem("-");
                ComboBoxForMonth.setSelectedItem("-");
                ComboBoxForDay.setSelectedItem("-");
            }
            TextFieldForDoctorCUI.setBorder(greenLine);
            TextFieldForDoctorName.setBorder(greenLine);
            TextFieldForDoctorPrename.setBorder(greenLine);
            ComboBoxForDoctorType.setBorder(greenLine);
            ComboBoxForYear.setBorder(greenLine);
            ComboBoxForMonth.setBorder(greenLine);
            ComboBoxForDay.setBorder(greenLine);
            enablingDoctorPanelElements();
        }else{
            JOptionPane.showMessageDialog(this, "Select a row please", "Try again", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DoctorsTableMouseClicked
    
    private void clearingPacientsPanel(){
        TextFieldForCNP.setText("");
        TextFieldForNumePacient.setText("");
        TextFieldForPrenumePacient.setText("");
        TextFieldForPacientOras.setText("");
        ComboBoxForAsigurare.setSelectedItem("-");
        ComboBoxForDayPacient.setSelectedItem("-");
        ComboBoxForMonthPacient.setSelectedItem("-");
        ComboBoxForYearPacient.setSelectedItem("-");
    }
    
    private void PacientiBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PacientiBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card3");
        DefaultTableModel pacientiModel = (DefaultTableModel) PacientsTable.getModel();
        pacientiModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(PacientsTable));
        disablingPacientsPanelElements();
        noBordersForPacientsPanelElements();
        clearingPacientsPanel();
        
    }//GEN-LAST:event_PacientiBtnMouseClicked

    private void DoctoriBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DoctoriBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card2");
        if (hasSwitchedToGroupedView) {
            DoctorsTable.setModel(oldModel);
            oldModel.setRowCount(0);
            LoadDataIntoTables(TableList.indexOf(DoctorsTable));
            clearingDoctorsElements();
            disablingDoctorPanelElements();
            NoBordersForDoctorsPanel();
            hasSwitchedToGroupedView = false;
        }
    }//GEN-LAST:event_DoctoriBtnMouseClicked

    private void ReteteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReteteBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card8");
        DefaultTableModel reteteModel = (DefaultTableModel) ReteteTable.getModel();
        reteteModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(ReteteTable));
        clearingRetetePanelElements();
        disableRetetePanelElements();
        NoBordersForRetetePanelElements();
    }//GEN-LAST:event_ReteteBtnMouseClicked

    private void MedicamenteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MedicamenteBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card9");
        DefaultTableModel medicamenteModel = (DefaultTableModel) MedicamentsTable.getModel();
        medicamenteModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(MedicamentsTable));
        clearingMedicamentElementsContents();
        disablingMedicamentsPanelElements();
        NoBordersForMedicamentsPanelElements();
    }//GEN-LAST:event_MedicamenteBtnMouseClicked

    private void ReteteCuMedicamenteleBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReteteCuMedicamenteleBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card10");
        DefaultTableModel reteteCuMedicamenteleModel = (DefaultTableModel) ReteteCuMedicamenteleTable.getModel();
        reteteCuMedicamenteleModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(ReteteCuMedicamenteleTable));
        clearReteteCuMedicamenteleFields();
        disablinReteteCuMedicamentelePanelElements();
        NoBordersForReteteCuMedicamentelePanel();
    }//GEN-LAST:event_ReteteCuMedicamenteleBtnMouseClicked

    private void TipDoctoriBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TipDoctoriBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card6");
        DefaultTableModel tipDoctoriModel = (DefaultTableModel) DoctorTypeTable.getModel();
        tipDoctoriModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(DoctorTypeTable));
        TextFieldForDoctorType.setText("");
        disableElementsForTypePanel();
        
    }//GEN-LAST:event_TipDoctoriBtnMouseClicked
    
    private void clearingCabineteDoctoriPanel(){
        TextFieldForCabinetCUI.setText("");
        TextFieldCabinetName.setText("");
        TextFieldForPostalCode.setText("");
        TextFieldForCabinetCity.setText("");
        TextFieldForStreet.setText("");
        TextFIeldForStreetNumber.setText("");
        TextFieldForPhoneNumber.setText("");
    }
    
    private void CabineteDoctoriBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CabineteDoctoriBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card7");
        DefaultTableModel cabinetsModel = (DefaultTableModel) CabinetsTable.getModel();
        cabinetsModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(CabinetsTable));
        disablingCabinetPanelElements();
        clearingCabineteDoctoriPanel();
        NoBordersForCabinetePanelElements();
    }//GEN-LAST:event_CabineteDoctoriBtnMouseClicked

    private void clearingTesteLaboratorPanel(){
        TextFieldForNumeTL.setText("");
        TextFieldForMinVal.setText("");
        TextFieldForMaxVal.setText("");
        ComboBoxForAccuaracyValues.setSelectedItem("-");
    }
    
    private void TesteLaboratorBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TesteLaboratorBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card4");
        DefaultTableModel testeLabModel = (DefaultTableModel) TesteLaboratorTable.getModel();
        testeLabModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(TesteLaboratorTable));
        disablingTesteLaboratorCRUDPanelElements();
        clearingTesteLaboratorPanel();
        noBorderForTesteLaboratorFields();
    }//GEN-LAST:event_TesteLaboratorBtnMouseClicked
    
    private void clearingTestePacientiPanel(){
        TextFieldForCNPTesteLaborator.setText("");
        TextFieldLabTest.setText("");
        TextFieldForTestValue.setText("");
        ComboBoxForResults.setSelectedItem("-");
        ComboBoxYearTestEmition.setSelectedItem("-");
        ComboBoxMonthTestEmition.setSelectedItem("-");
        ComboBoxDayTestEmition.setSelectedItem("-");
    }
    
    private void TestePacientiBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TestePacientiBtnMouseClicked
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card5");
        DefaultTableModel testePacientiModel = (DefaultTableModel) TestePacientiTable.getModel();
        testePacientiModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(TestePacientiTable));
        disablingTestePacientPanelElement();
        clearingTestePacientiPanel();
        NoBordersForTestePacienti();
    }//GEN-LAST:event_TestePacientiBtnMouseClicked
    /*                                   -------------------- PACIENTI PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    private void disablingPacientsPanelElements(){
        TextFieldForCNP.setEnabled(false);
        TextFieldForNumePacient.setEnabled(false);
        TextFieldForPrenumePacient.setEnabled(false);
        TextFieldForPacientOras.setEnabled(false);
        ComboBoxForAsigurare.setEnabled(false);
        ComboBoxForDayPacient.setEnabled(false);
        ComboBoxForMonthPacient.setEnabled(false);
        ComboBoxForYearPacient.setEnabled(false);
        AddPacientBtn.setEnabled(false);
        UpdateBtnForPacient.setEnabled(false);
        DeleteBtnForPacient.setEnabled(false);
    }
    
    private void enablingPacientsPanelElements(){
        TextFieldForCNP.setEnabled(true);
        TextFieldForNumePacient.setEnabled(true);
        TextFieldForPrenumePacient.setEnabled(true);
        TextFieldForPacientOras.setEnabled(true);
        ComboBoxForAsigurare.setEnabled(true);
        ComboBoxForDayPacient.setEnabled(true);
        ComboBoxForMonthPacient.setEnabled(true);
        ComboBoxForYearPacient.setEnabled(true);
        AddPacientBtn.setEnabled(true);
        UpdateBtnForPacient.setEnabled(true);
        DeleteBtnForPacient.setEnabled(true);
    }
    
    private void noBordersForPacientsPanelElements(){
        TextFieldForCNP.setBorder(classicBorder);
        TextFieldForNumePacient.setBorder(classicBorder);
        TextFieldForPrenumePacient.setBorder(classicBorder);
        TextFieldForPacientOras.setBorder(classicBorder);
        ComboBoxForDayPacient.setBorder(classicComboBorder);
        ComboBoxForMonthPacient.setBorder(classicComboBorder);
        ComboBoxForYearPacient.setBorder(classicComboBorder);
        JoinCommands.setBorder(classicComboBorder);
        MedicamentBoxForJoinQUERY.setBorder(classicComboBorder);
        
    }
    
    private void BirthDateAutoCompletion(JTextField TF_CNP){
        String CNP = TF_CNP.getText();
        if(CNP.startsWith("1") || CNP.startsWith("2")){
            String yearFromCNP = CNP.substring(1,3);
            String monthFromCNP = CNP.substring(3, 5);
            String dayFromCNP = CNP.substring(5, 7);
            String actualYear = "19" + yearFromCNP;
            if(monthFromCNP.startsWith("0")){
                monthFromCNP = monthFromCNP.substring(1);
            }
            if(dayFromCNP.startsWith("0")){
                dayFromCNP = dayFromCNP.substring(1);
            }
            ComboBoxForDayPacient.setSelectedItem(dayFromCNP);
            ComboBoxForMonthPacient.setSelectedItem(monthFromCNP);
            ComboBoxForYearPacient.setSelectedItem(actualYear);
        }else{
            String yearFromCNP = CNP.substring(1,3);
            String monthFromCNP = CNP.substring(3, 5);
            String dayFromCNP = CNP.substring(5, 7);
            String actualYear = "20" + yearFromCNP;
            if(monthFromCNP.startsWith("0")){
                monthFromCNP = monthFromCNP.substring(1);
            }
            if(dayFromCNP.startsWith("0")){
                dayFromCNP = dayFromCNP.substring(1);
            }
            ComboBoxForDayPacient.setSelectedItem(dayFromCNP);
            ComboBoxForMonthPacient.setSelectedItem(monthFromCNP);
            ComboBoxForYearPacient.setSelectedItem(actualYear);
        }
    }
    
    private void TextFieldForCNPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForCNPKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CNP = TextFields.indexOf(TextFieldForCNP);
        if(CheckCurrentTextFields(INDEX_OF_CNP)){
            CheckLabelForCNP.setVisible(false);
            CheckLabel2ForCNP.setVisible(false);
            BirthDateAutoCompletion(TextFieldForCNP);
        }else{
            CheckLabelForCNP.setVisible(true);
            CheckLabel2ForCNP.setVisible(true);
        }
    }//GEN-LAST:event_TextFieldForCNPKeyReleased

    private void TextFieldForCNPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForCNPMouseClicked
        // TODO add your handling code here:
        TextFieldForCNP.setEnabled(true);
    }//GEN-LAST:event_TextFieldForCNPMouseClicked

    private void TextFieldForNumePacientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForNumePacientKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_PACIENT_NAME = TextFields.indexOf(TextFieldForNumePacient);
        if(CheckCurrentTextFields(INDEX_OF_PACIENT_NAME)){
           TextFieldForNumePacient.setBorder(greenLine);
        }else{
           TextFieldForNumePacient.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForNumePacientKeyReleased

    private void TextFieldForPrenumePacientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForPrenumePacientKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_PACIENT_PRENAME = TextFields.indexOf(TextFieldForPrenumePacient);
        if(CheckCurrentTextFields(INDEX_OF_PACIENT_PRENAME)){
           TextFieldForPrenumePacient.setBorder(greenLine);
        }else{
           TextFieldForPrenumePacient.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForPrenumePacientKeyReleased

    private void AddPacientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPacientBtnActionPerformed
        // TODO add your handling code here:
        Pacienti newPacient = new Pacienti();
        Border CNPBorder = TextFieldForCNP.getBorder();
        Border NameBorder = TextFieldForNumePacient.getBorder();
        Border PrenameBorder = TextFieldForPrenumePacient.getBorder();
        Border OrasBorder = TextFieldForPacientOras.getBorder();
        if(((LineBorder)CNPBorder).getLineColor() == Color.green){
            String CNP = TextFieldForCNP.getText();
            Integer INDEX_OF_YEAR = dateComboBoxes.indexOf(ComboBoxForYearPacient);
            Integer INDEX_OF_MONTH = dateComboBoxes.indexOf(ComboBoxForMonthPacient);
            Integer INDEX_OF_DAY = dateComboBoxes.indexOf(ComboBoxForDayPacient);
            if(CheckCurrentComboBox(INDEX_OF_YEAR)){
                String year = ComboBoxForYearPacient.getSelectedItem().toString();
                if(CheckCurrentComboBox(INDEX_OF_MONTH)){
                    String month = ComboBoxForMonthPacient.getSelectedItem().toString();
                    if(CheckCurrentComboBox(INDEX_OF_DAY)){
                        String day = ComboBoxForDayPacient.getSelectedItem().toString();
                        String birthDate = null;
                            if(day.length() == 1 && month.length() == 1){
                                birthDate = year + "-" + "0" + month + "-" + "0" + day;
                            }else if(day.length() == 1 && month.length() == 2){
                                birthDate = year + "-"  + month + "-" + "0" +  day;
                            }else if(day.length() == 2 && month.length() == 1){
                                birthDate = year + "-" + "0" + month + "-"  +  day;
                            }else{
                                birthDate = year + "-"  + month + "-"  +  day; 
                            }
                        Date SQLDate = Date.valueOf(birthDate);
                        if(((LineBorder)NameBorder).getLineColor() == Color.green){
                            String name = TextFieldForNumePacient.getText();
                            if(((LineBorder)PrenameBorder).getLineColor() == Color.green){
                                String prename = TextFieldForPrenumePacient.getText();
                                String medicalPolicy = ComboBoxForAsigurare.getSelectedItem().toString();
                                if(medicalPolicy == "-"){
                                    medicalPolicy = null;
                                }
                                if(((LineBorder)OrasBorder).getLineColor() == Color.green){
                                    String city = TextFieldForPacientOras.getText();
                                    newPacient.setPacientCnp(CNP);
                                    newPacient.setPacientDataNastere(SQLDate);
                                    newPacient.setPacientNume(name);
                                    newPacient.setPacientPrenume(prename);
                                    newPacient.setPacientPolitaMedicala(medicalPolicy);
                                    newPacient.setPacientOrasNastere(city);
                                    System.out.println("newpacient birthdate " + newPacient.getPacientDataNastere());
                                    System.out.println("newpacient cnp " + newPacient.getPacientCnp());
                                    CRUD_Pacienti.save(newPacient);
                                    DefaultTableModel pacientsTableModel = (DefaultTableModel) this.PacientsTable.getModel();
                                    pacientsTableModel.addRow(new Object[]{newPacient.getPacientCnp(), newPacient.getPacientDataNastere(),
                                                                           newPacient.getPacientOrasNastere(),newPacient.getPacientNume(),
                                                                           newPacient.getPacientPrenume(),newPacient.getPacientPolitaMedicala()});
                                    disablingDoctorPanelElements();
                                    noBordersForPacientsPanelElements();
                                    pacientsTableModel.setRowCount(0);
                                    clearingPacientsPanel();
                                    LoadDataIntoTables(TableList.indexOf(PacientsTable));
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_AddPacientBtnActionPerformed

    private void DeleteBtnForPacientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnForPacientActionPerformed
        // TODO add your handling code here:
        DefaultTableModel pacientsModel = (DefaultTableModel) this.PacientsTable.getModel();
        int row = PacientsTable.getSelectedRow();
        String CNP = TextFieldForCNP.getText();
        Pacienti toBeDeleted = CRUD_Pacienti.findById(CNP);
        pacientsModel.removeRow(row);
        CRUD_Pacienti.delete(toBeDeleted);
        pacientsModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(PacientsTable));
        disablingPacientsPanelElements();
        noBordersForPacientsPanelElements();
        clearingPacientsPanel();
    }//GEN-LAST:event_DeleteBtnForPacientActionPerformed

    private void UpdateBtnForPacientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnForPacientActionPerformed
        // TODO add your handling code here:
        int row = PacientsTable.getSelectedRow();
        DefaultTableModel pacientsModel = (DefaultTableModel) PacientsTable.getModel();
        String oldCNP = pacientsModel.getValueAt(row, 0).toString();
        Pacienti newPacienti = new Pacienti();
        newPacienti.setPacientCnp(TextFieldForCNP.getText());
        newPacienti.setPacientNume(TextFieldForNumePacient.getText());
        newPacienti.setPacientPrenume(TextFieldForPrenumePacient.getText());
        newPacienti.setPacientOrasNastere(TextFieldForPacientOras.getText());
        String year = null , month = null , day = null , birthDate = null;
        year = ComboBoxForYearPacient.getSelectedItem().toString();
        month = ComboBoxForMonthPacient.getSelectedItem().toString();
        day = ComboBoxForDayPacient.getSelectedItem().toString();
        birthDate = year + "-" + month + "-" + day;
        Date SQLDate = Date.valueOf(birthDate);
        newPacienti.setPacientDataNastere(SQLDate);
        String medicalPolicyPatient = ComboBoxForAsigurare.getSelectedItem().toString();
        if(medicalPolicyPatient == "-"){
            medicalPolicyPatient = null;
        }
        newPacienti.setPacientPolitaMedicala(medicalPolicyPatient);
        CRUD_Pacienti.update(newPacienti, oldCNP);
        pacientsModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(PacientsTable));
        disablingPacientsPanelElements();
        noBordersForPacientsPanelElements();
        clearingPacientsPanel();
    }//GEN-LAST:event_UpdateBtnForPacientActionPerformed

    private void ClearBtnForPacientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnForPacientActionPerformed
        // TODO add your handling code here:
        String empty = "";
        TextFieldForCNP.setText(empty);
        TextFieldForNumePacient.setText(empty);
        TextFieldForPrenumePacient.setText(empty);
        TextFieldForPacientOras.setText(empty);
        ComboBoxForAsigurare.setSelectedItem("-");
        ComboBoxForYearPacient.setSelectedItem("-");
        ComboBoxForMonthPacient.setSelectedItem("-");
        ComboBoxForDayPacient.setSelectedItem("-");
        TextFieldForCNP.setBorder(redLine);
        TextFieldForNumePacient.setBorder(redLine);
        TextFieldForPrenumePacient.setBorder(redLine);
        TextFieldForPacientOras.setBorder(redLine);
        ComboBoxForAsigurare.setBorder(redLine);
        ComboBoxForDayPacient.setBorder(redLine);
        ComboBoxForMonthPacient.setBorder(redLine);
        ComboBoxForYearPacient.setBorder(redLine);
        CheckLabelForCNP.setVisible(true);
        CheckLabel2ForCNP.setVisible(true);
        disablingPacientsPanelElements();
        
    }//GEN-LAST:event_ClearBtnForPacientActionPerformed

    private void ComboBoxForYearPacientItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForYearPacientItemStateChanged
        // TODO add your handling code here:
        Integer ComboBoxForYearPacient_INDEX = dateComboBoxes.indexOf(ComboBoxForYearPacient);
        if(CheckCurrentComboBox(ComboBoxForYearPacient_INDEX)){
            ComboBoxForYearPacient.setBorder(greenLine);
        }else{
            ComboBoxForYearPacient.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForYearPacientItemStateChanged

    private void ComboBoxForMonthPacientItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForMonthPacientItemStateChanged
        // TODO add your handling code here:
        Integer ComboBoxForMonthPacient_INDEX = dateComboBoxes.indexOf(ComboBoxForMonthPacient);
        if(CheckCurrentComboBox(ComboBoxForMonthPacient_INDEX)){
            ComboBoxForMonthPacient.setBorder(greenLine);
        }else{
            ComboBoxForMonthPacient.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForMonthPacientItemStateChanged

    private void ComboBoxForDayPacientItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForDayPacientItemStateChanged
        // TODO add your handling code here:
        Integer ComboBoxForDayPacient_INDEX = dateComboBoxes.indexOf(ComboBoxForDayPacient);
        if(CheckCurrentComboBox(ComboBoxForDayPacient_INDEX)){
            ComboBoxForDayPacient.setBorder(greenLine);
        }else{
            ComboBoxForDayPacient.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForDayPacientItemStateChanged

    private void TextFieldForPacientOrasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForPacientOrasKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_PACIENT_CITY = TextFields.indexOf(TextFieldForPacientOras);
        if(CheckCurrentTextFields(INDEX_OF_PACIENT_CITY)){
           TextFieldForPacientOras.setBorder(greenLine);
        }else{
           TextFieldForPacientOras.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForPacientOrasKeyReleased

    private void PacientsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PacientsTableMouseClicked
        int row = PacientsTable.getSelectedRow();
        if(row != -1){
            DefaultTableModel pacientsTableModel = (DefaultTableModel) PacientsTable.getModel();
            TextFieldForCNP.setText(pacientsTableModel.getValueAt(row, 0).toString());
            String birthDate = pacientsTableModel.getValueAt(row, 1).toString();
            String month = birthDate.substring(5, 7);
            String day = birthDate.substring(8, 10);
            if(month.startsWith("0") && day.startsWith("0")){
                 month = month.substring(1);
                 day = day.substring(1);
            }else if(!month.startsWith("0") && day.startsWith("0")){
                 day = day.substring(1);
            }else if(month.startsWith("0") && !day.startsWith("0")){
                month = month.substring(1);
            }
            ComboBoxForYearPacient.setSelectedItem(birthDate.substring(0, 4));
            ComboBoxForMonthPacient.setSelectedItem(month);
            ComboBoxForDayPacient.setSelectedItem(day);
            TextFieldForPacientOras.setText(pacientsTableModel.getValueAt(row, 2).toString());
            TextFieldForNumePacient.setText(pacientsTableModel.getValueAt(row, 3).toString());
            TextFieldForPrenumePacient.setText(pacientsTableModel.getValueAt(row, 4).toString());
            Object policyOfPacient = pacientsTableModel.getValueAt(row, 5);
            if(policyOfPacient == null){
                ComboBoxForAsigurare.setSelectedItem("-");
            }else{
                String strPolicy = policyOfPacient.toString();
                ComboBoxForAsigurare.setSelectedItem(strPolicy);
            }
            TextFieldForCNP.setBorder(greenLine);
            TextFieldForNumePacient.setBorder(greenLine);
            TextFieldForPrenumePacient.setBorder(greenLine);
            TextFieldForPacientOras.setBorder(greenLine);
            ComboBoxForAsigurare.setBorder(greenLine);
            ComboBoxForDayPacient.setBorder(greenLine);
            ComboBoxForMonthPacient.setBorder(greenLine);
            ComboBoxForYearPacient.setBorder(greenLine);
            CheckLabelForCNP.setVisible(false);
            CheckLabel2ForCNP.setVisible(false);
            enablingPacientsPanelElements();
        }else{
            JOptionPane.showMessageDialog(this, "Select a row please", "Try again", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_PacientsTableMouseClicked
    /*                                   -------------------- PACIENTI PANEL ------------------------- 
                                            --------------------   END  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    /*                                   -------------------- TESTE LABORATOR PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
    private void disablingTesteLaboratorCRUDPanelElements(){
        TextFieldForNumeTL.setEnabled(false);
        TextFieldForMinVal.setEnabled(false);
        TextFieldForMaxVal.setEnabled(false);
        CheckLabelForMaxValue.setVisible(false);
        CheckLabelForMinValue.setVisible(false);
        ComboBoxForAccuaracyValues.setEnabled(false);
        AddBtnTL.setEnabled(false);
        UpdateBtnTL.setEnabled(false);
        DeleteBtnTL.setEnabled(false);
    }
    
    private void enablingTesteLaboratorCRUDPanelElements(){
        TextFieldForNumeTL.setEnabled(true);
        TextFieldForMinVal.setEnabled(true);
        TextFieldForMaxVal.setEnabled(true);
        CheckLabelForMaxValue.setVisible(true);
        CheckLabelForMinValue.setVisible(true);
        ComboBoxForAccuaracyValues.setEnabled(true);
        AddBtnTL.setEnabled(true);
        UpdateBtnTL.setEnabled(true);
        DeleteBtnTL.setEnabled(true);
    }
    
    private void noBorderForTesteLaboratorFields(){
        TextFieldForNumeTL.setBorder(classicBorder);
        TextFieldForMinVal.setBorder(classicBorder);
        TextFieldForMaxVal.setBorder(classicBorder);
        ComboBoxForAccuaracyValues.setBorder(classicComboBorder);
    }
    
    private void TextFieldForNumeTLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForNumeTLMouseClicked
        // TODO add your handling code here:
        TextFieldForNumeTL.setEnabled(true);
    }//GEN-LAST:event_TextFieldForNumeTLMouseClicked

    private void TextFieldForMinValKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForMinValKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_MINVAL = TextFields.indexOf(TextFieldForMinVal);
        if(CheckCurrentTextFields(INDEX_OF_MINVAL)){
            TextFieldForMinVal.setBorder(greenLine);
        }else{
            TextFieldForMinVal.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForMinValKeyReleased

    private void TextFieldForMaxValKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForMaxValKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_MAXVAL = TextFields.indexOf(TextFieldForMaxVal);
        if(CheckCurrentTextFields(INDEX_OF_MAXVAL)){
            TextFieldForMaxVal.setBorder(greenLine);
        }else{
            TextFieldForMaxVal.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForMaxValKeyReleased

    private void ComboBoxForAccuaracyValuesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForAccuaracyValuesItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_ACCUARACY = dateComboBoxes.indexOf(ComboBoxForAccuaracyValues);
        if(CheckCurrentComboBox(INDEX_OF_ACCUARACY)){
            ComboBoxForAccuaracyValues.setBorder(greenLine);
        }else{
            ComboBoxForAccuaracyValues.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForAccuaracyValuesItemStateChanged

    private void AddBtnTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnTLActionPerformed
        // TODO add your handling code here:
        TesteLaborator newTestLaborator = new TesteLaborator();
        LineBorder TF_NBorder = (LineBorder) TextFieldForNumeTL.getBorder();
        LineBorder TF_MinValBorder = (LineBorder) TextFieldForMinVal.getBorder();
        LineBorder TF_MaxValBorder = (LineBorder) TextFieldForMaxVal.getBorder();
        LineBorder ComboBox_AcccuaracyBorder = (LineBorder) ComboBoxForAccuaracyValues.getBorder();
        if(TF_NBorder.getLineColor() == Color.green){
            String name = TextFieldForNumeTL.getText();
            if(TF_MinValBorder.getLineColor() == Color.green){
                Integer minVal = Integer.parseInt(TextFieldForMinVal.getText());
                if(TF_MaxValBorder.getLineColor() == Color.green){
                    Integer maxVal = Integer.parseInt(TextFieldForMaxVal.getText());
                    if(minVal == 0 && maxVal == 0){
                        minVal = null;
                        maxVal = null;
                    }
                    if(ComboBox_AcccuaracyBorder.getLineColor() == Color.green){
                        String accuaracyFromBox = ComboBoxForAccuaracyValues.getSelectedItem().toString();
                        Double accuaracyValue = Double.parseDouble(accuaracyFromBox)/100;
                        BigDecimal accuaracy = BigDecimal.valueOf(accuaracyValue);
                        newTestLaborator.setNumeTest(name);
                        newTestLaborator.setValoareMaxima(maxVal);
                        newTestLaborator.setValoareMinima(minVal);
                        newTestLaborator.setAcuaratete(accuaracy);
                        CRUD_TesteLaborator.save(newTestLaborator);
                        disablingTesteLaboratorCRUDPanelElements();
                        noBorderForTesteLaboratorFields();
                        DefaultTableModel testeLabModel = (DefaultTableModel) TesteLaboratorTable.getModel();
                        testeLabModel.setRowCount(0);
                        LoadDataIntoTables(TableList.indexOf(TesteLaboratorTable));
                        clearingTesteLaboratorPanel();
                    }
                }
            }
        }
    }//GEN-LAST:event_AddBtnTLActionPerformed

    private void UpdateBtnTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnTLActionPerformed
        // TODO add your handling code here:
        DefaultTableModel testeLaboratorTableModel = (DefaultTableModel) this.TesteLaboratorTable.getModel();
        int row = TesteLaboratorTable.getSelectedRow();
        String oldName = testeLaboratorTableModel.getValueAt(row, 1).toString();
        if(row != -1){
            TesteLaborator updatedTest = new TesteLaborator();
            updatedTest.setAcuaratete(BigDecimal.valueOf(Double.parseDouble(ComboBoxForAccuaracyValues.getSelectedItem().toString())/100));
            updatedTest.setNumeTest(TextFieldForNumeTL.getText());
            Integer minVal = Integer.parseInt(TextFieldForMaxVal.getText());
            Integer maxVal = Integer.parseInt(TextFieldForMinVal.getText());
            if(minVal != 0 & maxVal != 0){
                updatedTest.setValoareMaxima(Integer.parseInt(TextFieldForMaxVal.getText()));
                updatedTest.setValoareMinima(Integer.parseInt(TextFieldForMinVal.getText()));
            }else{
                updatedTest.setValoareMaxima(null);
                updatedTest.setValoareMinima(null);
            }
            CRUD_TesteLaborator.update(updatedTest, oldName);
            testeLaboratorTableModel.setRowCount(0);
            LoadDataIntoTables(TableList.indexOf(TesteLaboratorTable));
            disablingTesteLaboratorCRUDPanelElements();
            noBorderForTesteLaboratorFields();
            clearingTesteLaboratorPanel();
        }
    }//GEN-LAST:event_UpdateBtnTLActionPerformed

    private void DeleteBtnTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnTLActionPerformed
        // TODO add your handling code here:
        DefaultTableModel testeLaboratorTableModel = (DefaultTableModel) this.TesteLaboratorTable.getModel();
        int row = TesteLaboratorTable.getSelectedRow();
        String ID = testeLaboratorTableModel.getValueAt(row, 0).toString();
        Integer IDToBeDeleted = Integer.parseInt(ID);
        TesteLaborator toBeDeleted = CRUD_TesteLaborator.findById(IDToBeDeleted);
        if(toBeDeleted != null){
            CRUD_TesteLaborator.delete(toBeDeleted);
            testeLaboratorTableModel.removeRow(row);
            testeLaboratorTableModel.setRowCount(0);
            LoadDataIntoTables(TableList.indexOf(TesteLaboratorTable));
            disablingTesteLaboratorCRUDPanelElements();
            noBorderForTesteLaboratorFields();
            clearingTesteLaboratorPanel();
        }
    }//GEN-LAST:event_DeleteBtnTLActionPerformed

    private void ClearBtnTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnTLActionPerformed
        // TODO add your handling code here:
        String empty = "";
        TextFieldForNumeTL.setText(empty);
        TextFieldForMinVal.setText(empty);
        TextFieldForMaxVal.setText(empty);
        ComboBoxForAccuaracyValues.setSelectedItem("-");
        disablingTesteLaboratorCRUDPanelElements();
        noBorderForTesteLaboratorFields();
    }//GEN-LAST:event_ClearBtnTLActionPerformed

    private void TesteLaboratorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TesteLaboratorTableMouseClicked
        // TODO add your handling code here:
        int row = this.TesteLaboratorTable.getSelectedRow();
        DefaultTableModel testeLaboratorTableModel = (DefaultTableModel) this.TesteLaboratorTable.getModel();
        if(row != -1){
            TextFieldForNumeTL.setText(testeLaboratorTableModel.getValueAt(row, 1).toString());
            Object minVal = testeLaboratorTableModel.getValueAt(row, 2);
            Object maxVal = testeLaboratorTableModel.getValueAt(row, 3);
            if(minVal != null && maxVal != null){
                TextFieldForMinVal.setText(minVal.toString());
                TextFieldForMaxVal.setText(maxVal.toString());
            }else{
                TextFieldForMinVal.setText("0");
                TextFieldForMaxVal.setText("0");
            }
                Double accuaracyValue = Double.parseDouble(testeLaboratorTableModel.getValueAt(row, 4).toString()) * 100;
                Integer intAccuaracyValue = accuaracyValue.intValue();
            
            String itemForAccuracyComboBox = intAccuaracyValue.toString();
            ComboBoxForAccuaracyValues.setSelectedItem(itemForAccuracyComboBox);
            TextFieldForNumeTL.setBorder(greenLine);
            TextFieldForMinVal.setBorder(greenLine);
            TextFieldForMaxVal.setBorder(greenLine);
            ComboBoxForAccuaracyValues.setBorder(greenLine);
            enablingTesteLaboratorCRUDPanelElements();
            AddBtnTL.setEnabled(false);
            CheckLabelForMaxValue.setVisible(false);
            CheckLabelForMinValue.setVisible(false);
        }
    }//GEN-LAST:event_TesteLaboratorTableMouseClicked

    private void TextFieldForNumeTLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForNumeTLKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_NUME_TL = TextFields.indexOf(TextFieldForNumeTL);
        if(CheckCurrentTextFields(INDEX_OF_NUME_TL)){
            TextFieldForNumeTL.setBorder(greenLine);
        }else{
            TextFieldForNumeTL.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForNumeTLKeyReleased
    /*                                   -------------------- TESTE LABORATOR PANEL ------------------------- 
                                            --------------------   END  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    /*                                   -------------------- TESTE PACIENTI PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
    private void TextFieldForCNPTesteLaboratorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForCNPTesteLaboratorMouseClicked
        // TODO add your handling code here:
        TextFieldForCNPTesteLaborator.setEnabled(true);
    }//GEN-LAST:event_TextFieldForCNPTesteLaboratorMouseClicked

    private void TextFieldForCNPTesteLaboratorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForCNPTesteLaboratorKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CNP_TESTE_LABORATOR = TextFields.indexOf(TextFieldForCNPTesteLaborator);
        if(CheckCurrentTextFields(INDEX_OF_CNP_TESTE_LABORATOR)){
            TextFieldForCNPTesteLaborator.setBorder(greenLine);
        }else{
            TextFieldForCNPTesteLaborator.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForCNPTesteLaboratorKeyReleased

    private void TextFieldLabTestKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldLabTestKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_NAME_TESTE_LABORATOR = TextFields.indexOf(TextFieldLabTest);
        if(CheckCurrentTextFields(INDEX_OF_NAME_TESTE_LABORATOR)){
            TextFieldLabTest.setBorder(greenLine);
        }else{
            TextFieldLabTest.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldLabTestKeyReleased

    private void ComboBoxForResultsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForResultsItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_RESULTS = dateComboBoxes.indexOf(ComboBoxForResults);
        if(CheckCurrentComboBox(INDEX_OF_RESULTS)){
            ComboBoxForResults.setBorder(greenLine);
        }else{
            ComboBoxForResults.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForResultsItemStateChanged

    private void TextFieldForTestValueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForTestValueKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_VALUE = TextFields.indexOf(TextFieldForTestValue);
        if(CheckCurrentTextFields(INDEX_OF_VALUE)){
            TextFieldForTestValue.setBorder(greenLine);
        }else{
            TextFieldForTestValue.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForTestValueKeyReleased

    private void enablingTestePacientPanelElements(){
        TextFieldForCNPTesteLaborator.setEnabled(true);
        TextFieldLabTest.setEnabled(true);
        TextFieldForTestValue.setEnabled(true);
        ComboBoxForResults.setEnabled(true);
        ComboBoxYearTestEmition.setEnabled(true);
        ComboBoxMonthTestEmition.setEnabled(true);
        ComboBoxDayTestEmition.setEnabled(true);
        AddBtnTestePacient.setEnabled(true);
        DeleteBtnTestePacient.setEnabled(true);
        UpdateBtnTestePacient.setEnabled(true);
    }
    
    private void disablingTestePacientPanelElement(){
        TextFieldForCNPTesteLaborator.setEnabled(false);
        TextFieldLabTest.setEnabled(false);
        TextFieldForTestValue.setEnabled(false);
        ComboBoxForResults.setEnabled(false);
        ComboBoxYearTestEmition.setEnabled(false);
        ComboBoxMonthTestEmition.setEnabled(false);
        ComboBoxDayTestEmition.setEnabled(false);
        CheckLabelForCNPInPacienti.setVisible(false);
        CheckLabelForNumeTest.setVisible(false);
        AddBtnTestePacient.setEnabled(false);
        DeleteBtnTestePacient.setEnabled(false);
        UpdateBtnTestePacient.setEnabled(false);
    }
    
    private void NoBordersForTestePacienti(){
        TextFieldForCNPTesteLaborator.setBorder(classicBorder);
        TextFieldLabTest.setBorder(classicBorder);
        TextFieldForTestValue.setBorder(classicBorder);
        ComboBoxForResults.setBorder(classicComboBorder);
        ComboBoxYearTestEmition.setBorder(classicComboBorder);
        ComboBoxMonthTestEmition.setBorder(classicComboBorder);
        ComboBoxDayTestEmition.setBorder(classicComboBorder);
    }
    
    private void AddBtnTestePacientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnTestePacientActionPerformed
        // TODO add your handling code here:
        TestePacienti newTestePacienti = new TestePacienti();
        LineBorder TF_CNP_TEST_BORDER = (LineBorder) TextFieldForCNPTesteLaborator.getBorder();
        LineBorder TF_NUME_TEST_BORDER = (LineBorder) TextFieldLabTest.getBorder();
        LineBorder TF_TESTVALUE_TEST_BORDER = (LineBorder) TextFieldForTestValue.getBorder();
        if(TF_CNP_TEST_BORDER.getLineColor() == Color.green){
            String CNP = TextFieldForCNPTesteLaborator.getText();
            if(TF_NUME_TEST_BORDER.getLineColor() == Color.green){
                String nume_Test = TextFieldLabTest.getText();
                if(ComboBoxChecking(ComboBoxForResults)){
                    String result = ComboBoxForResults.getSelectedItem().toString();
                    if(TF_TESTVALUE_TEST_BORDER.getLineColor() == Color.green){
                        Integer testValue = null;
                        if(TextFieldForTestValue.getText() != "-"){
                            testValue = Integer.parseInt(TextFieldForTestValue.getText());
                        }
                        Integer INDEX_OF_YEAR = dateComboBoxes.indexOf(ComboBoxYearTestEmition);
                        Integer INDEX_OF_MONTH = dateComboBoxes.indexOf(ComboBoxMonthTestEmition);
                        Integer INDEX_OF_DAY = dateComboBoxes.indexOf(ComboBoxDayTestEmition);
                        if(CheckCurrentComboBox(INDEX_OF_YEAR)){
                            String year = ComboBoxYearTestEmition.getSelectedItem().toString();
                            if(CheckCurrentComboBox(INDEX_OF_MONTH)){
                                String month = ComboBoxMonthTestEmition.getSelectedItem().toString();
                                if(CheckCurrentComboBox(INDEX_OF_DAY)){
                                    String day = ComboBoxDayTestEmition.getSelectedItem().toString();
                                    String birthDate = null;
                                    if(year != "-" && month != "-" && day != "-"){
                                        if(day.length() == 1 && month.length() == 1){
                                            birthDate = year + "-" + "0" + month + "-" + "0" + day;
                                        }else if(day.length() == 1 && month.length() == 2){
                                            birthDate = year + "-"  + month + "-" + "0" +  day;
                                        }else if(day.length() == 2 && month.length() == 1){
                                            birthDate = year + "-" + "0" + month + "-"  +  day;
                                        }else{
                                            birthDate = year + "-"  + month + "-"  +  day; 
                                        }
                                    }
                                    Pacienti currentPacient = CRUD_Pacienti.findById(CNP);
                                    TesteLaborator currentTest = CRUD_TesteLaborator.findByNumeTest(nume_Test);
                                    Date SQLDate = null;
                                    if(birthDate != null){
                                        SQLDate = Date.valueOf(birthDate);
                                    }
                                    newTestePacienti.setDataEmitere(SQLDate);
                                    newTestePacienti.setRezultate(result);
                                    if(testValue == null){
                                        newTestePacienti.setValoareTest(null);
                                    }else{
                                        newTestePacienti.setValoareTest(BigDecimal.valueOf(testValue));
                                    }
                                    newTestePacienti.setPacienti(currentPacient);
                                    newTestePacienti.setTesteLaborator(currentTest);
                                    CRUD_TestePacienti.save(newTestePacienti);
                                    disablingTestePacientPanelElement();
                                    NoBordersForTestePacienti();
                                    DefaultTableModel testePacientiModel = (DefaultTableModel) this.TestePacientiTable.getModel();
                                    testePacientiModel.setRowCount(0);
                                    LoadDataIntoTables(TableList.indexOf(TestePacientiTable));
                                    clearingTestePacientiPanel();
                                }
                            }
                        }
                    }
    }//GEN-LAST:event_AddBtnTestePacientActionPerformed
            }
        }
    }
    private void DeleteBtnTestePacientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnTestePacientActionPerformed
        // TODO add your handling code here:
        int row = TestePacientiTable.getSelectedRow();
        DefaultTableModel testePacientiModel = (DefaultTableModel) this.TestePacientiTable.getModel();
        Integer ID_TEST = Integer.parseInt(testePacientiModel.getValueAt(row, 0).toString());
        TestePacienti toBeDeleted = CRUD_TestePacienti.findById(ID_TEST);
        CRUD_TestePacienti.remove(toBeDeleted);
        testePacientiModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(TestePacientiTable));
        disablingTestePacientPanelElement();
        NoBordersForTestePacienti();
        clearingTestePacientiPanel();
    }//GEN-LAST:event_DeleteBtnTestePacientActionPerformed

    private void UpdateBtnTestePacientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnTestePacientActionPerformed
        // TODO add your handling code here:
        LineBorder TF_CNP_TEST_BORDER = (LineBorder) TextFieldForCNPTesteLaborator.getBorder();
        LineBorder TF_NUME_TEST_BORDER = (LineBorder) TextFieldLabTest.getBorder();
        if(TF_CNP_TEST_BORDER.getLineColor() == Color.green && TF_NUME_TEST_BORDER.getLineColor() == Color.green){
            int row = TestePacientiTable.getSelectedRow();
            DefaultTableModel testePacientiModel = (DefaultTableModel) this.TestePacientiTable.getModel();
            Integer ID_TEST = Integer.parseInt(testePacientiModel.getValueAt(row, 0).toString());
            TestePacienti testPacient = CRUD_TestePacienti.findById(ID_TEST);
            TestePacienti updatedTest = new TestePacienti(testPacient);
            //---
            String year = null , month = null , day = null , birthDate = null;
            year = ComboBoxYearTestEmition.getSelectedItem().toString();
            month = ComboBoxMonthTestEmition.getSelectedItem().toString();
            day = ComboBoxDayTestEmition.getSelectedItem().toString();
            if(year != "-" && month != "-" && day != "-"){
                if(day.length() == 1 && month.length() == 1){
                    birthDate = year + "-" + "0" + month + "-" + "0" + day;
                }else if(day.length() == 1 && month.length() == 2){
                    birthDate = year + "-"  + month + "-" + "0" +  day;
                }else if(day.length() == 2 && month.length() == 1){
                    birthDate = year + "-" + "0" + month + "-"  +  day;
                }else{
                    birthDate = year + "-"  + month + "-"  +  day; 
                }
            }
            Date SQLDate = null;
            if(birthDate != null){
                SQLDate = Date.valueOf(birthDate);
            }
                    
            //--
            updatedTest.setDataEmitere(SQLDate);
            updatedTest.setRezultate(ComboBoxForResults.getSelectedItem().toString());
            if(TextFieldForTestValue.getText() != "-"){
                updatedTest.setValoareTest(BigDecimal.valueOf(Double.parseDouble(TextFieldForTestValue.getText())));
            }else{
                updatedTest.setValoareTest(null);
            }
            
            CRUD_TestePacienti.update(updatedTest, TextFieldForCNPTesteLaborator.getText(), TextFieldLabTest.getText(), ID_TEST);
            disablingTestePacientPanelElement();
            NoBordersForTestePacienti();
            testePacientiModel.setRowCount(0);
            LoadDataIntoTables(TableList.indexOf(TestePacientiTable));
            clearingTestePacientiPanel();
        }
        
    }//GEN-LAST:event_UpdateBtnTestePacientActionPerformed

    private void ClearBtnTestePacientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnTestePacientActionPerformed
        // TODO add your handling code here:
        String empty = "";
        TextFieldForCNPTesteLaborator.setText(empty);
        TextFieldLabTest.setText(empty);
        TextFieldForTestValue.setText(empty);
        ComboBoxForResults.setSelectedItem("-");
        ComboBoxYearTestEmition.setSelectedItem("-");
        ComboBoxMonthTestEmition.setSelectedItem("-");
        ComboBoxDayTestEmition.setSelectedItem("-");
        NoBordersForTestePacienti();
        disablingTestePacientPanelElement();
    }//GEN-LAST:event_ClearBtnTestePacientActionPerformed

    private void TestePacientiTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TestePacientiTableMouseClicked
        // TODO add your handling code here:
        int row = TestePacientiTable.getSelectedRow();
        DefaultTableModel testePacientiModel = (DefaultTableModel) TestePacientiTable.getModel();
        if(row != -1){
            TextFieldForCNPTesteLaborator.setText(testePacientiModel.getValueAt(row, 1).toString());
            TextFieldLabTest.setText(testePacientiModel.getValueAt(row, 2).toString());
            ComboBoxForResults.setSelectedItem(testePacientiModel.getValueAt(row, 3).toString());
            Object value = testePacientiModel.getValueAt(row, 4);
            if(value != null){
                String strValue  = value.toString();
                TextFieldForTestValue.setText(strValue);
            }else{
                TextFieldForTestValue.setText("-");
            }
            Object birthDate = testePacientiModel.getValueAt(row, 5);
            if(birthDate != null){
                String newBirthDate = birthDate.toString();
                String month = newBirthDate.substring(5, 7);
                String day = newBirthDate.substring(8, 10);

                if(month.startsWith("0") && day.startsWith("0")){
                     month = month.substring(1);
                     day = day.substring(1);
                }else if(!month.startsWith("0") && day.startsWith("0")){
                     day = day.substring(1);
                }else if(month.startsWith("0") && !day.startsWith("0")){
                    month = month.substring(1);
                }
                ComboBoxYearTestEmition.setSelectedItem(newBirthDate.substring(0, 4));
                ComboBoxMonthTestEmition.setSelectedItem(month);
                ComboBoxDayTestEmition.setSelectedItem(day);
            }else{
                ComboBoxYearTestEmition.setSelectedItem("-");
                ComboBoxMonthTestEmition.setSelectedItem("-");
                ComboBoxDayTestEmition.setSelectedItem("-");
            }
            // ---
            TextFieldForCNPTesteLaborator.setBorder(greenLine);
            TextFieldLabTest.setBorder(greenLine);
            TextFieldForTestValue.setBorder(greenLine);
            ComboBoxForResults.setBorder(greenLine);
            ComboBoxYearTestEmition.setBorder(greenLine);
            ComboBoxMonthTestEmition.setBorder(greenLine);
            ComboBoxDayTestEmition.setBorder(greenLine);
            enablingTestePacientPanelElements();
        }
    }//GEN-LAST:event_TestePacientiTableMouseClicked

    private void ComboBoxYearTestEmitionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxYearTestEmitionItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_YEAR = dateComboBoxes.indexOf(ComboBoxYearTestEmition);
        if(CheckCurrentComboBox(INDEX_OF_YEAR)){
            ComboBoxYearTestEmition.setBorder(greenLine);
        }else{
            ComboBoxYearTestEmition.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxYearTestEmitionItemStateChanged

    private void ComboBoxMonthTestEmitionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxMonthTestEmitionItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_MONTH = dateComboBoxes.indexOf(ComboBoxMonthTestEmition);
        if(CheckCurrentComboBox(INDEX_OF_MONTH)){
            ComboBoxMonthTestEmition.setBorder(greenLine);
        }else{
            ComboBoxMonthTestEmition.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxMonthTestEmitionItemStateChanged

    private void ComboBoxDayTestEmitionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxDayTestEmitionItemStateChanged
        // TODO add your handling code here:
         Integer INDEX_OF_DAY = dateComboBoxes.indexOf(ComboBoxDayTestEmition);
        if(CheckCurrentComboBox(INDEX_OF_DAY)){
            ComboBoxDayTestEmition.setBorder(greenLine);
        }else{
            ComboBoxDayTestEmition.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxDayTestEmitionItemStateChanged
    
    /*                                   -------------------- TESTE PACIENTI PANEL ------------------------- 
                                            --------------------   END  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    /*                                   -------------------- TIP DOCTOR PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    private void disableElementsForTypePanel(){
        TextFieldForDoctorType.setEnabled(false);
        AddBtnDoctorType.setEnabled(false);
        DeleteButtonDoctorType.setEnabled(false);
        UpdateBtnDoctorType.setEnabled(false);
        TextFieldForDoctorType.setBorder(classicBorder);
    }
    
    private void enableElementForTypePanel(){
        AddBtnDoctorType.setEnabled(true);
        DeleteButtonDoctorType.setEnabled(true);
        UpdateBtnDoctorType.setEnabled(true);
    }
    
    private void AddBtnDoctorTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnDoctorTypeActionPerformed
        // TODO add your handling code here:
        DefaultTableModel typeModel = (DefaultTableModel) this.DoctorTypeTable.getModel();
        String typeToBeAdded = TextFieldForDoctorType.getText();
        TipDoctori newType = new TipDoctori();
        newType.setNumeSpecializare(typeToBeAdded);
        CRUD_DoctorType.save(newType);
        disableElementsForTypePanel();
        typeModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(DoctorTypeTable));
    }//GEN-LAST:event_AddBtnDoctorTypeActionPerformed

    private void UpdateBtnDoctorTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnDoctorTypeActionPerformed
        // TODO add your handling code here:
        LineBorder typeBorder = (LineBorder) TextFieldForDoctorType.getBorder();
        if(typeBorder.getLineColor() == Color.green){
            DefaultTableModel typeModel = (DefaultTableModel) this.DoctorTypeTable.getModel();
            int row = DoctorTypeTable.getSelectedRow();
            String oldName = typeModel.getValueAt(row, 1).toString();
            TipDoctori newUpdatedType = new TipDoctori();
            newUpdatedType.setNumeSpecializare(TextFieldForDoctorType.getText());
            CRUD_DoctorType.update(newUpdatedType, oldName);
            disableElementsForTypePanel();
            typeModel.setRowCount(0);
            LoadDataIntoTables(TableList.indexOf(DoctorTypeTable));
        }
    }//GEN-LAST:event_UpdateBtnDoctorTypeActionPerformed

    private void DeleteButtonDoctorTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonDoctorTypeActionPerformed
        // TODO add your handling code here:
        DefaultTableModel typeModel = (DefaultTableModel) this.DoctorTypeTable.getModel();
        int row = DoctorTypeTable.getSelectedRow();
        String oldName = typeModel.getValueAt(row, 1).toString();
        TipDoctori newUpdatedType = CRUD_DoctorType.findBynumeSpecializare(oldName);
        if(newUpdatedType != null){
            CRUD_DoctorType.delete(newUpdatedType);
            disableElementsForTypePanel();
            typeModel.setRowCount(0);
            LoadDataIntoTables(TableList.indexOf(DoctorTypeTable));
        }
    }//GEN-LAST:event_DeleteButtonDoctorTypeActionPerformed

    private void ClearBtnDoctorTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnDoctorTypeActionPerformed
        // TODO add your handling code here:
        String empty = "";
        TextFieldForDoctorType.setText(empty);
        disableElementsForTypePanel();
    }//GEN-LAST:event_ClearBtnDoctorTypeActionPerformed

    private void DoctorTypeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DoctorTypeTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel typeModel = (DefaultTableModel) this.DoctorTypeTable.getModel();
        int row = DoctorTypeTable.getSelectedRow();
        if(row != -1){
            TextFieldForDoctorType.setText(typeModel.getValueAt(row, 1).toString());
            TextFieldForDoctorType.setBorder(greenLine);
            enableElementForTypePanel();
        }
    }//GEN-LAST:event_DoctorTypeTableMouseClicked

    private void TextFieldForDoctorTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForDoctorTypeMouseClicked
        // TODO add your handling code here:
        TextFieldForDoctorType.setEnabled(true);
    }//GEN-LAST:event_TextFieldForDoctorTypeMouseClicked

    private void TextFieldForDoctorTypeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForDoctorTypeKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_DOCTOR_TYPE = TextFields.indexOf(TextFieldForDoctorType);
        if(CheckCurrentTextFields(INDEX_OF_DOCTOR_TYPE)){
            TextFieldForDoctorType.setBorder(greenLine);
        }else{
            TextFieldForDoctorType.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForDoctorTypeKeyReleased
    
     /*                                   -------------------- TIP DOCTOR PANEL ------------------------- 
                                            --------------------   END  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    
    /*                                   -------------------- CABINETE DOCTORI PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    private void NoBordersForCabinetePanelElements(){
        TextFieldForCabinetCity.setBorder(classicBorder);
        TextFieldForPostalCode.setBorder(classicBorder);
        TextFieldForCabinetCUI.setBorder(classicBorder);
        TextFieldForPhoneNumber.setBorder(classicBorder);
        TextFieldCabinetName.setBorder(classicBorder);
        TextFieldForStreet.setBorder(classicBorder);
        TextFIeldForStreetNumber.setBorder(classicBorder);
        ComboBoxForPrefix.setBorder(classicComboBorder);
    }
    
    private void enablingCabinetPanelElements(){
        TextFieldForCabinetCity.setEnabled(true);
        TextFieldForPostalCode.setEnabled(true);
        TextFieldForCabinetCUI.setEnabled(true);
        TextFieldForPhoneNumber.setEnabled(true);
        TextFieldCabinetName.setEnabled(true);
        TextFieldForStreet.setEnabled(true);
        TextFIeldForStreetNumber.setEnabled(true);
        ComboBoxForPrefix.setEnabled(true);
        AddBtnCabinet.setEnabled(false);
        DeleteBtnCabinet.setEnabled(true);
        UpdateBtnCabinet.setEnabled(true);
    }
    
    private void disablingCabinetPanelElements(){
        TextFieldForCabinetCity.setEnabled(false);
        TextFieldForPostalCode.setEnabled(false);
        TextFieldForCabinetCUI.setEnabled(false);
        TextFieldForPhoneNumber.setEnabled(false);
        TextFieldCabinetName.setEnabled(false);
        TextFieldForStreet.setEnabled(false);
        TextFIeldForStreetNumber.setEnabled(false);
        CheckLabelCUICabinet.setVisible(false);
        ComboBoxForPrefix.setEnabled(false);
        AddBtnCabinet.setEnabled(false);
        DeleteBtnCabinet.setEnabled(false);
        UpdateBtnCabinet.setEnabled(false);
    }
    
    private void TextFieldCabinetNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldCabinetNameKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CABINET_NAME = TextFields.indexOf(TextFieldCabinetName);
        if(CheckCurrentTextFields(INDEX_OF_CABINET_NAME)){
            TextFieldCabinetName.setBorder(greenLine);
        }else{
            TextFieldCabinetName.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldCabinetNameKeyReleased

    private void TextFieldForPostalCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForPostalCodeKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CABINET_POSTAL_CODE = TextFields.indexOf(TextFieldForPostalCode);
        if(CheckCurrentTextFields(INDEX_OF_CABINET_POSTAL_CODE)){
            TextFieldForPostalCode.setBorder(greenLine);
        }else{
            TextFieldForPostalCode.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForPostalCodeKeyReleased

    private void TextFieldForCabinetCityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForCabinetCityKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CABINET_CITY = TextFields.indexOf(TextFieldForCabinetCity);
        if(CheckCurrentTextFields(INDEX_OF_CABINET_CITY)){
            TextFieldForCabinetCity.setBorder(greenLine);
        }else{
            TextFieldForCabinetCity.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForCabinetCityKeyReleased

    private void TextFieldForStreetKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForStreetKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CABINET_STREET = TextFields.indexOf(TextFieldForStreet);
        if(CheckCurrentTextFields(INDEX_OF_CABINET_STREET)){
            TextFieldForStreet.setBorder(greenLine);
        }else{
            TextFieldForStreet.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForStreetKeyReleased

    private void TextFIeldForStreetNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFIeldForStreetNumberKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CABINET_STREET_NUMBER = TextFields.indexOf(TextFIeldForStreetNumber);
        if(CheckCurrentTextFields(INDEX_OF_CABINET_STREET_NUMBER)){
            TextFIeldForStreetNumber.setBorder(greenLine);
        }else{
            TextFIeldForStreetNumber.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFIeldForStreetNumberKeyReleased

    private void TextFieldForPhoneNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForPhoneNumberKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CABINET_PHONE_NUMBER = TextFields.indexOf(TextFieldForPhoneNumber);
        if(CheckCurrentTextFields(INDEX_OF_CABINET_PHONE_NUMBER)){
            TextFieldForPhoneNumber.setBorder(greenLine);
        }else{
            TextFieldForPhoneNumber.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForPhoneNumberKeyReleased

    private void ComboBoxForPrefixItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForPrefixItemStateChanged
        // TODO add your handling code here:
         Integer INDEX_Of_PREFIX_BOX = dateComboBoxes.indexOf(ComboBoxForPrefix);
        if(CheckCurrentComboBox(INDEX_Of_PREFIX_BOX)){
            ComboBoxForPrefix.setBorder(greenLine);
        }else{
            ComboBoxForPrefix.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForPrefixItemStateChanged

    private void AddBtnCabinetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnCabinetActionPerformed
        // TODO add your handling code here:
        DefaultTableModel cabinetModel = (DefaultTableModel) CabinetsTable.getModel();
        LineBorder CUI_BORDER = (LineBorder)TextFieldForCabinetCUI.getBorder();
        LineBorder NAME_BORDER = (LineBorder)TextFieldCabinetName.getBorder();
        LineBorder POSTAL_CODE_BORDER = (LineBorder)TextFieldForPostalCode.getBorder();
        LineBorder CITY_BORDER = (LineBorder)TextFieldForCabinetCity.getBorder();
        LineBorder STREET_BORDER = (LineBorder)TextFieldForStreet.getBorder();
        LineBorder STREET_NUMBER_BORDER = (LineBorder)TextFIeldForStreetNumber.getBorder();
        LineBorder PHONE_NUMBER = (LineBorder)TextFieldForPhoneNumber.getBorder();
        if(CUI_BORDER.getLineColor() == Color.green){
            Integer CUI = Integer.parseInt(TextFieldForCabinetCUI.getText());
            if(NAME_BORDER.getLineColor() == Color.green){
                String namePrefix = TextFieldForPrefixName.getText();
                String name = namePrefix + " " + TextFieldCabinetName.getText();
                if(POSTAL_CODE_BORDER.getLineColor() == Color.green){
                    String postalCode = TextFieldForPostalCode.getText();
                    if(CITY_BORDER.getLineColor() == Color.green){
                        String city = TextFieldForCabinetCity.getText();
                        if(STREET_BORDER.getLineColor() == Color.green){
                            String address = TextFieldForStreet.getText();
                            if(STREET_NUMBER_BORDER.getLineColor() == Color.green){
                                Integer addressNumber = Integer.parseInt(TextFIeldForStreetNumber.getText());
                                if(PHONE_NUMBER.getLineColor() == Color.green){
                                    String prefix = ComboBoxForPrefix.getSelectedItem().toString();
                                    String phoneNumber = prefix + TextFieldForPhoneNumber.getText();
                                    CabineteDoctori newCabinet = new CabineteDoctori();
                                    Doctori doctorToBeSet = CRUD_Doctor.findById(CUI);
                                    newCabinet.setDoctori(doctorToBeSet);
                                    newCabinet.setCabinetNume(name);
                                    newCabinet.setCabinetCodPostal(postalCode);
                                    newCabinet.setCabinetOras(city);
                                    if("-".equals(address)){
                                        address = null;
                                        newCabinet.setCabinetStrada(address);
                                    }else{
                                        newCabinet.setCabinetStrada(address);
                                    }
                                    newCabinet.setCabinetNumarStrada(addressNumber);
                                    if("-".equals(TextFieldForPhoneNumber.getText())){
                                        phoneNumber = null;
                                        newCabinet.setCabinetNrTelefon(phoneNumber);
                                    }else{
                                        newCabinet.setCabinetNrTelefon(phoneNumber);
                                    }
                                    CRUD_DoctorCabinets.save(newCabinet);
                                    disablingCabinetPanelElements();
                                    cabinetModel.setRowCount(0);
                                    LoadDataIntoTables(TableList.indexOf(CabinetsTable));
                                    NoBordersForCabinetePanelElements();
                                    clearingCabineteDoctoriPanel();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_AddBtnCabinetActionPerformed
    }
    private void UpdateBtnCabinetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnCabinetActionPerformed
        // TODO add your handling code here:
        DefaultTableModel cabineteModel = (DefaultTableModel) CabinetsTable.getModel();
        int row = CabinetsTable.getSelectedRow();
        Integer CabinetID = Integer.parseInt(cabineteModel.getValueAt(row, 0).toString());
        CabineteDoctori updatedCabinet = new CabineteDoctori();
        Doctori newDoctor = CRUD_Doctor.findById(Integer.parseInt(TextFieldForCabinetCUI.getText()));
        updatedCabinet.setDoctori(newDoctor);
        updatedCabinet.setCabinetNume(TextFieldForPrefixName.getText() + " " + TextFieldCabinetName.getText());
        updatedCabinet.setCabinetCodPostal(TextFieldForPostalCode.getText());
        updatedCabinet.setCabinetOras(TextFieldForCabinetCity.getText());
        String street = TextFieldForStreet.getText();
        if("-".equals(street)){
            updatedCabinet.setCabinetStrada(null);
        }else{
            updatedCabinet.setCabinetStrada(street);
        }
        updatedCabinet.setCabinetNumarStrada(Integer.parseInt(TextFIeldForStreetNumber.getText()));
        String phoneNumber = TextFieldForPhoneNumber.getText();
        if("-".equals(phoneNumber)){
            updatedCabinet.setCabinetNrTelefon(null);
        }else{
            updatedCabinet.setCabinetNrTelefon(ComboBoxForPrefix.getSelectedItem().toString() + phoneNumber);
        }
        CRUD_DoctorCabinets.update(updatedCabinet, CabinetID);
        cabineteModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(CabinetsTable));
        disablingCabinetPanelElements();
        NoBordersForCabinetePanelElements();
        clearingCabineteDoctoriPanel();
    }//GEN-LAST:event_UpdateBtnCabinetActionPerformed

    private void DeleteBtnCabinetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnCabinetActionPerformed
        // TODO add your handling code here:
        DefaultTableModel cabineteModel = (DefaultTableModel) CabinetsTable.getModel();
        int row = CabinetsTable.getSelectedRow();
        Integer CabinetID = Integer.parseInt(cabineteModel.getValueAt(row, 0).toString());
        CabineteDoctori toBeDeleted = CRUD_DoctorCabinets.findById(CabinetID);
        CRUD_DoctorCabinets.delete(toBeDeleted);
        cabineteModel.setRowCount(0);
        NoBordersForCabinetePanelElements();
        LoadDataIntoTables(TableList.indexOf(CabinetsTable));
        disablingCabinetPanelElements();
        clearingCabineteDoctoriPanel();
    }//GEN-LAST:event_DeleteBtnCabinetActionPerformed

    private void ClearBtnCabinetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnCabinetActionPerformed
        // TODO add your handling code here:
        String empty = "";
        TextFieldForCabinetCUI.setText(empty);
        TextFieldCabinetName.setText(empty);
        TextFieldForPostalCode.setText(empty);
        TextFieldForCabinetCity.setText(empty);
        TextFieldForStreet.setText(empty);
        TextFIeldForStreetNumber.setText(empty);
        TextFieldForPhoneNumber.setText(empty);
        NoBordersForCabinetePanelElements();
        disablingCabinetPanelElements();
    }//GEN-LAST:event_ClearBtnCabinetActionPerformed

    private void CabinetsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CabinetsTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel cabineteModel = (DefaultTableModel) CabinetsTable.getModel();
        int row = CabinetsTable.getSelectedRow();
        if(row != -1){
            TextFieldForCabinetCUI.setText(cabineteModel.getValueAt(row, 1).toString());
            String cabinetName = cabineteModel.getValueAt(row, 2).toString();
            cabinetName = cabinetName.substring(7);
            TextFieldCabinetName.setText(cabinetName);
            TextFieldForPostalCode.setText(cabineteModel.getValueAt(row, 3).toString());
            TextFieldForCabinetCity.setText(cabineteModel.getValueAt(row, 4).toString());
            Object street = cabineteModel.getValueAt(row, 5);
            if(street != null){
                String strStreet = street.toString();
                TextFieldForStreet.setText(strStreet);
            }else{
                TextFieldForStreet.setText("-");
            }
            TextFIeldForStreetNumber.setText(cabineteModel.getValueAt(row, 6).toString());
            Object phoneNumber = cabineteModel.getValueAt(row, 7);
            String strPhoneNumber = null;
            if(phoneNumber != null){
                strPhoneNumber = phoneNumber.toString();
                strPhoneNumber = strPhoneNumber.substring(3, 12);
                TextFieldForPhoneNumber.setText(strPhoneNumber);
            }else{
                TextFieldForPhoneNumber.setText("-");
            }
            enablingCabinetPanelElements();
            TextFieldForCabinetCUI.setBorder(greenLine);
            TextFieldCabinetName.setBorder(greenLine);
            TextFieldForPostalCode.setBorder(greenLine);
            TextFieldForCabinetCity.setBorder(greenLine);
            TextFieldForStreet.setBorder(greenLine);
            TextFIeldForStreetNumber.setBorder(greenLine);
            TextFieldForPhoneNumber.setBorder(greenLine);
        }
    }//GEN-LAST:event_CabinetsTableMouseClicked

    private void TextFieldForCabinetCUIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForCabinetCUIKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_CABINET_CUI = TextFields.indexOf(TextFieldForCabinetCUI);
        System.out.println("" + INDEX_OF_CABINET_CUI);
        if(CheckCurrentTextFields(INDEX_OF_CABINET_CUI)){
            TextFieldForCabinetCUI.setBorder(greenLine);
            CheckLabelCUICabinet.setVisible(false);
        }else{
            TextFieldForCabinetCUI.setBorder(redLine);
            CheckLabelCUICabinet.setVisible(true);
        }
    }//GEN-LAST:event_TextFieldForCabinetCUIKeyReleased

    private void TextFieldForCabinetCUIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForCabinetCUIMouseClicked
        // TODO add your handling code here:
        TextFieldForCabinetCUI.setEnabled(true);
    }//GEN-LAST:event_TextFieldForCabinetCUIMouseClicked
    /*                                   -------------------- CABINETE DOCTORI PANEL ------------------------- 
                                            --------------------   END  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    /*                                   -------------------- RETETE PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
    private void disableRetetePanelElements(){
        TextFieldForRetetaCNP.setEnabled(false);
        TextFieldForRetetaCUI.setEnabled(false);
        ComboBoxForDayEmitionDate.setEnabled(false);
        ComboBoxForMonthEmitionDate.setEnabled(false);
        ComboBoxForYearEmitionDate.setEnabled(false);
        ComboBoxForYearExpirationDate.setEnabled(false);
        ComboBoxForMonthExpirationDate.setEnabled(false);
        ComboBoxForDayExpirationDate.setEnabled(false);
        ComboBoxForPrescriptionType.setEnabled(false);
        CHECKLabelForRetetaCNP.setVisible(false);
        CHECKLabelForReteteCUI.setVisible(false);
        AddBtnRetete.setEnabled(false);
        DeleteBtnRetete.setEnabled(false);
        UpdateBtnRetete.setEnabled(false);
    }
    
    private void enableRetetePanelElements(){
        TextFieldForRetetaCNP.setEnabled(true);
        TextFieldForRetetaCUI.setEnabled(true);
        ComboBoxForDayEmitionDate.setEnabled(true);
        ComboBoxForMonthEmitionDate.setEnabled(true);
        ComboBoxForYearEmitionDate.setEnabled(true);
        ComboBoxForYearExpirationDate.setEnabled(true);
        ComboBoxForMonthExpirationDate.setEnabled(true);
        ComboBoxForDayExpirationDate.setEnabled(true);
        ComboBoxForPrescriptionType.setEnabled(true);
        CHECKLabelForRetetaCNP.setVisible(true);
        CHECKLabelForReteteCUI.setVisible(true);
        DeleteBtnRetete.setEnabled(true);
        UpdateBtnRetete.setEnabled(true);
    }
    
    private void NoBordersForRetetePanelElements(){
        TextFieldForRetetaCNP.setBorder(classicBorder);
        TextFieldForRetetaCUI.setBorder(classicBorder);
        ComboBoxForDayEmitionDate.setBorder(classicComboBorder);
        ComboBoxForMonthEmitionDate.setBorder(classicComboBorder);
        ComboBoxForYearEmitionDate.setBorder(classicComboBorder);
        ComboBoxForYearExpirationDate.setBorder(classicComboBorder);
        ComboBoxForMonthExpirationDate.setBorder(classicComboBorder);  
        ComboBoxForDayExpirationDate.setBorder(classicComboBorder); 
        ComboBoxForPrescriptionType.setBorder(classicComboBorder); 
    }
    
    private void clearingRetetePanelElements(){
        TextFieldForRetetaCNP.setText("");
        TextFieldForRetetaCUI.setText("");
        ComboBoxForYearEmitionDate.setSelectedItem("1900");
        ComboBoxForYearExpirationDate.setSelectedItem("1900");
        ComboBoxForMonthEmitionDate.setSelectedItem("1");
        ComboBoxForMonthExpirationDate.setSelectedItem("1");
        ComboBoxForDayEmitionDate.setSelectedItem("1");
        ComboBoxForDayExpirationDate.setSelectedItem("1");
        ComboBoxForPrescriptionType.setSelectedItem("Not permanent");
    }
    private void TextFieldForRetetaCNPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForRetetaCNPKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_RETETA_CNP = TextFields.indexOf(TextFieldForRetetaCNP);
        if(CheckCurrentTextFields(INDEX_OF_RETETA_CNP)){
            TextFieldForRetetaCNP.setBorder(greenLine);
            CHECKLabelForRetetaCNP.setVisible(false);
        }else{
            TextFieldForRetetaCNP.setBorder(redLine);
            CHECKLabelForRetetaCNP.setVisible(true);
        }
    }//GEN-LAST:event_TextFieldForRetetaCNPKeyReleased

    private void TextFieldForRetetaCNPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForRetetaCNPMouseClicked
        // TODO add your handling code here:
        TextFieldForRetetaCNP.setEnabled(true);
    }//GEN-LAST:event_TextFieldForRetetaCNPMouseClicked

    private void TextFieldForRetetaCUIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForRetetaCUIKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_RETETA_CUI = TextFields.indexOf(TextFieldForRetetaCUI);
        if(CheckCurrentTextFields(INDEX_OF_RETETA_CUI)){
            TextFieldForRetetaCUI.setBorder(greenLine);
            CHECKLabelForReteteCUI.setVisible(false);
        }else{
            TextFieldForRetetaCUI.setBorder(redLine);
            CHECKLabelForReteteCUI.setVisible(true);
        }
    }//GEN-LAST:event_TextFieldForRetetaCUIKeyReleased

    private void ComboBoxForYearEmitionDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForYearEmitionDateItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_YEAR_EMITION_DATE = dateComboBoxes.indexOf(ComboBoxForYearEmitionDate);
        if(CheckCurrentComboBox(INDEX_OF_YEAR_EMITION_DATE)){
            ComboBoxForYearEmitionDate.setBorder(greenLine);
        }else{
            ComboBoxForYearEmitionDate.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForYearEmitionDateItemStateChanged

    private void ComboBoxForMonthEmitionDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForMonthEmitionDateItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_MONTH_EMITION_DATE = dateComboBoxes.indexOf(ComboBoxForMonthEmitionDate);
        if(CheckCurrentComboBox(INDEX_OF_MONTH_EMITION_DATE)){
            ComboBoxForMonthEmitionDate.setBorder(greenLine);
        }else{
            ComboBoxForMonthEmitionDate.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForMonthEmitionDateItemStateChanged

    private void ComboBoxForDayEmitionDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForDayEmitionDateItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_DAY_EMITION_DATE = dateComboBoxes.indexOf(ComboBoxForDayEmitionDate);
        if(CheckCurrentComboBox(INDEX_OF_DAY_EMITION_DATE)){
            ComboBoxForDayEmitionDate.setBorder(greenLine);
        }else{
            ComboBoxForDayEmitionDate.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForDayEmitionDateItemStateChanged

    private void ComboBoxForYearExpirationDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForYearExpirationDateItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_YEAR_EXP_DATE = dateComboBoxes.indexOf(ComboBoxForYearExpirationDate);
        if(CheckCurrentComboBox(INDEX_OF_YEAR_EXP_DATE)){
            ComboBoxForYearExpirationDate.setBorder(greenLine);
            ComboBoxForPrescriptionType.setEnabled(false);
            ComboBoxForPrescriptionType.setSelectedItem("Not permanent");
            EmitionDateLessThanExpirationDate();
        }else{
            ComboBoxForYearExpirationDate.setBorder(redLine);
            ComboBoxForMonthExpirationDate.setEnabled(true);
            ComboBoxForPrescriptionType.setEnabled(true);
            ComboBoxForPrescriptionType.setSelectedItem("permanent");
        }
    }//GEN-LAST:event_ComboBoxForYearExpirationDateItemStateChanged

    private void ComboBoxForMonthExpirationDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForMonthExpirationDateItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_MONTH_EXP_DATE = dateComboBoxes.indexOf(ComboBoxForMonthExpirationDate);
        if(CheckCurrentComboBox(INDEX_OF_MONTH_EXP_DATE)){
            ComboBoxForMonthExpirationDate.setBorder(greenLine);
            if(ComboBoxForPrescriptionType.getSelectedItem().toString() != "Not permanent"){
                ComboBoxForPrescriptionType.setSelectedItem("Not permanent");
            }
            EmitionDateLessThanExpirationDate();
        }else{
            ComboBoxForMonthExpirationDate.setBorder(redLine);
            ComboBoxForDayExpirationDate.setEnabled(true);
            ComboBoxForPrescriptionType.setEnabled(true);
            ComboBoxForPrescriptionType.setSelectedItem("permanent");
        }
    }//GEN-LAST:event_ComboBoxForMonthExpirationDateItemStateChanged

    private void ComboBoxForDayExpirationDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForDayExpirationDateItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_DAY_EXP_DATE = dateComboBoxes.indexOf(ComboBoxForDayExpirationDate);
        if(CheckCurrentComboBox(INDEX_OF_DAY_EXP_DATE)){
            ComboBoxForDayExpirationDate.setBorder(greenLine);
            if(ComboBoxForPrescriptionType.getSelectedItem().toString() != "Not permanent"){
                ComboBoxForPrescriptionType.setSelectedItem("Not permanent");
            }
            EmitionDateLessThanExpirationDate();
        }else{
            ComboBoxForDayExpirationDate.setBorder(redLine);
            ComboBoxForPrescriptionType.setEnabled(true);
            ComboBoxForPrescriptionType.setSelectedItem("permanent");
        }
    }//GEN-LAST:event_ComboBoxForDayExpirationDateItemStateChanged

    private void EmitionDateLessThanExpirationDate(){
        if(ComboBoxForYearExpirationDate.getSelectedItem().toString() != "-" && ComboBoxForMonthExpirationDate.getSelectedItem().toString() != "-" &&
           ComboBoxForDayExpirationDate.getSelectedItem().toString() != "-"){
            String yearEmitionDate = ComboBoxForYearEmitionDate.getSelectedItem().toString();
            String yearExpirationDate = ComboBoxForYearExpirationDate.getSelectedItem().toString();
            String monthEmitionDate = ComboBoxForMonthEmitionDate.getSelectedItem().toString();
            String monthExpirationDate =ComboBoxForMonthExpirationDate.getSelectedItem().toString();
            String dayEmitionDate = ComboBoxForDayEmitionDate.getSelectedItem().toString();
            String dayExpirationDate = ComboBoxForDayExpirationDate.getSelectedItem().toString();
            String EmitionDate = null;
            String ExpirationDate = null;
            if(dayEmitionDate.length() == 1 && monthEmitionDate.length() == 1){
                EmitionDate = yearEmitionDate + "-" + "0" + monthEmitionDate + "-" + "0" + dayEmitionDate;
            }else if(dayEmitionDate.length() == 1 && monthEmitionDate.length() == 2){
                EmitionDate = yearEmitionDate + "-"  + monthEmitionDate + "-" + "0" +  dayEmitionDate;
            }else if(dayEmitionDate.length() == 2 && monthEmitionDate.length() == 1){
                EmitionDate = yearEmitionDate + "-" + "0" + monthEmitionDate + "-"  +  dayEmitionDate;
            }else{
                EmitionDate = yearEmitionDate + "-"  + monthEmitionDate + "-"  +  dayEmitionDate; 
            }
            if(dayExpirationDate.length() == 1 && monthExpirationDate.length() == 1){
                ExpirationDate = yearExpirationDate + "-" + "0" + monthExpirationDate + "-" + "0" + dayExpirationDate;
            }else if(dayExpirationDate.length() == 1 && monthExpirationDate.length() == 2){
                ExpirationDate = yearExpirationDate + "-"  + monthExpirationDate + "-" + "0" +  dayExpirationDate;
            }else if(dayExpirationDate.length() == 2 && monthExpirationDate.length() == 1){
                ExpirationDate = yearExpirationDate + "-" + "0" + monthExpirationDate + "-"  +  dayExpirationDate;
            }else{
                ExpirationDate = yearExpirationDate + "-"  + monthExpirationDate + "-"  +  dayExpirationDate; 
            }
            SimpleDateFormat sdFormat = new SimpleDateFormat("yyyy-MM-dd");
            try{
                java.util.Date EmitionCompareDate = sdFormat.parse(EmitionDate); 
                java.util.Date ExpirationCompareDate = sdFormat.parse(ExpirationDate);
                if(ExpirationCompareDate.compareTo(EmitionCompareDate) > 0){
                    ComboBoxForYearEmitionDate.setBorder(greenLine);
                    ComboBoxForMonthEmitionDate.setBorder(greenLine);
                    ComboBoxForDayEmitionDate.setBorder(greenLine);

                    ComboBoxForYearExpirationDate.setBorder(greenLine);
                    ComboBoxForMonthExpirationDate.setBorder(greenLine);
                    ComboBoxForDayExpirationDate.setBorder(greenLine);

                    AddBtnRetete.setEnabled(true);
                    CHECKLabelForEmitionDate.setVisible(false);
                    CHECKLabelForEmitionDate2.setVisible(false);
                }else if(ExpirationCompareDate.compareTo(EmitionCompareDate) < 0 || ExpirationCompareDate.compareTo(EmitionCompareDate) == 0){
                    ComboBoxForYearEmitionDate.setBorder(redLine);
                    ComboBoxForMonthEmitionDate.setBorder(redLine);
                    ComboBoxForDayEmitionDate.setBorder(redLine);

                    ComboBoxForYearExpirationDate.setBorder(redLine);
                    ComboBoxForMonthExpirationDate.setBorder(redLine);
                    ComboBoxForDayExpirationDate.setBorder(redLine);

                    AddBtnRetete.setEnabled(false);
                    CHECKLabelForEmitionDate.setVisible(true);
                    CHECKLabelForEmitionDate2.setVisible(true);
                }
            }catch(ParseException ex){
                ex.printStackTrace();
            }
            
        }
    }
    
    private void ComboBoxForPrescriptionTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForPrescriptionTypeItemStateChanged
        // TODO add your handling code here:
        String prescriptionType = ComboBoxForPrescriptionType.getSelectedItem().toString();
        if(prescriptionType == "permanent"){
            ComboBoxForDayExpirationDate.setBorder(redLine);
            ComboBoxForYearExpirationDate.setBorder(redLine);
            ComboBoxForMonthExpirationDate.setBorder(redLine);
            ComboBoxForDayExpirationDate.setEnabled(false);
            ComboBoxForYearExpirationDate.setEnabled(false);
            ComboBoxForMonthExpirationDate.setEnabled(false);
            AddBtnRetete.setEnabled(true);
        }else{
            ComboBoxForDayExpirationDate.setBorder(greenLine);
            ComboBoxForYearExpirationDate.setBorder(greenLine);
            ComboBoxForMonthExpirationDate.setBorder(greenLine);
            ComboBoxForDayExpirationDate.setEnabled(true);
            ComboBoxForYearExpirationDate.setEnabled(true);
            ComboBoxForMonthExpirationDate.setEnabled(true);
        }
    }//GEN-LAST:event_ComboBoxForPrescriptionTypeItemStateChanged

    private void AddBtnReteteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnReteteActionPerformed
        // TODO add your handling code here:
        LineBorder TF_RETETA_CNP = (LineBorder) TextFieldForRetetaCNP.getBorder();
        LineBorder TF_RETETA_CUI = (LineBorder) TextFieldForRetetaCUI.getBorder();
        LineBorder ComboBox_EmitionYear_Border = (LineBorder) ComboBoxForYearEmitionDate.getBorder();
        LineBorder ComboBox_EmitionMonth_Border = (LineBorder) ComboBoxForMonthEmitionDate.getBorder();
        LineBorder ComboBox_EmitionDay_Border = (LineBorder) ComboBoxForDayEmitionDate.getBorder();
        if(TF_RETETA_CNP.getLineColor() == Color.green){
            String pacientCNP = TextFieldForRetetaCNP.getText();
            Pacienti pacientToBeAddedToReteta = CRUD_Pacienti.findById(pacientCNP);
            if(TF_RETETA_CUI.getLineColor() == Color.green){
                String doctorCUI = TextFieldForRetetaCUI.getText();
                Integer CUI = Integer.parseInt(doctorCUI);
                Doctori doctorToBeAddedToReteta = CRUD_Doctor.findById(CUI);
                if(ComboBox_EmitionYear_Border.getLineColor() == Color.green){
                    String year = ComboBoxForYearEmitionDate.getSelectedItem().toString();
                    if(ComboBox_EmitionMonth_Border.getLineColor() == Color.green){
                        String month = ComboBoxForMonthEmitionDate.getSelectedItem().toString();
                        if(ComboBox_EmitionDay_Border.getLineColor() == Color.green){
                            String day = ComboBoxForDayEmitionDate.getSelectedItem().toString();
                            String EmitionDate = null;
                            if(day.length() == 1 && month.length() == 1){
                                EmitionDate = year + "-" + "0" + month + "-" + "0" + day;
                            }else if(day.length() == 1 && month.length() == 2){
                                EmitionDate = year + "-"  + month + "-" + "0" +  day;
                            }else if(day.length() == 2 && month.length() == 1){
                                EmitionDate = year + "-" + "0" + month + "-"  +  day;
                            }else{
                                EmitionDate = year + "-"  + month + "-"  +  day; 
                            }
                            Date SQLEmitionDate = Date.valueOf(EmitionDate);
                            
                            String PrescriptionType = ComboBoxForPrescriptionType.getSelectedItem().toString();
                            String ExpirationDate = null; /* -------- */
                            Retete newReteta = new Retete();
                            newReteta.setDoctorRetete(doctorToBeAddedToReteta);
                            newReteta.setPacientRetete(pacientToBeAddedToReteta);
                            newReteta.setRetetaDataEmitere(SQLEmitionDate);
                            if(PrescriptionType == "Not permanent"){
                                String ExpirationYearDate = ComboBoxForYearExpirationDate.getSelectedItem().toString();
                                String ExpirationMonthDate = ComboBoxForMonthExpirationDate.getSelectedItem().toString();
                                String ExpirationDayDate = ComboBoxForDayExpirationDate.getSelectedItem().toString();
                                if(ExpirationDayDate.length() == 1 && ExpirationMonthDate.length() == 1){
                                    ExpirationDate = ExpirationYearDate + "-" + "0" + ExpirationMonthDate + "-" + "0" + ExpirationDayDate;
                                }else if(ExpirationDayDate.length() == 1 && ExpirationMonthDate.length() == 2){
                                    ExpirationDate = ExpirationYearDate + "-"  + ExpirationMonthDate + "-" + "0" +  ExpirationDayDate;
                                }else if(ExpirationDayDate.length() == 2 && ExpirationMonthDate.length() == 1){
                                    ExpirationDate = ExpirationYearDate + "-" + "0" + ExpirationMonthDate + "-"  +  ExpirationDayDate;
                                }else{
                                    ExpirationDate = ExpirationYearDate + "-"  + ExpirationMonthDate + "-"  +  ExpirationDayDate; 
                                }
                                Date SQLExpirationDate = Date.valueOf(ExpirationDate);
                                newReteta.setRetetaDataExpirare(SQLExpirationDate);
                                newReteta.setTipReteta(null);
                            }else{
                                newReteta.setTipReteta(ComboBoxForPrescriptionType.getSelectedItem().toString());
                                newReteta.setRetetaDataExpirare(null);
                            }
                            CRUD_Retete.save(newReteta);
                            DefaultTableModel reteteModel = (DefaultTableModel) ReteteTable.getModel();
                            reteteModel.setRowCount(0);
                            LoadDataIntoTables(TableList.indexOf(ReteteTable));
                            disableRetetePanelElements();
                            NoBordersForRetetePanelElements();
                            clearingRetetePanelElements();
                        }
                    }
                }
            }
        }
        
    }//GEN-LAST:event_AddBtnReteteActionPerformed

    private void DeleteBtnReteteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnReteteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel reteteModel = (DefaultTableModel) ReteteTable.getModel();
        int row = ReteteTable.getSelectedRow();
        Integer retetaID = Integer.parseInt(reteteModel.getValueAt(row, 0).toString());
        Retete retetaToBeDeleted = CRUD_Retete.findById(retetaID);
        if(retetaToBeDeleted != null){
            CRUD_Retete.delete(retetaToBeDeleted);
            reteteModel.setRowCount(0);
            LoadDataIntoTables(TableList.indexOf(ReteteTable));
            disableRetetePanelElements();
            NoBordersForRetetePanelElements();
            clearingRetetePanelElements();
        }
    }//GEN-LAST:event_DeleteBtnReteteActionPerformed

    private void ClearBtnReteteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnReteteActionPerformed
        // TODO add your handling code here:
        String empty = "";
        TextFieldForRetetaCNP.setText(empty);
        TextFieldForRetetaCUI.setText(empty);
        ComboBoxForYearEmitionDate.setSelectedItem("1900");
        ComboBoxForMonthEmitionDate.setSelectedItem("1");
        ComboBoxForDayEmitionDate.setSelectedItem("1");
        ComboBoxForYearExpirationDate.setSelectedItem("1900");
        ComboBoxForMonthExpirationDate.setSelectedItem("1");
        ComboBoxForDayExpirationDate.setSelectedItem("1");
        ComboBoxForPrescriptionType.setSelectedItem("Not permanent");
        disableRetetePanelElements();
        NoBordersForRetetePanelElements();
        
    }//GEN-LAST:event_ClearBtnReteteActionPerformed

    private void UpdateBtnReteteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnReteteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel reteteModel = (DefaultTableModel) ReteteTable.getModel();
        int row = ReteteTable.getSelectedRow();
        Integer retetaID = Integer.parseInt(reteteModel.getValueAt(row, 0).toString());
        Retete newUpdatedReteta = new Retete();
        String pacientCNP = TextFieldForRetetaCNP.getText();
        Integer doctorCUI = Integer.parseInt(TextFieldForRetetaCUI.getText());
        String EmitionDate = null;
        String EmitionYearDate = ComboBoxForYearExpirationDate.getSelectedItem().toString();
        String EmitionMonthDate = ComboBoxForMonthExpirationDate.getSelectedItem().toString();
        String EmitionDayDate = ComboBoxForDayExpirationDate.getSelectedItem().toString();
        if(EmitionDayDate.length() == 1 && EmitionMonthDate.length() == 1){
            EmitionDate = EmitionYearDate + "-" + "0" + EmitionMonthDate + "-" + "0" + EmitionDayDate;
        }else if(EmitionDayDate.length() == 1 && EmitionMonthDate.length() == 2){
            EmitionDate = EmitionYearDate + "-"  + EmitionMonthDate + "-" + "0" +  EmitionDayDate;
        }else if(EmitionDayDate.length() == 2 && EmitionMonthDate.length() == 1){
            EmitionDate = EmitionYearDate + "-" + "0" + EmitionMonthDate + "-"  +  EmitionDayDate;
        }else{
            EmitionDate = EmitionYearDate + "-"  + EmitionMonthDate + "-"  +  EmitionDayDate; 
        }
        Date SQLEmitionDate = Date.valueOf(EmitionDate);
        newUpdatedReteta.setRetetaDataEmitere(SQLEmitionDate);
        String prescriptionType = ComboBoxForPrescriptionType.getSelectedItem().toString();
        if(prescriptionType == "Not permanent"){
            String ExpirationYearDate = ComboBoxForYearExpirationDate.getSelectedItem().toString();
            String ExpirationMonthDate = ComboBoxForMonthExpirationDate.getSelectedItem().toString();
            String ExpirationDayDate = ComboBoxForDayExpirationDate.getSelectedItem().toString();
            String ExpirationDate = null;
            if(ExpirationDayDate.length() == 1 && ExpirationMonthDate.length() == 1){
                ExpirationDate = ExpirationYearDate + "-" + "0" + ExpirationMonthDate + "-" + "0" + ExpirationDayDate;
            }else if(ExpirationDayDate.length() == 1 && ExpirationMonthDate.length() == 2){
                ExpirationDate = ExpirationYearDate + "-"  + ExpirationMonthDate + "-" + "0" +  ExpirationDayDate;
            }else if(ExpirationDayDate.length() == 2 && ExpirationMonthDate.length() == 1){
                ExpirationDate = ExpirationYearDate + "-" + "0" + ExpirationMonthDate + "-"  +  ExpirationDayDate;
            }else{
                ExpirationDate = ExpirationYearDate + "-"  + ExpirationMonthDate + "-"  +  ExpirationDayDate; 
            }
            Date SQLExpirationDate = Date.valueOf(ExpirationDate);
            newUpdatedReteta.setRetetaDataExpirare(SQLExpirationDate);
            newUpdatedReteta.setTipReteta(null);
        }else{
            newUpdatedReteta.setRetetaDataExpirare(null);
            newUpdatedReteta.setTipReteta(prescriptionType);
        }
        CRUD_Retete.update(newUpdatedReteta, retetaID, doctorCUI, pacientCNP);
        reteteModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(ReteteTable));
        disableRetetePanelElements();
        NoBordersForRetetePanelElements();
        clearingRetetePanelElements();
    }//GEN-LAST:event_UpdateBtnReteteActionPerformed

    private void ReteteTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReteteTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel reteteModel = (DefaultTableModel) ReteteTable.getModel();
        int row = ReteteTable.getSelectedRow();
        if(row != -1){
            TextFieldForRetetaCNP.setText(reteteModel.getValueAt(row, 1).toString());
            TextFieldForRetetaCUI.setText(reteteModel.getValueAt(row, 2).toString());
            String emitionDate = reteteModel.getValueAt(row, 3).toString();
            String month = emitionDate.substring(5, 7);
            String day = emitionDate.substring(8, 10);
            if(month.startsWith("0") && day.startsWith("0")){
                 month = month.substring(1);
                 day = day.substring(1);
            }else if(!month.startsWith("0") && day.startsWith("0")){
                 day = day.substring(1);
            }else if(month.startsWith("0") && !day.startsWith("0")){
                month = month.substring(1);
            }
            ComboBoxForYearEmitionDate.setSelectedItem(emitionDate.substring(0, 4));
            ComboBoxForMonthEmitionDate.setSelectedItem(month);
            ComboBoxForDayEmitionDate.setSelectedItem(day);
            Object expirationDate = reteteModel.getValueAt(row, 4);
            String expMonth = null , expDay = null , expYear = null;
            if(expirationDate != null){
                String newExpirationDate = expirationDate.toString();
                expMonth = newExpirationDate.substring(5, 7);
                expDay = newExpirationDate.substring(8, 10);
                if(expMonth.startsWith("0") && expDay.startsWith("0")){
                    expMonth = expMonth.substring(1);
                    expDay = expDay.substring(1);
                }else if(!expMonth.startsWith("0") && expDay.startsWith("0")){
                    expDay = expDay.substring(1);
                }else if(expMonth.startsWith("0") && !expDay.startsWith("0")){
                    expMonth = expMonth.substring(1);
                }
                expYear = newExpirationDate.substring(0 ,4);
                ComboBoxForYearExpirationDate.setSelectedItem(expYear);
                ComboBoxForMonthExpirationDate.setSelectedItem(expMonth);
                ComboBoxForDayExpirationDate.setSelectedItem(expDay);
                ComboBoxForPrescriptionType.setSelectedItem("Not permanent");
                enableRetetePanelElements();
                TextFieldForRetetaCNP.setBorder(greenLine);
                TextFieldForRetetaCUI.setBorder(greenLine);
                CHECKLabelForRetetaCNP.setVisible(false);
                CHECKLabelForReteteCUI.setVisible(false);
            }else{
                ComboBoxForYearExpirationDate.setSelectedItem("-");
                ComboBoxForMonthExpirationDate.setSelectedItem("-");
                ComboBoxForDayExpirationDate.setSelectedItem("-");
                ComboBoxForPrescriptionType.setSelectedItem(reteteModel.getValueAt(row, 5).toString());
                enableRetetePanelElements();
                TextFieldForRetetaCNP.setBorder(greenLine);
                TextFieldForRetetaCUI.setBorder(greenLine);
                CHECKLabelForRetetaCNP.setVisible(false);
                CHECKLabelForReteteCUI.setVisible(false);
                ComboBoxForYearExpirationDate.setEnabled(false);
                ComboBoxForMonthExpirationDate.setEnabled(false);
                ComboBoxForDayExpirationDate.setEnabled(false);
            }
        }
    }//GEN-LAST:event_ReteteTableMouseClicked
    /*                                   -------------------- RETETE PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
     /*                                   --------------------  MEDICAMENTE PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
    private void disablingMedicamentsPanelElements(){
        TextFieldForMedicamentName.setEnabled(false);
        ComboBoxForMedicamentType.setEnabled(false);
        ComboBoxForMedicamentWeight.setEnabled(false);
        AddBtnMedicament.setEnabled(false);
        UpdatBtnMedicament.setEnabled(false);
        DeleteBtnMedicament.setEnabled(false);
    }
    
    private void enablingMedicamentsPanelElements(){
        TextFieldForMedicamentName.setEnabled(true);
        ComboBoxForMedicamentType.setEnabled(true);
        ComboBoxForMedicamentWeight.setEnabled(true);
        AddBtnMedicament.setEnabled(true);
        UpdatBtnMedicament.setEnabled(true);
        DeleteBtnMedicament.setEnabled(true);
    }
    
    private void clearingMedicamentElementsContents(){
        TextFieldForMedicamentName.setText("");
        ComboBoxForMedicamentType.setSelectedItem("-");
        ComboBoxForMedicamentWeight.setSelectedItem("-");
    }
    
    private void NoBordersForMedicamentsPanelElements(){
        TextFieldForMedicamentName.setBorder(classicBorder);
        ComboBoxForMedicamentType.setBorder(classicComboBorder);
        ComboBoxForMedicamentWeight.setBorder(classicComboBorder);
    }
    
    
    private void TextFieldForMedicamentNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForMedicamentNameMouseClicked
        // TODO add your handling code here:
        TextFieldForMedicamentName.setEnabled(true);
    }//GEN-LAST:event_TextFieldForMedicamentNameMouseClicked

    private void TextFieldForMedicamentNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForMedicamentNameKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_MEDICAMENT_NAME = TextFields.indexOf(TextFieldForMedicamentName);
        if(CheckCurrentTextFields(INDEX_OF_MEDICAMENT_NAME)){
            TextFieldForMedicamentName.setBorder(greenLine);
        }else{
            TextFieldForMedicamentName.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForMedicamentNameKeyReleased

    private void ComboBoxForMedicamentWeightItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForMedicamentWeightItemStateChanged
        // TODO add your handling code here:
        ComboBoxForMedicamentWeight.setBorder(greenLine);
        ComboBoxForMedicamentType.setEnabled(true);
    }//GEN-LAST:event_ComboBoxForMedicamentWeightItemStateChanged

    private void ComboBoxForMedicamentTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForMedicamentTypeItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_MEDICAMENT_TYPE = dateComboBoxes.indexOf(ComboBoxForMedicamentType);
        if(CheckCurrentComboBox(INDEX_OF_MEDICAMENT_TYPE)){
            ComboBoxForMedicamentType.setBorder(greenLine);
        }else{
            ComboBoxForMedicamentType.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForMedicamentTypeItemStateChanged

    private void AddBtnMedicamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnMedicamentActionPerformed
        // TODO add your handling code here:
        DefaultTableModel medicamenteModel = (DefaultTableModel) MedicamentsTable.getModel();
        LineBorder TF_MED_NUME = (LineBorder) TextFieldForMedicamentName.getBorder();
        LineBorder COMBOBOX_MED_WEIGHT = (LineBorder) ComboBoxForMedicamentWeight.getBorder();
        LineBorder COMBOBOX_MED_TYPE = (LineBorder) ComboBoxForMedicamentType.getBorder();
        if(TF_MED_NUME.getLineColor() == Color.green){
            String numeMedicament = TextFieldForMedicamentName.getText();
            if(COMBOBOX_MED_WEIGHT.getLineColor() == Color.green){
                String strMedicamentWeight = ComboBoxForMedicamentWeight.getSelectedItem().toString();
                Integer medicamentWeight = null;
                if(strMedicamentWeight != "-"){
                   medicamentWeight = Integer.parseInt(strMedicamentWeight);
                }
                if(COMBOBOX_MED_TYPE.getLineColor() == Color.green){
                    String medicamentType = ComboBoxForMedicamentType.getSelectedItem().toString();
                    System.out.println("type medicament string " + medicamentType);
                    Medicamente newMedicament = new Medicamente();
                    if(medicamentWeight == null){
                       newMedicament.setMedicamentNume(numeMedicament);
                    }else{
                       newMedicament.setMedicamentNume(numeMedicament + "_" + medicamentWeight);
                    }
                    newMedicament.setMedicamentGramajMg(medicamentWeight);
                    newMedicament.setTipMedicament(medicamentType);
                    System.out.println("type " + newMedicament.getTipMedicament());
                    CRUD_Medicamente.save(newMedicament);
                    disablingMedicamentsPanelElements();
                    NoBordersForMedicamentsPanelElements();
                    medicamenteModel.setRowCount(0);
                    LoadDataIntoTables(TableList.indexOf(MedicamentsTable));
                    clearingMedicamentElementsContents();
                }
            }
        }
        
    }//GEN-LAST:event_AddBtnMedicamentActionPerformed

    private void DeleteBtnMedicamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnMedicamentActionPerformed
        // TODO add your handling code here:
        LineBorder TF_MED_NUME = (LineBorder) TextFieldForMedicamentName.getBorder();
        LineBorder COMBOBOX_MED_WEIGHT = (LineBorder) ComboBoxForMedicamentWeight.getBorder();
        LineBorder COMBOBOX_MED_TYPE = (LineBorder) ComboBoxForMedicamentType.getBorder();
        if(TF_MED_NUME.getLineColor() == Color.green && COMBOBOX_MED_WEIGHT.getLineColor() == Color.green && COMBOBOX_MED_TYPE.getLineColor() == Color.green){
            DefaultTableModel medicamenteModel = (DefaultTableModel) MedicamentsTable.getModel();
            int row  = MedicamentsTable.getSelectedRow();
            if(row != -1){
                Integer medicamentID = Integer.parseInt(medicamenteModel.getValueAt(row, 0).toString());
                Medicamente toBeDeleted = CRUD_Medicamente.findById(medicamentID);
                if(medicamentID != null){
                    CRUD_Medicamente.delete(toBeDeleted);
                    medicamenteModel.setRowCount(0);
                    disablingMedicamentsPanelElements();
                    NoBordersForMedicamentsPanelElements();
                    LoadDataIntoTables(TableList.indexOf(MedicamentsTable));
                    clearingMedicamentElementsContents();
                }
            }
        }
    }//GEN-LAST:event_DeleteBtnMedicamentActionPerformed

    private void UpdatBtnMedicamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatBtnMedicamentActionPerformed
        // TODO add your handling code here:
        LineBorder TF_MED_NUME = (LineBorder) TextFieldForMedicamentName.getBorder();
        LineBorder COMBOBOX_MED_WEIGHT = (LineBorder) ComboBoxForMedicamentWeight.getBorder();
        LineBorder COMBOBOX_MED_TYPE = (LineBorder) ComboBoxForMedicamentType.getBorder();
        if(TF_MED_NUME.getLineColor() == Color.green && COMBOBOX_MED_WEIGHT.getLineColor() == Color.green && COMBOBOX_MED_TYPE.getLineColor() == Color.green){
            DefaultTableModel medicamenteModel = (DefaultTableModel) MedicamentsTable.getModel();
            int row  = MedicamentsTable.getSelectedRow();
            if(row != -1){
                Integer medicamentID = Integer.parseInt(medicamenteModel.getValueAt(row, 0).toString());
                Medicamente updatedMedicament = new Medicamente();
                String newNumeMedicament = TextFieldForMedicamentName.getText();
                String newStrMedicamentWeight = ComboBoxForMedicamentWeight.getSelectedItem().toString();
                Integer newMedicamentWeight = null;
                if(newStrMedicamentWeight != "-"){
                    newMedicamentWeight = Integer.parseInt(newStrMedicamentWeight);
                }
                String newMedicamentType = ComboBoxForMedicamentType.getSelectedItem().toString();
                if(newMedicamentWeight == null){
                    updatedMedicament.setMedicamentNume(newNumeMedicament);
                }else{
                     updatedMedicament.setMedicamentNume(newNumeMedicament + "_" + newStrMedicamentWeight);
                }
                updatedMedicament.setMedicamentGramajMg(newMedicamentWeight);
                updatedMedicament.setTipMedicament(newMedicamentType);
                CRUD_Medicamente.update(updatedMedicament, medicamentID);
                medicamenteModel.setRowCount(0);
                disablingMedicamentsPanelElements();
                NoBordersForMedicamentsPanelElements();
                LoadDataIntoTables(TableList.indexOf(MedicamentsTable));
                clearingMedicamentElementsContents();
            }
        }
    }//GEN-LAST:event_UpdatBtnMedicamentActionPerformed

    private void ClearBtnMedicamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnMedicamentActionPerformed
        // TODO add your handling code here:
        String empty = "";
        TextFieldForMedicamentName.setText(empty);
        ComboBoxForMedicamentType.setSelectedItem("-");
        ComboBoxForMedicamentWeight.setSelectedItem("-");
        NoBordersForMedicamentsPanelElements();
    }//GEN-LAST:event_ClearBtnMedicamentActionPerformed

    private void MedicamentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MedicamentsTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel medicamenteModel = (DefaultTableModel) MedicamentsTable.getModel();
        int row  = MedicamentsTable.getSelectedRow();
        if(row != -1){
            String name = medicamenteModel.getValueAt(row, 1).toString();
            String[] parts = name.split("_");
            TextFieldForMedicamentName.setText(parts[0]);
            Object medicamentWeight = medicamenteModel.getValueAt(row, 2);
            if(medicamentWeight != null){
                String strMedicamentWeight = medicamentWeight.toString();
                ComboBoxForMedicamentWeight.setSelectedItem(strMedicamentWeight);
            }else{
                 ComboBoxForMedicamentWeight.setSelectedItem("-");
            }
            ComboBoxForMedicamentType.setSelectedItem(medicamenteModel.getValueAt(row, 3).toString());
            TextFieldForMedicamentName.setBorder(greenLine);
            ComboBoxForMedicamentType.setBorder(greenLine);
            ComboBoxForMedicamentWeight.setBorder(greenLine);
            enablingMedicamentsPanelElements();
            
        }
    }//GEN-LAST:event_MedicamentsTableMouseClicked
     /*                                   --------------------  MEDICAMENTE PANEL ------------------------- 
                                            --------------------   END  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    /*                                   --------------------  RETETE+MEDICAMETNELE PANEL ------------------------- 
                                            --------------------   START  ----------------------------
                                                     --------------------  ----------------------------
    */
    
    private void clearReteteCuMedicamenteleFields(){
        TextFieldForPrescriptionID.setText("");
        ComboBoxForQuantity.setSelectedItem(0);
        DefaultListModel emptyListModel = new DefaultListModel();
        ListForPacientRetete.setModel(emptyListModel);
    }
    
    private void NoBordersForReteteCuMedicamentelePanel(){
        TextFieldForPrescriptionID.setBorder(classicBorder);
        ComboBoxForMedicamentSelection.setBorder(classicComboBorder);
        ComboBoxForQuantity.setBorder(classicComboBorder);
    }
    
    private void disablinReteteCuMedicamentelePanelElements(){
        TextFieldForPrescriptionID.setEnabled(false);
        ComboBoxForMedicamentSelection.setEnabled(false);
        ComboBoxForQuantity.setEnabled(false);
        CHECKPrescriptionFound.setVisible(false);
        CheckPrescriptionNotFound.setVisible(false);
        CHECKPrescriptionListEmpty.setVisible(false);
        AddBtnReteteCuMedicamentele.setEnabled(false);
        DeleteBtnReteteCuMedicamentele.setEnabled(false);
        UpdateBtnReteteCuMedicamentele.setEnabled(false);
    }
    
    private void enablingReteteCuMedicamentelePanelElements(){
        TextFieldForPrescriptionID.setEnabled(true);
        ComboBoxForMedicamentSelection.setEnabled(true);
        ComboBoxForQuantity.setEnabled(true);
        AddBtnReteteCuMedicamentele.setEnabled(true);
        DeleteBtnReteteCuMedicamentele.setEnabled(true);
        UpdateBtnReteteCuMedicamentele.setEnabled(true);
    }
    
    private void TextFieldForPrescriptionIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForPrescriptionIDMouseClicked
        // TODO add your handling code here:
        TextFieldForPrescriptionID.setEnabled(true);
    }//GEN-LAST:event_TextFieldForPrescriptionIDMouseClicked

    private void TextFieldForPrescriptionIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForPrescriptionIDKeyReleased
        // TODO add your handling code here:
        Integer INDEX_OF_PRESCRIPTION_ID = TextFields.indexOf(TextFieldForPrescriptionID);
        if(CheckCurrentTextFields(INDEX_OF_PRESCRIPTION_ID)){
            CheckPrescriptionNotFound.setVisible(false);
            CHECKPrescriptionFound.setVisible(true);
            TextFieldForPrescriptionID.setBorder(greenLine);
            CHECKPrescriptionListEmpty.setVisible(false);
        }else{
            CheckPrescriptionNotFound.setVisible(true);
            CHECKPrescriptionFound.setVisible(false);
            TextFieldForPrescriptionID.setBorder(redLine);
            CHECKPrescriptionListEmpty.setVisible(true);
            DefaultListModel emptyListModelForRetete = new DefaultListModel();
            ListForPacientRetete.setModel(emptyListModelForRetete);
        }
    }//GEN-LAST:event_TextFieldForPrescriptionIDKeyReleased

    private void ComboBoxForMedicamentSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForMedicamentSelectionItemStateChanged
        // TODO add your handling code here:
        Integer INDEX_OF_MEDICAMENT_COMBO_BOX = dateComboBoxes.indexOf(ComboBoxForMedicamentSelection);
        if(CheckCurrentComboBox(INDEX_OF_MEDICAMENT_COMBO_BOX)){
            ComboBoxForMedicamentSelection.setBorder(greenLine);
            AddBtnReteteCuMedicamentele.setEnabled(true);
        }else{
            ComboBoxForMedicamentSelection.setBorder(redLine);
            AddBtnReteteCuMedicamentele.setEnabled(false);
        }
    }//GEN-LAST:event_ComboBoxForMedicamentSelectionItemStateChanged

    private void ComboBoxForQuantityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForQuantityItemStateChanged
        // TODO add your handling code here:
        ComboBoxForQuantity.setBorder(greenLine);
        
    }//GEN-LAST:event_ComboBoxForQuantityItemStateChanged

    private void AddBtnReteteCuMedicamenteleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnReteteCuMedicamenteleActionPerformed
        // TODO add your handling code here:
        DefaultTableModel reteteCuMedicamenteleModel = (DefaultTableModel) ReteteCuMedicamenteleTable.getModel();
        LineBorder TF_BORDER_PRESCRIPTION_ID = (LineBorder) TextFieldForPrescriptionID.getBorder();
        LineBorder ComboBox_Border_Medicament_Name = (LineBorder) ComboBoxForMedicamentSelection.getBorder();
        if(TF_BORDER_PRESCRIPTION_ID.getLineColor() == Color.green){
            Object prescriptionID = ListForPacientRetete.getSelectedValue();
            if(prescriptionID != null){
                Integer prescriptionToBeAdded = Integer.parseInt(prescriptionID.toString());
                if(ComboBox_Border_Medicament_Name.getLineColor() == Color.green){
                    String medicamentName = ComboBoxForMedicamentSelection.getSelectedItem().toString();
                    Integer medicamentID = null;
                    for(Map.Entry<Integer , String> entry : MedicamentsTypeMap.entrySet()){
                        String value = entry.getValue();
                        if(medicamentName == value)
                            medicamentID = entry.getKey();
                    }
                    Integer quantity = Integer.parseInt(ComboBoxForQuantity.getSelectedItem().toString());
                    ReteteCuMedicamentele newRetetaCuMedicamentul = new ReteteCuMedicamentele();
                    Retete retetaToBeSet = CRUD_Retete.findById(prescriptionToBeAdded);
                    Medicamente medicamentToBeSet = CRUD_Medicamente.findById(medicamentID);
                    if(retetaToBeSet != null && medicamentToBeSet != null){
                        newRetetaCuMedicamentul.setMedicament(medicamentToBeSet);
                        newRetetaCuMedicamentul.setReteta(retetaToBeSet);
                    }
                    if(quantity == 0){
                        newRetetaCuMedicamentul.setCantitate(null);
                    }else
                        newRetetaCuMedicamentul.setCantitate(quantity);
                    CRUD_reteteCuMedicamentele.save(newRetetaCuMedicamentul);
                    reteteCuMedicamenteleModel.setRowCount(0);
                    LoadDataIntoTables(TableList.indexOf(ReteteCuMedicamenteleTable));
                    NoBordersForReteteCuMedicamentelePanel();
                    disablinReteteCuMedicamentelePanelElements();
                    clearReteteCuMedicamenteleFields();
                }
            }
        }
    }//GEN-LAST:event_AddBtnReteteCuMedicamenteleActionPerformed

    private void DeleteBtnReteteCuMedicamenteleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnReteteCuMedicamenteleActionPerformed
        // TODO add your handling code here:
        DefaultTableModel reteteCuMedicamenteleModel = (DefaultTableModel) ReteteCuMedicamenteleTable.getModel();
        int row = ReteteCuMedicamenteleTable.getSelectedRow();
        if(row != -1){
            LineBorder TF_BORDER_PRESCRIPTION_ID = (LineBorder) TextFieldForPrescriptionID.getBorder();
            LineBorder ComboBox_Border_Medicament_Name = (LineBorder) ComboBoxForMedicamentSelection.getBorder();
            if(TF_BORDER_PRESCRIPTION_ID.getLineColor() == Color.green && ComboBox_Border_Medicament_Name.getLineColor() == Color.green){
                Integer IDtoBeDeleted = Integer.parseInt(reteteCuMedicamenteleModel.getValueAt(row, 0).toString());
                ReteteCuMedicamentele toBeDeleted = CRUD_reteteCuMedicamentele.findById(IDtoBeDeleted);
                CRUD_reteteCuMedicamentele.delete(toBeDeleted);
                NoBordersForReteteCuMedicamentelePanel();
                disablinReteteCuMedicamentelePanelElements();
                clearReteteCuMedicamenteleFields();
                reteteCuMedicamenteleModel.setRowCount(0);
                LoadDataIntoTables(TableList.indexOf(ReteteCuMedicamenteleTable));
            } 
        }
    }//GEN-LAST:event_DeleteBtnReteteCuMedicamenteleActionPerformed

    private void UpdateBtnReteteCuMedicamenteleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnReteteCuMedicamenteleActionPerformed
        // TODO add your handling code here:
        DefaultTableModel reteteCuMedicamenteleModel = (DefaultTableModel) ReteteCuMedicamenteleTable.getModel();
        int row = ReteteCuMedicamenteleTable.getSelectedRow();
        if(row != -1){
            LineBorder TF_BORDER_PRESCRIPTION_ID = (LineBorder) TextFieldForPrescriptionID.getBorder();
            LineBorder ComboBox_Border_Medicament_Name = (LineBorder) ComboBoxForMedicamentSelection.getBorder();
            if(TF_BORDER_PRESCRIPTION_ID.getLineColor() == Color.green && ComboBox_Border_Medicament_Name.getLineColor() == Color.green){
                Integer IDtoBeUpdated = Integer.parseInt(reteteCuMedicamenteleModel.getValueAt(row, 0).toString());
                ReteteCuMedicamentele updatedRetetaCuMedicamentele = new ReteteCuMedicamentele();
                Object prescriptionID = ListForPacientRetete.getSelectedValue();
                if(prescriptionID != null){
                    Integer retetaID = Integer.parseInt(prescriptionID.toString());
                    String medicamentToBeSet = ComboBoxForMedicamentSelection.getSelectedItem().toString();
                    Integer quantity = Integer.parseInt(ComboBoxForQuantity.getSelectedItem().toString());
                    ReteteCuMedicamentele updatedRetetaCuMedicamentul = new ReteteCuMedicamentele();
                    if(quantity == 0){
                        updatedRetetaCuMedicamentul.setCantitate(null);
                    }else{
                        updatedRetetaCuMedicamentul.setCantitate(quantity);
                    }
                    CRUD_reteteCuMedicamentele.update(updatedRetetaCuMedicamentul, IDtoBeUpdated, medicamentToBeSet, retetaID);
                    NoBordersForReteteCuMedicamentelePanel();
                    disablinReteteCuMedicamentelePanelElements();
                    clearReteteCuMedicamenteleFields();
                    reteteCuMedicamenteleModel.setRowCount(0);
                    LoadDataIntoTables(TableList.indexOf(ReteteCuMedicamenteleTable));
                }
                
            } 
        }
    }//GEN-LAST:event_UpdateBtnReteteCuMedicamenteleActionPerformed

    private void ClearBtnReteteCuMedicamenteleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnReteteCuMedicamenteleActionPerformed
        // TODO add your handling code here:
        String empty = "";
        TextFieldForPrescriptionID.setText(empty);
        DefaultListModel emptyListModel = new DefaultListModel();
        ListForPacientRetete.setModel(emptyListModel);
        ComboBoxForMedicamentSelection.setSelectedItem("-");
        ComboBoxForQuantity.setSelectedItem(0);
        CHECKPrescriptionListEmpty.setVisible(true);
        CheckPrescriptionNotFound.setVisible(true);
        disablinReteteCuMedicamentelePanelElements();
        NoBordersForReteteCuMedicamentelePanel();
    }//GEN-LAST:event_ClearBtnReteteCuMedicamenteleActionPerformed

    private void ReteteCuMedicamenteleTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReteteCuMedicamenteleTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel reteteCuMedicamenteleModel = (DefaultTableModel) this.ReteteCuMedicamenteleTable.getModel();
        int row = ReteteCuMedicamenteleTable.getSelectedRow();
        if(row != -1){
            Integer retetaID = Integer.parseInt(reteteCuMedicamenteleModel.getValueAt(row, 1).toString());
            Retete pacientReteta = CRUD_Retete.findById(retetaID);
            if(pacientReteta != null){
                TextFieldForPrescriptionID.setText(pacientReteta.getPacientRetete().getPacientCnp());
                DefaultListModel currentReteteForPacient = new DefaultListModel();
                Pacienti currentPacient = CRUD_Pacienti.findById(pacientReteta.getPacientRetete().getPacientCnp());
                List<Retete> selectedPacientRetete = CRUD_Retete.findByPacient(currentPacient);
                for(Retete IT : selectedPacientRetete){
                    currentReteteForPacient.addElement(IT.getRetetaId());
                }
                ListForPacientRetete.setModel(currentReteteForPacient);
                ComboBoxForMedicamentSelection.setSelectedItem(reteteCuMedicamenteleModel.getValueAt(row, 2).toString());
                Object quantity = reteteCuMedicamenteleModel.getValueAt(row, 3);
                Integer quantityDefault = 0;
                if(quantity == null){
                    ComboBoxForQuantity.setSelectedItem(quantityDefault);
                }else{
                    Integer newQuantity = Integer.parseInt(quantity.toString());
                    ComboBoxForQuantity.setSelectedItem(newQuantity);
                }
                ComboBoxForMedicamentSelection.setBorder(greenLine);
                ComboBoxForQuantity.setBorder(greenLine);
                TextFieldForPrescriptionID.setBorder(greenLine);
                CHECKPrescriptionFound.setVisible(true);
                enablingReteteCuMedicamentelePanelElements();
            }
            
        }
    }//GEN-LAST:event_ReteteCuMedicamenteleTableMouseClicked
    /*                            --------------------  RETETE+MEDICAMETNELE PANEL ------------------------- 
                                          --------------------   END  ----------------------------
                                              --------------------  ----------------------------
    */
    
    /* -------------------------------------------------- JOIN COMMANDS START -------------------------------------------------- */
    /*
        All pacients who have on their prescription the medicament with name [input name];
    
        "SELECT p FROM Pacienti p " +
            "JOIN Retete r ON p.pacientCnp = r.pacientRetete.pacientCnp " +
            "JOIN ReteteCuMedicamentele rm ON r.retetaId = rm.reteta.retetaId " +
            "JOIN TestePacienti t ON p.pacientCnp = t.pacienti.pacientCnp " +
            "WHERE rm.medicament.medicamentId = (SELECT m.medicamentId " +
                                                "FROM Medicamente m " +
                                                "WHERE m.medicamentNume = :medicament_name) " +
            "AND t.testeLaborator.numeTest = (SELECT tl.numeTest " +
                                             "FROM TesteLaborator tl " +
                                             "WHERE tl.numeTest = :test_name)"
    */
    
    private void JoinCommandsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_JoinCommandsItemStateChanged
        // TODO add your handling code here:
        if(JoinCommands.getSelectedItem().toString() != "-"){
            JoinCommands.setBorder(greenLine);
        }else{
            JoinCommands.setBorder(redLine);
        }
    }//GEN-LAST:event_JoinCommandsItemStateChanged

    private void MedicamentBoxForJoinQUERYItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MedicamentBoxForJoinQUERYItemStateChanged
        // TODO add your handling code here:
        if(MedicamentBoxForJoinQUERY.getSelectedItem().toString() != "-"){
            MedicamentBoxForJoinQUERY.setBorder(greenLine);
        }else{
            MedicamentBoxForJoinQUERY.setBorder(redLine);
        }
    }//GEN-LAST:event_MedicamentBoxForJoinQUERYItemStateChanged

    private void SelectButtonForJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectButtonForJoinActionPerformed
        // TODO add your handling code here:
        LineBorder JoinBoxBorder = (LineBorder) JoinCommands.getBorder();
        LineBorder MedicamentNameJoinBoxQUERYBorder = (LineBorder) MedicamentBoxForJoinQUERY.getBorder();
        LineBorder TesteLaboratorJoinBoxQUERYBorder = (LineBorder) TestNameForJoinQUERY.getBorder();
        if(JoinBoxBorder.getLineColor() == Color.green && MedicamentNameJoinBoxQUERYBorder.getLineColor() == Color.green && TesteLaboratorJoinBoxQUERYBorder.getLineColor() == Color.green){
            DefaultTableModel pacientiModel = (DefaultTableModel) PacientsTable.getModel();
            pacientiModel.setRowCount(0);
            String medicamentName = MedicamentBoxForJoinQUERY.getSelectedItem().toString();
            String testName = TestNameForJoinQUERY.getSelectedItem().toString();
            List<Pacienti> queryJoinResult = CRUD_Pacienti.pacientsWhoHaveOnPrescriptionMedicamentWithNameAndWithTestName(medicamentName , testName);
            if(!queryJoinResult.isEmpty()){
                for(Pacienti pacientiIT : queryJoinResult){
                    pacientiModel.addRow(
                        new Object[]{pacientiIT.getPacientCnp() , pacientiIT.getPacientDataNastere() , pacientiIT.getPacientOrasNastere(),
                                    pacientiIT.getPacientNume() , pacientiIT.getPacientPrenume() , pacientiIT.getPacientPolitaMedicala()}
                    );
                }
            }
            
        }
    }//GEN-LAST:event_SelectButtonForJoinActionPerformed
    
    private void TestNameForJoinQUERYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestNameForJoinQUERYActionPerformed
        // TODO add your handling code here:
        if(TestNameForJoinQUERY.getSelectedItem().toString() != "-"){
            TestNameForJoinQUERY.setBorder(greenLine);
        }else{
            TestNameForJoinQUERY.setBorder(redLine);
        }
    }//GEN-LAST:event_TestNameForJoinQUERYActionPerformed
        /* 
    
             All pacients who have on their prescription the medicament with name [input name];
        
            "SELECT p FROM Pacienti p " +
            "JOIN Retete r ON p.pacientCnp = r.pacientRetete.pacientCnp " +
            "JOIN ReteteCuMedicamentele rm ON r.retetaId = rm.reteta.retetaId " +
            "JOIN TestePacienti t ON p.pacientCnp = t.pacienti.pacientCnp " +
            "WHERE rm.medicament.medicamentId = (SELECT m.medicamentId " +
                                                "FROM Medicamente m " +
                                                "WHERE m.medicamentNume = :medicament_name) " +
            "AND t.testeLaborator.numeTest = (SELECT tl.numeTest " +
                                             "FROM TesteLaborator tl " +
                                             "WHERE tl.numeTest = :test_name)"                                                                                                */
     /* -------------------------------------------------- JOIN COMMANDS END -------------------------------------------------- */
    
    /* -------------------------- DOCTOR PANEL ------------------------- */
        /* --------------------------START------------------------------*/
    private void TextFieldForDoctorPrenameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForDoctorPrenameKeyReleased
        // TODO add your handling code here:
        Integer TEXTFIELD_PRENAME_INDEX = TextFields.indexOf(TextFieldForDoctorPrename);
        if(CheckCurrentTextFields(TEXTFIELD_PRENAME_INDEX)){
            TextFieldForDoctorPrename.setBorder(greenLine);
        }else{
            TextFieldForDoctorPrename.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForDoctorPrenameKeyReleased

    private void ClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnActionPerformed
        String empty = "";
        TextFieldForDoctorCUI.setText(empty);
        TextFieldForDoctorName.setText(empty);
        TextFieldForDoctorPrename.setText(empty);
        ComboBoxForDay.setSelectedItem("-");
        ComboBoxForYear.setSelectedItem("-");
        ComboBoxForMonth.setSelectedItem("-");
        ComboBoxForDoctorType.setSelectedItem("-");
        disablingDoctorPanelElements();
        NoBordersForDoctorsPanel();
    }//GEN-LAST:event_ClearBtnActionPerformed

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        int row = DoctorsTable.getSelectedRow();
        DefaultTableModel docModel = (DefaultTableModel) DoctorsTable.getModel();
        String oldCUI = docModel.getValueAt(row, 0).toString();
        Doctori newDoctori = new Doctori();
        newDoctori.setDoctorCUI(Integer.parseInt(TextFieldForDoctorCUI.getText()));
        newDoctori.setDoctorNume(TextFieldForDoctorName.getText());
        newDoctori.setDoctorPrenume(TextFieldForDoctorPrename.getText());
        String year = null , month = null , day = null , birthDate = null;
        year = ComboBoxForYear.getSelectedItem().toString();
        month = ComboBoxForMonth.getSelectedItem().toString();
        day = ComboBoxForDay.getSelectedItem().toString();
        
        if(year != "-" && month != "-" && day != "-"){
            if(day.length() == 1 && month.length() == 1){
                birthDate = year + "-" + "0" + month + "-" + "0" + day;
            }else if(day.length() == 1 && month.length() == 2){
                birthDate = year + "-"  + month + "-" + "0" +  day;
            }else if(day.length() == 2 && month.length() == 1){
                birthDate = year + "-" + "0" + month + "-"  +  day;
            }else{
                birthDate = year + "-"  + month + "-"  +  day;
            }
            newDoctori.setDoctorDataNastere(Date.valueOf(birthDate));
        }else{
             newDoctori.setDoctorDataNastere(null);
        }
        
        String doctorType = ComboBoxForDoctorType.getSelectedItem().toString();
        CRUD_Doctor.update(newDoctori, Integer.parseInt(oldCUI), doctorType);
        docModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(DoctorsTable));
        disablingDoctorPanelElements();
        clearingDoctorsElements();
        NoBordersForDoctorsPanel();
    }//GEN-LAST:event_UpdateBtnActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        // TODO add your handling code here:
        int row = DoctorsTable.getSelectedRow();
        DefaultTableModel docModel = (DefaultTableModel) DoctorsTable.getModel();
        Integer doctor_CUI = Integer.parseInt(TextFieldForDoctorCUI.getText());
        Doctori doctor = CRUD_Doctor.findById(doctor_CUI);
        docModel.removeRow(row);
        CRUD_Doctor.delete(doctor);
        docModel.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(DoctorsTable));
        disablingDoctorPanelElements();
        clearingDoctorsElements();
        NoBordersForDoctorsPanel();
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        // new doctor that will be added
        Doctori newDoctor = new Doctori();
        String name = null , prename = null , day = null, month = null, year = null , birthDATE;
        Integer CUI = null;
        // input from user
        // doctur CUI checks
        Border TF_CUIBorder = TextFieldForDoctorCUI.getBorder();
        Border TF_NameBorder = TextFieldForDoctorName.getBorder();
        Border TF_PrenameBorder = TextFieldForDoctorPrename.getBorder();
        if(((LineBorder)TF_CUIBorder).getLineColor() == Color.green){
            String CUIFromTextField = TextFieldForDoctorCUI.getText();
            Integer CUIForDocInteger = Integer.parseInt(CUIFromTextField);
            CUI = CUIForDocInteger;
            if(((LineBorder)TF_NameBorder).getLineColor() == Color.green){
                String NameFromTextField = TextFieldForDoctorName.getText();
                name = NameFromTextField;
                if(((LineBorder)TF_PrenameBorder).getLineColor() == Color.green){
                    String PrenameFromTextField = TextFieldForDoctorPrename.getText();
                    prename = PrenameFromTextField;
                    Integer indexOfYear = dateComboBoxes.indexOf(ComboBoxForYear);
                    Integer indexOfMonth = dateComboBoxes.indexOf(ComboBoxForMonth);
                    Integer indexOfDay = dateComboBoxes.indexOf(ComboBoxForDay);
                    Integer indexOfDoctorType = dateComboBoxes.indexOf(ComboBoxForDoctorType);
                    if(CheckCurrentComboBox(indexOfYear)){
                        String getDoctorYear = ComboBoxForYear.getSelectedItem().toString();
                        year = getDoctorYear;
                        if(CheckCurrentComboBox(indexOfMonth)){
                            String getDoctorMonth = ComboBoxForMonth.getSelectedItem().toString();
                            month = getDoctorMonth;
                            if(CheckCurrentComboBox(indexOfDay)){
                                String getDoctorDay = ComboBoxForDay.getSelectedItem().toString();
                                day = getDoctorDay;
                                String birthDate = null;
                                if(year != "-" && month != "-" && day != "-"){
                                    if(day.length() == 1 && month.length() == 1){
                                        birthDate = year + "-" + "0" + month + "-" + "0" + day;
                                    }else if(day.length() == 1 && month.length() == 2){
                                        birthDate = year + "-"  + month + "-" + "0" +  day;
                                    }else if(day.length() == 2 && month.length() == 1){
                                        birthDate = year + "-" + "0" + month + "-"  +  day;
                                    }else{
                                        birthDate = year + "-"  + month + "-"  +  day;
                                    }
                                }
                                Date newDate = null;
                                if(birthDate != null){
                                    newDate = Date.valueOf(birthDate);
                                }
                                if(CheckCurrentComboBox(indexOfDoctorType)){
                                    String doctorType = ComboBoxForDoctorType.getSelectedItem().toString();
                                    TipDoctori currentDoctorType = CRUD_DoctorType.findBynumeSpecializare(doctorType);
                                    newDoctor.setDoctorCUI(CUI);
                                    newDoctor.setDoctorDataNastere(newDate);
                                    newDoctor.setDoctorNume(name);
                                    newDoctor.setDoctorPrenume(prename);
                                    newDoctor.setTipDoctor(currentDoctorType);
                                    CRUD_Doctor.save(newDoctor);
                                    DefaultTableModel doctorsTableModel = (DefaultTableModel) this.DoctorsTable.getModel();
                                    Integer DOCTORS_TABLE_INDEX = TableList.indexOf(DoctorsTable);
                                    doctorsTableModel.addRow(new Object[]{CUI , DoctorsTypeMap.get(currentDoctorType.getTipDoctorId()) , name , prename , newDate});
                                    disablingDoctorPanelElements();
                                    NoBordersForDoctorsPanel();
                                    clearingDoctorsElements();
                                    doctorsTableModel.setRowCount(0);
                                    LoadDataIntoTables(DOCTORS_TABLE_INDEX);

                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_AddBtnActionPerformed

    private void ComboBoxForDoctorTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForDoctorTypeItemStateChanged
        // TODO add your handling code here:
        Integer ComboBoxDT_INDEX = dateComboBoxes.indexOf(ComboBoxForDoctorType);
        if(CheckCurrentComboBox(ComboBoxDT_INDEX)){
            ComboBoxForDoctorType.setBorder(greenLine);
            CHECKLabelForDoctorType.setForeground(green);
            CHECKLabelForDoctorType.setVisible(false);
        }else{
            ComboBoxForDoctorType.setBorder(redLine);
            CHECKLabelForDoctorType.setForeground(red);
            CHECKLabelForDoctorType.setVisible(true);
        }
    }//GEN-LAST:event_ComboBoxForDoctorTypeItemStateChanged

    private void ComboBoxForDayItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForDayItemStateChanged
        // TODO add your handling code here:
        Integer ComboBoxForDay_INDEX = dateComboBoxes.indexOf(ComboBoxForDay);
        if(CheckCurrentComboBox(ComboBoxForDay_INDEX)){
            ComboBoxForDay.setBorder(greenLine);
        }else{
            ComboBoxForDay.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForDayItemStateChanged

    private void ComboBoxForMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForMonthItemStateChanged
        // TODO add your handling code here:
        Integer ComboBoxForMonth_INDEX = dateComboBoxes.indexOf(ComboBoxForMonth);
        if(CheckCurrentComboBox(ComboBoxForMonth_INDEX)){
            ComboBoxForMonth.setBorder(greenLine);
        }else{
            ComboBoxForMonth.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForMonthItemStateChanged

    private void ComboBoxForYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForYearItemStateChanged
        // TODO add your handling code here:
        Integer ComboBoxForYear_INDEX = dateComboBoxes.indexOf(ComboBoxForYear);

        if(CheckCurrentComboBox(ComboBoxForYear_INDEX)){
            ComboBoxForYear.setBorder(greenLine);
        }else{
            ComboBoxForYear.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForYearItemStateChanged

    private void TextFieldForDoctorNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForDoctorNameKeyReleased
        // TODO add your handling code here:
        Integer TEXTFIELD_NAME_INDEX = TextFields.indexOf(TextFieldForDoctorName);
        if(CheckCurrentTextFields(TEXTFIELD_NAME_INDEX)){
            TextFieldForDoctorName.setBorder(greenLine);
        }else{
            TextFieldForDoctorName.setBorder(redLine);
        }
    }//GEN-LAST:event_TextFieldForDoctorNameKeyReleased

    private void TextFieldForDoctorCUIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldForDoctorCUIKeyReleased
        // TODO add your handling code here:
        Integer TEXTFIELD_CUI_INDEX = TextFields.indexOf(TextFieldForDoctorCUI);
        if(CheckCurrentTextFields(TEXTFIELD_CUI_INDEX)){
            LabelForCUI1.setVisible(false);
            LabelForCUI2.setVisible(false);
        }else{
            LabelForCUI1.setVisible(true);
            LabelForCUI2.setVisible(true);
        }
    }//GEN-LAST:event_TextFieldForDoctorCUIKeyReleased

    private void TextFieldForDoctorCUIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldForDoctorCUIMouseClicked
        TextFieldForDoctorCUI.setEnabled(true);
    }//GEN-LAST:event_TextFieldForDoctorCUIMouseClicked
    /* -------------------------- DOCTOR PANEL ------------------------- */
        /* --------------------------END------------------------------*/
    
    /* --------------------------------------------- GROUP BY COMMANDS ON DOCTOR PANEL---------------------------------------------  */
    /* "SELECT COUNT(r.retetaId), r.doctorRetete.doctorCUI,"
                                                            + "FROM Retete r"
                                                            + "GROUP BY (r.doctorRetete.doctorCUI)"
                                                            + "HAVING r.doctorRetete.doctorCUI >: reteteCount"*/
    private void ComboBoxForDoctorGROUPBYItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxForDoctorGROUPBYItemStateChanged
        // TODO add your handling code here:
        if(ComboBoxForDoctorGROUPBY.getSelectedItem().toString() != "-"){
           ComboBoxForDoctorGROUPBY.setBorder(greenLine);
        }else{
           ComboBoxForDoctorGROUPBY.setBorder(redLine);
        }
    }//GEN-LAST:event_ComboBoxForDoctorGROUPBYItemStateChanged

    private void BoxForGroupByOptionsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BoxForGroupByOptionsItemStateChanged
        // TODO add your handling code here:
        if(BoxForGroupByOptions.getSelectedItem().toString() != "-"){
           BoxForGroupByOptions.setBorder(greenLine);
        }else{
           BoxForGroupByOptions.setBorder(redLine);
        }
    }//GEN-LAST:event_BoxForGroupByOptionsItemStateChanged
    
    private boolean hasSwitchedToGroupedView = false;
    
    private void GroupByBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupByBtnActionPerformed
        // TODO add your handling code here:
        LineBorder BoxDoctorGroupBy_Border = (LineBorder) ComboBoxForDoctorGROUPBY.getBorder();
        LineBorder BoxDoctorGroupByOptions_Border = (LineBorder) BoxForGroupByOptions.getBorder();
        if(BoxDoctorGroupBy_Border.getLineColor() == Color.green && BoxDoctorGroupByOptions_Border.getLineColor() == Color.green){
            DefaultTableModel doctorTableModel = (DefaultTableModel) this.DoctorsTable.getModel();
            DefaultTableModel groupByQueryResultTableModel = new DefaultTableModel();
            groupByQueryResultTableModel.addColumn("NR_RETETE");
            groupByQueryResultTableModel.addColumn("DOCTOR CUI");
            DoctorsTable.setModel(groupByQueryResultTableModel);
            Integer retetaCount = Integer.parseInt(BoxForGroupByOptions.getSelectedItem().toString());
            List<DoctoriDTO> queryDoctorsList = CRUD_Doctor.getEveryDoctorsReteteLessThanACount(retetaCount);
            for(DoctoriDTO dto : queryDoctorsList){
                groupByQueryResultTableModel.addRow(
                    new Object[]{dto.getReteteCount(), dto.getDoctorCUI()}
                );
            }
            BoxForGroupByOptions.setBorder(classicComboBorder);
            ComboBoxForDoctorGROUPBY.setBorder(classicComboBorder);
            if (!hasSwitchedToGroupedView) {
                oldModel =  doctorTableModel;
                hasSwitchedToGroupedView = true;
            }
        }
    }//GEN-LAST:event_GroupByBtnActionPerformed
    /* --------------------------------------------- GROUP BY COMMANDS ON DOCTOR PANEL---------------------------------------------  */
    
    
    /* VIEW THAT ALLOWS DML ACTIONS FOR CABINETE_DOCTORI */
    /* ------------------------------------------------- */
    
    private void VIEWNoBordersForCabineteDoctori(){
        VIEWTF_FOR_CUI.setBorder(classicBorder);
        VIEWTF_FOR_CabinetNrStada.setBorder(classicBorder);
        VIEWTF_FOR_CabinetNume.setBorder(classicBorder);
        VIEWTF_FOR_CabinetOras.setBorder(classicBorder);
        VIEWTF_FOR_CabineteCodPostal.setBorder(classicBorder);
    }
    
    
    
    private void DMLViewForCabineteDoctoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DMLViewForCabineteDoctoriActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card11");
        DefaultTableModel VIEWmodelForCabineteDoctoriTable = (DefaultTableModel) VIEWTabel_FOR_CabineteDoctori.getModel();
        VIEWmodelForCabineteDoctoriTable.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(VIEWTabel_FOR_CabineteDoctori));
        VIEWNoBordersForCabineteDoctori();
        VIEWClearFieldsForCabineteDoctori();
        
    }//GEN-LAST:event_DMLViewForCabineteDoctoriActionPerformed

    private void VIEWTF_FOR_CUIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VIEWTF_FOR_CUIKeyReleased
        // TODO add your handling code here:
        String strCUI = VIEWTF_FOR_CUI.getText();
        if(strCUI.matches("[1-9]\\d{7}")){
            Integer intCUI = Integer.parseInt(strCUI);
            if(intCUI >= 10000000 && intCUI <= 99999999){
                Doctori toBeFoundInDb = CRUD_Doctor.findById(intCUI);
                if(toBeFoundInDb != null){
                    VIEWTF_FOR_CUI.setBorder(greenLine);
                    VIEWCheckCUI.setVisible(false);
                }else{
                    VIEWTF_FOR_CUI.setBorder(redLine);
                    VIEWCheckCUI.setVisible(true);
                }
            }else{
                VIEWTF_FOR_CUI.setBorder(redLine);
                VIEWCheckCUI.setVisible(true);
            }
        }else{
            VIEWTF_FOR_CUI.setBorder(redLine);
            VIEWCheckCUI.setVisible(true);
        }
    }//GEN-LAST:event_VIEWTF_FOR_CUIKeyReleased

    private void VIEWTF_FOR_CabinetNumeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VIEWTF_FOR_CabinetNumeKeyReleased
        // TODO add your handling code here:
        String cabinetName = VIEWTF_FOR_CabinetNume.getText();
        if(cabinetName.matches("^[a-zA-Z-\\s]+$")){
            VIEWTF_FOR_CabinetNume.setBorder(greenLine);
        }else{
            VIEWTF_FOR_CabinetNume.setBorder(redLine);
        }
    }//GEN-LAST:event_VIEWTF_FOR_CabinetNumeKeyReleased

    private void VIEWTF_FOR_CabineteCodPostalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VIEWTF_FOR_CabineteCodPostalKeyReleased
        // TODO add your handling code here:
        String postalCode = VIEWTF_FOR_CabineteCodPostal.getText();
        if(postalCode.matches("^\\d{6}$")){
            VIEWTF_FOR_CabineteCodPostal.setBorder(greenLine);
        }else{
            VIEWTF_FOR_CabineteCodPostal.setBorder(redLine);
        }
    }//GEN-LAST:event_VIEWTF_FOR_CabineteCodPostalKeyReleased

    private void VIEWTF_FOR_CabinetOrasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VIEWTF_FOR_CabinetOrasKeyReleased
        // TODO add your handling code here:
        String city = VIEWTF_FOR_CabinetOras.getText();
        if(city.matches("^[a-zA-Z-\\s]+$")){
            VIEWTF_FOR_CabinetOras.setBorder(greenLine);
        }else{
            VIEWTF_FOR_CabinetOras.setBorder(redLine);
        }
    }//GEN-LAST:event_VIEWTF_FOR_CabinetOrasKeyReleased

    private void VIEWTF_FOR_CabinetNrStadaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VIEWTF_FOR_CabinetNrStadaKeyReleased
        // TODO add your handling code here:
        if(CheckOnlyForNumber(VIEWTF_FOR_CabinetNrStada)){
            VIEWTF_FOR_CabinetNrStada.setBorder(greenLine);
        }else{
            VIEWTF_FOR_CabinetNrStada.setBorder(redLine);
        }
    }//GEN-LAST:event_VIEWTF_FOR_CabinetNrStadaKeyReleased

    private void VIEWAddBtnCabineteDoctoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIEWAddBtnCabineteDoctoriActionPerformed
        // TODO add your handling code here:
        DefaultTableModel VIEWModelForCabineteDoctori  = (DefaultTableModel) this.VIEWTabel_FOR_CabineteDoctori.getModel();
        LineBorder VIEWTF_CUI_border = (LineBorder) VIEWTF_FOR_CUI.getBorder();
        LineBorder VIEWTF_NUME_border = (LineBorder) VIEWTF_FOR_CabinetNume.getBorder();
        LineBorder VIEWTF_CODPOSTAL_border = (LineBorder) VIEWTF_FOR_CabineteCodPostal.getBorder();
        LineBorder VIEWTF_ORAS_border = (LineBorder) VIEWTF_FOR_CabinetOras.getBorder();
        LineBorder VIEWTF_NR_STRADA_border = (LineBorder) VIEWTF_FOR_CabinetNrStada.getBorder();
        Color TF_CUI_Color = VIEWTF_CUI_border.getLineColor();
        Color TF_NUME_Color = VIEWTF_NUME_border.getLineColor();
        Color TF_CODPOSTAL_Color = VIEWTF_CODPOSTAL_border.getLineColor();
        Color TF_ORAS_Color = VIEWTF_ORAS_border.getLineColor();
        Color TF_NR_STRADA_Color = VIEWTF_NR_STRADA_border.getLineColor();
        if(TF_CUI_Color == Color.green && TF_NUME_Color == Color.green &&
           TF_CODPOSTAL_Color == Color.green && TF_ORAS_Color == Color.green && TF_NR_STRADA_Color == Color.green){
            
           CabineteDoctoriVIEW newCabinetInVIEW = new CabineteDoctoriVIEW();
           
           Integer doctorCUI = Integer.parseInt(VIEWTF_FOR_CUI.getText());
           final String cabinetPrefix = "C.M.I. ";
           String cabinetNume = VIEWTF_FOR_CabinetNume.getText();
           String cabinetCodPostal = VIEWTF_FOR_CabineteCodPostal.getText();
           String cabinetOras = VIEWTF_FOR_CabinetOras.getText();
           Integer cabinetNumarStrada = Integer.parseInt(VIEWTF_FOR_CabinetNrStada.getText());
           
           newCabinetInVIEW.setDoctorCUI(doctorCUI);
           newCabinetInVIEW.setCabinetNume(cabinetPrefix + cabinetNume);
           newCabinetInVIEW.setCabinetOras(cabinetOras);
           newCabinetInVIEW.setCodPostal(cabinetCodPostal);
           newCabinetInVIEW.setCabinetNrStrada(cabinetNumarStrada);
           
           CRUD_cabineteDoctoriView.add(newCabinetInVIEW);
           VIEWNoBordersForCabineteDoctori();
           VIEWModelForCabineteDoctori.setRowCount(0);
           LoadDataIntoTables(TableList.indexOf(VIEWTabel_FOR_CabineteDoctori));
           VIEWTF_FOR_CUI.setEnabled(true);
          
        }
        
    }//GEN-LAST:event_VIEWAddBtnCabineteDoctoriActionPerformed

    private void VIEWDeleteBtnForCabineteDoctoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIEWDeleteBtnForCabineteDoctoriActionPerformed
        // TODO add your handling code here:
        DefaultTableModel VIEWModelForCabineteDoctori  = (DefaultTableModel) this.VIEWTabel_FOR_CabineteDoctori.getModel();
        int row = VIEWTabel_FOR_CabineteDoctori.getSelectedRow();
        if(row != -1){
            Integer cabinetID = Integer.parseInt(VIEWModelForCabineteDoctori.getValueAt(row, 0).toString());
            CabineteDoctoriVIEW toBeDeletedInVIEW = CRUD_cabineteDoctoriView.findById(cabinetID);
            if(toBeDeletedInVIEW != null){
                CRUD_cabineteDoctoriView.delete(toBeDeletedInVIEW);
                VIEWNoBordersForCabineteDoctori();
                VIEWModelForCabineteDoctori.setRowCount(0);
                LoadDataIntoTables(TableList.indexOf(VIEWTabel_FOR_CabineteDoctori));
                VIEWTF_FOR_CUI.setEnabled(true);
            }
        }
    }//GEN-LAST:event_VIEWDeleteBtnForCabineteDoctoriActionPerformed

    private void VIEWUpdateBtnForCabineteDoctoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIEWUpdateBtnForCabineteDoctoriActionPerformed
        // TODO add your handling code here:
        DefaultTableModel VIEWModelForCabineteDoctori  = (DefaultTableModel) this.VIEWTabel_FOR_CabineteDoctori.getModel();
        int row = VIEWTabel_FOR_CabineteDoctori.getSelectedRow();
        if(row != -1){
            Integer cabinetID = Integer.parseInt(VIEWModelForCabineteDoctori.getValueAt(row, 0).toString());
            CabineteDoctoriVIEW  newUpdatedCabinetInVIEW = new CabineteDoctoriVIEW();
            LineBorder VIEWTF_NUME_border = (LineBorder) VIEWTF_FOR_CabinetNume.getBorder();
            LineBorder VIEWTF_CODPOSTAL_border = (LineBorder) VIEWTF_FOR_CabineteCodPostal.getBorder();
            LineBorder VIEWTF_ORAS_border = (LineBorder) VIEWTF_FOR_CabinetOras.getBorder();
            LineBorder VIEWTF_NR_STRADA_border = (LineBorder) VIEWTF_FOR_CabinetNrStada.getBorder();
            Color TF_NUME_Color = VIEWTF_NUME_border.getLineColor();
            Color TF_CODPOSTAL_Color = VIEWTF_CODPOSTAL_border.getLineColor();
            Color TF_ORAS_Color = VIEWTF_ORAS_border.getLineColor();
            Color TF_NR_STRADA_Color = VIEWTF_NR_STRADA_border.getLineColor();
            if(TF_NUME_Color == Color.green &&
               TF_CODPOSTAL_Color == Color.green && 
               TF_ORAS_Color == Color.green && 
               TF_NR_STRADA_Color == Color.green){

               String cabinetNume = VIEWTF_FOR_CabinetNume.getText();
               String cabinetCodPostal = VIEWTF_FOR_CabineteCodPostal.getText();
               String cabinetOras = VIEWTF_FOR_CabinetOras.getText();
               Integer cabinetNumarStrada = Integer.parseInt(VIEWTF_FOR_CabinetNrStada.getText());

               newUpdatedCabinetInVIEW.setCabinetNume(cabinetNume);
               newUpdatedCabinetInVIEW.setCabinetOras(cabinetOras);
               newUpdatedCabinetInVIEW.setCodPostal(cabinetCodPostal);
               newUpdatedCabinetInVIEW.setCabinetNrStrada(cabinetNumarStrada);

               CRUD_cabineteDoctoriView.update(newUpdatedCabinetInVIEW , cabinetID);
               VIEWNoBordersForCabineteDoctori();
               VIEWModelForCabineteDoctori.setRowCount(0);
               LoadDataIntoTables(TableList.indexOf(VIEWTabel_FOR_CabineteDoctori));
               VIEWTF_FOR_CUI.setEnabled(true);
            }
            
        }
    }//GEN-LAST:event_VIEWUpdateBtnForCabineteDoctoriActionPerformed
    
    private void VIEWClearFieldsForCabineteDoctori(){
        String empty = "";
        VIEWTF_FOR_CUI.setText(empty);
        VIEWTF_FOR_CabinetNrStada.setText(empty);
        VIEWTF_FOR_CabinetNume.setText(empty);
        VIEWTF_FOR_CabinetOras.setText(empty);
        VIEWTF_FOR_CabineteCodPostal.setText(empty);
        VIEWTF_FOR_CUI.setEnabled(true);
        VIEWNoBordersForCabineteDoctori();
    }
    
    private void VIEWClearBtnForCabineteDoctoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIEWClearBtnForCabineteDoctoriActionPerformed
        // TODO add your handling code here:
        VIEWClearFieldsForCabineteDoctori();
        
    }//GEN-LAST:event_VIEWClearBtnForCabineteDoctoriActionPerformed

    private void VIEWTabel_FOR_CabineteDoctoriMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VIEWTabel_FOR_CabineteDoctoriMouseClicked
        // TODO add your handling code here:
        DefaultTableModel VIEWModelForCabineteDoctori  = (DefaultTableModel) this.VIEWTabel_FOR_CabineteDoctori.getModel();
        int row = VIEWTabel_FOR_CabineteDoctori.getSelectedRow();
        if(row != -1){
            VIEWTF_FOR_CUI.setBorder(greenLine);
            VIEWTF_FOR_CUI.setText(VIEWModelForCabineteDoctori.getValueAt(row, 1).toString());
            VIEWTF_FOR_CUI.setEnabled(false);
            VIEWTF_FOR_CabinetNume.setText(VIEWModelForCabineteDoctori.getValueAt(row, 2).toString());
            VIEWTF_FOR_CabineteCodPostal.setText(VIEWModelForCabineteDoctori.getValueAt(row, 3).toString());
            VIEWTF_FOR_CabinetOras.setText(VIEWModelForCabineteDoctori.getValueAt(row, 4).toString());
            VIEWTF_FOR_CabinetNrStada.setText(VIEWModelForCabineteDoctori.getValueAt(row, 5).toString());
            VIEWTF_FOR_CabinetNrStada.setBorder(greenLine);
            VIEWTF_FOR_CabinetNume.setBorder(greenLine);
            VIEWTF_FOR_CabinetOras.setBorder(greenLine);
            VIEWTF_FOR_CabineteCodPostal.setBorder(greenLine);
        }
    }//GEN-LAST:event_VIEWTabel_FOR_CabineteDoctoriMouseClicked
    /* !!!!!!!!!!!!!!!!!!! RETETE VIEW WHERE DML OPERATIONS ARE NOT POSSIBLE !!!!!!!!!!!!!!!!!!!!!*/
       /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
            /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
    
    /* --------------------------------------------------------------- */
    /* --------------------------------------------------------------- */ 
    
    private void VIEWTF_FOR_CNPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VIEWTF_FOR_CNPKeyReleased
        // TODO add your handling code here:
        if(CheckCnpPacient(VIEWTF_FOR_CNP)){
            String inputCNP = VIEWTF_FOR_CNP.getText();
            Pacienti pacientInDb = CRUD_Pacienti.findById(inputCNP);
            if(pacientInDb != null){
                VIEWTF_FOR_CNP.setBorder(greenLine);
                VIEWLABEL_RETETE_CHECK_CNP.setVisible(false);
            }else{
                VIEWTF_FOR_CNP.setBorder(redLine);
                VIEWLABEL_RETETE_CHECK_CNP.setVisible(true);
            }
                
        }
            
    }//GEN-LAST:event_VIEWTF_FOR_CNPKeyReleased

    private void VIEWTF_FOR_NR_RETETEKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VIEWTF_FOR_NR_RETETEKeyReleased
        // TODO add your handling code here
        if(CheckOnlyForNumber(VIEWTF_FOR_NR_RETETE)){
            VIEWTF_FOR_NR_RETETE.setBorder(greenLine);
        }else{
            VIEWTF_FOR_NR_RETETE.setBorder(redLine);
        }
    }//GEN-LAST:event_VIEWTF_FOR_NR_RETETEKeyReleased

    private void VIEWAddBtnForReteteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIEWAddBtnForReteteActionPerformed
        // TODO add your handling code here:
        LineBorder VIEW_TF_CNP_BORDER = (LineBorder) VIEWTF_FOR_CNP.getBorder();
        LineBorder VIEW_TF_nrRetete_BORDER = (LineBorder) VIEWTF_FOR_NR_RETETE.getBorder();
        Color cnpColor = VIEW_TF_CNP_BORDER.getLineColor();
        Color nrColor = VIEW_TF_nrRetete_BORDER.getLineColor();
        
        if(cnpColor == Color.green && nrColor == Color.green){
            try{
                ReteteVIEW newRetetaVIEW = new ReteteVIEW();
                newRetetaVIEW.setPacientCnp(VIEWTF_FOR_CNP.getText());
                newRetetaVIEW.setNrRetete(Integer.parseInt(VIEWTF_FOR_NR_RETETE.getText()));
                CRUD_Retete_VIEW.save(newRetetaVIEW);
            }catch(Exception ex){
                ex.printStackTrace();
                VIEWTF_FOR_CNP.setBorder(classicBorder);
                VIEWTF_FOR_NR_RETETE.setBorder(classicBorder);
            }
        }
    }//GEN-LAST:event_VIEWAddBtnForReteteActionPerformed

    private void NOT_DMLViewForReteteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NOT_DMLViewForReteteActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) ParentPanel.getLayout();
        cardLayout.show(ParentPanel, "card12");
        DefaultTableModel VIEWModelForRetete = (DefaultTableModel) VIEWTable_RETETE.getModel();
        VIEWModelForRetete.setRowCount(0);
        LoadDataIntoTables(TableList.indexOf(VIEWTable_RETETE));
        VIEWTF_FOR_CNP.setBorder(classicBorder);
        VIEWTF_FOR_NR_RETETE.setBorder(classicBorder);
        VIEWTF_FOR_CNP.setText("");
        VIEWTF_FOR_NR_RETETE.setText("");
    }//GEN-LAST:event_NOT_DMLViewForReteteActionPerformed

    private void VIEWSearchFieldForReteteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VIEWSearchFieldForReteteKeyReleased
        // TODO add your handling code here:
        String inputCNP = VIEWSearchFieldForRetete.getText();
        List<ReteteVIEW> currentListForPacientsInReteteVIEW = CRUD_Retete_VIEW.currentPacientsCNP(inputCNP);
        DefaultTableModel VIEWModelForRetete = (DefaultTableModel) VIEWTable_RETETE.getModel();
        VIEWModelForRetete.setRowCount(0);
        for(ReteteVIEW IT : currentListForPacientsInReteteVIEW){
            VIEWModelForRetete.addRow(new Object[]{IT.getPacientCnp() , IT.getNrRetete()});
        }
    }//GEN-LAST:event_VIEWSearchFieldForReteteKeyReleased

    private void VIEWSearchFieldForReteteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VIEWSearchFieldForReteteMouseClicked
        // TODO add your handling code here:
        VIEWSearchFieldForRetete.setText("");
    }//GEN-LAST:event_VIEWSearchFieldForReteteMouseClicked
    
    /* --------------------------------------------------------------- */ 
    /* --------------------------------------------------------------- */ 
    /* --------------------------------------------------------------- */ 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton AddBtnCabinet;
    private javax.swing.JButton AddBtnDoctorType;
    private javax.swing.JButton AddBtnMedicament;
    private javax.swing.JButton AddBtnRetete;
    private javax.swing.JButton AddBtnReteteCuMedicamentele;
    private javax.swing.JButton AddBtnTL;
    private javax.swing.JButton AddBtnTestePacient;
    private javax.swing.JButton AddPacientBtn;
    private javax.swing.JComboBox<String> BoxForGroupByOptions;
    private javax.swing.JLabel CHECKLabelForDoctorType;
    private javax.swing.JLabel CHECKLabelForEmitionDate;
    private javax.swing.JLabel CHECKLabelForEmitionDate2;
    private javax.swing.JLabel CHECKLabelForPrescriptionType;
    private javax.swing.JLabel CHECKLabelForRetetaCNP;
    private javax.swing.JLabel CHECKLabelForRetetaID;
    private javax.swing.JLabel CHECKLabelForReteteCUI;
    private javax.swing.JLabel CHECKLabelReteteExpDate;
    private javax.swing.JLabel CHECKPrescriptionFound;
    private javax.swing.JLabel CHECKPrescriptionListEmpty;
    private javax.swing.JLabel CNP;
    private javax.swing.JPanel CRUDDoctorTypePanel;
    private javax.swing.JPanel CRUDPanelCabinets;
    private javax.swing.JPanel CRUDPanelForReteteCuMedicamentele;
    private javax.swing.JPanel CRUDPanelMedicaments;
    private javax.swing.JPanel CRUDPanelRetete;
    private javax.swing.JButton CabineteDoctoriBtn;
    private javax.swing.JPanel CabineteDoctoriPanel;
    private javax.swing.JTable CabinetsTable;
    private javax.swing.JLabel CheckLabel2ForCNP;
    private javax.swing.JLabel CheckLabelCUICabinet;
    private javax.swing.JLabel CheckLabelForCNP;
    private javax.swing.JLabel CheckLabelForCNPInPacienti;
    private javax.swing.JLabel CheckLabelForMaxValue;
    private javax.swing.JLabel CheckLabelForMinValue;
    private javax.swing.JLabel CheckLabelForNumeTest;
    private javax.swing.JLabel CheckPrescriptionNotFound;
    private javax.swing.JLabel CheckSelectFromList;
    private javax.swing.JButton ClearBtn;
    private javax.swing.JButton ClearBtnCabinet;
    private javax.swing.JButton ClearBtnDoctorType;
    private javax.swing.JButton ClearBtnForPacient;
    private javax.swing.JButton ClearBtnMedicament;
    private javax.swing.JButton ClearBtnRetete;
    private javax.swing.JButton ClearBtnReteteCuMedicamentele;
    private javax.swing.JButton ClearBtnTL;
    private javax.swing.JButton ClearBtnTestePacient;
    private javax.swing.JComboBox<String> ComboBoxDayTestEmition;
    private javax.swing.JComboBox<String> ComboBoxForAccuaracyValues;
    private javax.swing.JComboBox<String> ComboBoxForAsigurare;
    private javax.swing.JComboBox<String> ComboBoxForDay;
    private javax.swing.JComboBox<String> ComboBoxForDayEmitionDate;
    private javax.swing.JComboBox<String> ComboBoxForDayExpirationDate;
    private javax.swing.JComboBox<String> ComboBoxForDayPacient;
    private javax.swing.JComboBox<String> ComboBoxForDoctorGROUPBY;
    private javax.swing.JComboBox<String> ComboBoxForDoctorType;
    private javax.swing.JComboBox<String> ComboBoxForMedicamentSelection;
    private javax.swing.JComboBox<String> ComboBoxForMedicamentType;
    private javax.swing.JComboBox<String> ComboBoxForMedicamentWeight;
    private javax.swing.JComboBox<String> ComboBoxForMonth;
    private javax.swing.JComboBox<String> ComboBoxForMonthEmitionDate;
    private javax.swing.JComboBox<String> ComboBoxForMonthExpirationDate;
    private javax.swing.JComboBox<String> ComboBoxForMonthPacient;
    private javax.swing.JComboBox<String> ComboBoxForPrefix;
    private javax.swing.JComboBox<String> ComboBoxForPrescriptionType;
    private javax.swing.JComboBox<Integer> ComboBoxForQuantity;
    private javax.swing.JComboBox<String> ComboBoxForResults;
    private javax.swing.JComboBox<String> ComboBoxForYear;
    private javax.swing.JComboBox<String> ComboBoxForYearEmitionDate;
    private javax.swing.JComboBox<String> ComboBoxForYearExpirationDate;
    private javax.swing.JComboBox<String> ComboBoxForYearPacient;
    private javax.swing.JComboBox<String> ComboBoxMonthTestEmition;
    private javax.swing.JComboBox<String> ComboBoxYearTestEmition;
    private javax.swing.JButton DMLViewForCabineteDoctori;
    private javax.swing.JPanel DMLView_PANEL_CabineteDoctori;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JButton DeleteBtnCabinet;
    private javax.swing.JButton DeleteBtnForPacient;
    private javax.swing.JButton DeleteBtnMedicament;
    private javax.swing.JButton DeleteBtnRetete;
    private javax.swing.JButton DeleteBtnReteteCuMedicamentele;
    private javax.swing.JButton DeleteBtnTL;
    private javax.swing.JButton DeleteBtnTestePacient;
    private javax.swing.JButton DeleteButtonDoctorType;
    private javax.swing.JPanel DoctorCRUDOperationsPanel;
    private javax.swing.JTable DoctorTypeTable;
    private javax.swing.JButton DoctoriBtn;
    private javax.swing.JPanel DoctoriPanel;
    private javax.swing.JLabel DoctorsLabel;
    private javax.swing.JTable DoctorsTable;
    private javax.swing.JButton GroupByBtn;
    private javax.swing.JComboBox<String> JoinCommands;
    private javax.swing.JLabel LabelCabinetCUI;
    private javax.swing.JLabel LabelForAccuaracy;
    private javax.swing.JLabel LabelForBirthDate;
    private javax.swing.JLabel LabelForCNPPacient;
    private javax.swing.JLabel LabelForCUI1;
    private javax.swing.JLabel LabelForCUI2;
    private javax.swing.JLabel LabelForCabinetCity;
    private javax.swing.JLabel LabelForCabinetName;
    private javax.swing.JLabel LabelForCantitate;
    private javax.swing.JLabel LabelForDoctorCUI;
    private javax.swing.JLabel LabelForDoctorName;
    private javax.swing.JLabel LabelForDoctorType;
    private javax.swing.JLabel LabelForDoctorTypeName;
    private javax.swing.JLabel LabelForExpirationDate;
    private javax.swing.JLabel LabelForMaxVal;
    private javax.swing.JLabel LabelForMedicamentName;
    private javax.swing.JLabel LabelForMedicamentType;
    private javax.swing.JLabel LabelForMedicamentWeight;
    private javax.swing.JLabel LabelForMinVal;
    private javax.swing.JLabel LabelForNumePacient;
    private javax.swing.JLabel LabelForNumeTL;
    private javax.swing.JLabel LabelForPacientOras;
    private javax.swing.JLabel LabelForPacientiBirthDate;
    private javax.swing.JLabel LabelForPostalCode;
    private javax.swing.JLabel LabelForPrename;
    private javax.swing.JLabel LabelForPrescriptionID;
    private javax.swing.JLabel LabelForPrescriptionType;
    private javax.swing.JLabel LabelForResults;
    private javax.swing.JLabel LabelForRetetaCNP;
    private javax.swing.JLabel LabelForRetetaCUI;
    private javax.swing.JLabel LabelForRetetaEmitionDate;
    private javax.swing.JLabel LabelForStreet;
    private javax.swing.JLabel LabelForTestEmitionDate;
    private javax.swing.JLabel LabelForTestValue;
    private javax.swing.JLabel LabelForTitleDoctorType;
    private javax.swing.JLabel LabelForTitleTL;
    private javax.swing.JLabel LabelPhoneNumber;
    private javax.swing.JLabel LabelStreetNumber;
    private javax.swing.JList<Integer> ListForPacientRetete;
    private javax.swing.JComboBox<String> MedicamentBoxForJoinQUERY;
    private javax.swing.JButton MedicamenteBtn;
    private javax.swing.JPanel MedicamentePanel;
    private javax.swing.JTable MedicamentsTable;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JButton NOT_DMLViewForRetete;
    private javax.swing.JButton PacientiBtn;
    private javax.swing.JPanel PacientiCRUDPanel;
    private javax.swing.JPanel PacientiPanel;
    private javax.swing.JTable PacientsTable;
    private javax.swing.JPanel ParentPanel;
    private javax.swing.JButton ReteteBtn;
    private javax.swing.JButton ReteteCuMedicamenteleBtn;
    private javax.swing.JPanel ReteteCuMedicamentelePanel;
    private javax.swing.JTable ReteteCuMedicamenteleTable;
    private javax.swing.JPanel RetetePanel;
    private javax.swing.JTable ReteteTable;
    private javax.swing.JButton SelectButtonForJoin;
    private javax.swing.JComboBox<String> TestNameForJoinQUERY;
    private javax.swing.JButton TesteLaboratorBtn;
    private javax.swing.JPanel TesteLaboratorCRUDPanel;
    private javax.swing.JPanel TesteLaboratorPanel;
    private javax.swing.JTable TesteLaboratorTable;
    private javax.swing.JButton TestePacientiBtn;
    private javax.swing.JPanel TestePacientiCRUDPanel;
    private javax.swing.JPanel TestePacientiPanel;
    private javax.swing.JTable TestePacientiTable;
    private javax.swing.JTextField TextFIeldForStreetNumber;
    private javax.swing.JTextField TextFieldCabinetName;
    private javax.swing.JTextField TextFieldForCNP;
    private javax.swing.JTextField TextFieldForCNPTesteLaborator;
    private javax.swing.JTextField TextFieldForCabinetCUI;
    private javax.swing.JTextField TextFieldForCabinetCity;
    private javax.swing.JTextField TextFieldForDoctorCUI;
    private javax.swing.JTextField TextFieldForDoctorName;
    private javax.swing.JTextField TextFieldForDoctorPrename;
    private javax.swing.JTextField TextFieldForDoctorType;
    private javax.swing.JTextField TextFieldForMaxVal;
    private javax.swing.JTextField TextFieldForMedicamentName;
    private javax.swing.JTextField TextFieldForMinVal;
    private javax.swing.JTextField TextFieldForNumePacient;
    private javax.swing.JTextField TextFieldForNumeTL;
    private javax.swing.JTextField TextFieldForPacientOras;
    private javax.swing.JTextField TextFieldForPhoneNumber;
    private javax.swing.JTextField TextFieldForPostalCode;
    private javax.swing.JTextField TextFieldForPrefixName;
    private javax.swing.JTextField TextFieldForPrenumePacient;
    private javax.swing.JTextField TextFieldForPrescriptionID;
    private javax.swing.JTextField TextFieldForRetetaCNP;
    private javax.swing.JTextField TextFieldForRetetaCUI;
    private javax.swing.JTextField TextFieldForStreet;
    private javax.swing.JTextField TextFieldForTestValue;
    private javax.swing.JTextField TextFieldLabTest;
    private javax.swing.JButton TipDoctoriBtn;
    private javax.swing.JPanel TipDoctoriPanel;
    private javax.swing.JLabel TitleCabinetsLabel;
    private javax.swing.JLabel TitleForMedicamentePanel;
    private javax.swing.JLabel TitleLabelForReteteCuMedicamentele;
    private javax.swing.JLabel TitleLabelForTestePacienti;
    private javax.swing.JLabel TitleLabelPacienti;
    private javax.swing.JLabel TtitleLabelForRetetePanel;
    private javax.swing.JButton UpdatBtnMedicament;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JButton UpdateBtnCabinet;
    private javax.swing.JButton UpdateBtnDoctorType;
    private javax.swing.JButton UpdateBtnForPacient;
    private javax.swing.JButton UpdateBtnRetete;
    private javax.swing.JButton UpdateBtnReteteCuMedicamentele;
    private javax.swing.JButton UpdateBtnTL;
    private javax.swing.JButton UpdateBtnTestePacient;
    private javax.swing.JButton VIEWAddBtnCabineteDoctori;
    private javax.swing.JButton VIEWAddBtnForRetete;
    private javax.swing.JLabel VIEWCheckCUI;
    private javax.swing.JButton VIEWClearBtnForCabineteDoctori;
    private javax.swing.JButton VIEWDeleteBtnForCabineteDoctori;
    private javax.swing.JLabel VIEWLABEL_RETETE_CHECK_CNP;
    private javax.swing.JLabel VIEWLabelForCNP;
    private javax.swing.JLabel VIEWLabelForCabinetNrStrada;
    private javax.swing.JLabel VIEWLabelForCodPostal;
    private javax.swing.JLabel VIEWLabelForDoctorCUI;
    private javax.swing.JLabel VIEWLabelForNrRetete;
    private javax.swing.JLabel VIEWLabelForNumeCabinet;
    private javax.swing.JLabel VIEWLabelForOras;
    private javax.swing.JLabel VIEWLabelTitleForCabineteDoctori;
    private javax.swing.JPanel VIEWPanelForCabineteDoctori;
    private javax.swing.JPanel VIEWPanelForRetete_NOT_DML;
    private javax.swing.JPanel VIEWPanelRetete;
    private javax.swing.JTextField VIEWSearchFieldForRetete;
    private javax.swing.JLabel VIEWSearchLabel;
    private javax.swing.JTextField VIEWTF_FOR_CNP;
    private javax.swing.JTextField VIEWTF_FOR_CUI;
    private javax.swing.JTextField VIEWTF_FOR_CabinetNrStada;
    private javax.swing.JTextField VIEWTF_FOR_CabinetNume;
    private javax.swing.JTextField VIEWTF_FOR_CabinetOras;
    private javax.swing.JTextField VIEWTF_FOR_CabineteCodPostal;
    private javax.swing.JTextField VIEWTF_FOR_NR_RETETE;
    private javax.swing.JTable VIEWTabel_FOR_CabineteDoctori;
    private javax.swing.JTable VIEWTable_RETETE;
    private javax.swing.JButton VIEWUpdateBtnForCabineteDoctori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables
}
